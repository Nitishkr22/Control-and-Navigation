"""

Path tracking simulation with iterative linear model predictive control for speed and steer control

author: Atsushi Sakai (@Atsushi_twi)

"""
import sys
# sys.path.append("../../PathPlanning/CubicSpline/")

import numpy as np
import math
import cvxpy
import matplotlib.pyplot as plt
import cubic_spline_planner

####################

from novatel_oem7_msgs.msg import BESTPOS
from novatel_oem7_msgs.msg import BESTVEL
from novatel_oem7_msgs.msg import INSPVA
from novatel_oem7_msgs.msg import BESTUTM
from novatel_oem7_msgs.msg import CORRIMU
# from novatel_gps_msgs.msg import 
from nav_msgs.msg import Odometry


import rospy
import time
import actuator
import pid


#TCP connection
obj = actuator.controller("169.254.178.227",5001)
obj.connect()

#PID controller
Kp = 1.65971
Ki = 0.00007
Kd = 0.710
rate_min = -100
rate_max = 100
pid_controller = pid.PIDController(Kp, Ki, Kd, rate_min, rate_max)

wp = 0
message = "A,N,0,0,0,0,0,0,0,0,0\r\n" 
obj.send_data(message)
feed = obj.receive_data()
print(feed)
message = "A,N,0,1,100,0,0,0,0,0,0\r\n"
obj.send_data(message)
time.sleep(1)
feed = obj.receive_data()
print(feed)
message = "A,D,0,0,0,0,0,0,0,0,0 \r\n"
obj.send_data(message)
feed = obj.receive_data()
print(feed)

def callback_xandy(data):
    global Y_pos, X_pos
    Y_pos = data.pose.pose.position.x
    X_pos = data.pose.pose.position.y

def callback_vel(data):
    global gnss_vel
    gnss_vel = data.hor_speed

def callback_heading(data):
    global north_vel, east_vel,heading
    north_vel = data.north_velocity
    east_vel = data.east_velocity
    heading = data.azimuth
      
def callback_imu(data):
    global yaw_rate
    yaw_rate = data.yaw_rate

rospy.init_node('Navigation', anonymous=True)
#ROS subscription
# rospy.Subscriber("/novatel/oem7/bestpos",BESTPOS, callback_latlong)
rospy.Subscriber("/novatel/oem7/inspva",INSPVA, callback_heading)
rospy.Subscriber("/novatel/oem7/bestvel",BESTVEL, callback_vel)
rospy.Subscriber("/novatel/oem7/odom",Odometry, callback_xandy)
rospy.Subscriber("/novatel/oem7/corrimu",CORRIMU, callback_imu)
####################

NX = 4  # x = x, y, v, yaw
NU = 2  # a = [accel, steer]
T = 5  # horizon length
# mpc parameters
R = np.diag([0.01, 0.01])  # input cost matrix
Rd = np.diag([0.01, 1.0])  # input difference cost matrix
Q = np.diag([1.0, 1.0, 0.5, 0.5])  # state cost matrix
Qf = Q  # state final matrix
GOAL_DIS = 1.5  # goal distance
STOP_SPEED = 0.5 / 3.6  # stop speed
MAX_TIME = 100.0  # max simulation time

# iterative paramter
MAX_ITER = 3  # Max iteration
DU_TH = 0.1  # iteration finish param

TARGET_SPEED = 10.0 / 3.6  # [m/s] target speed
N_IND_SEARCH = 10  # Search index number

DT = 0.2  # [s] time tick

# Vehicle parameters
LENGTH = 4.5  # [m]
WIDTH = 2.0  # [m]
BACKTOWHEEL = 1.0  # [m]
WHEEL_LEN = 0.3  # [m]
WHEEL_WIDTH = 0.2  # [m]
TREAD = 0.7  # [m]
WB = 2.5  # [m]

MAX_STEER = math.radians(45.0)  # maximum steering angle [rad]
MAX_DSTEER = math.radians(30.0)  # maximum steering speed [rad/s]
MAX_SPEED = 55.0 / 3.6  # maximum speed [m/s]
MIN_SPEED = -0.5 / 3.6  # minimum speed [m/s]
MAX_ACCEL = 1.0  # maximum accel [m/ss]

show_animation = True


class State:
    """
    vehicle state class
    """

    def __init__(self, x=0.0, y=0.0, yaw=0.0, v=0.0):
        self.x = x
        self.y = y
        self.yaw = yaw
        self.v = v
        self.predelta = None


def pi_2_pi(angle):
    while(angle > math.pi):
        angle = angle - 2.0 * math.pi

    while(angle < -math.pi):
        angle = angle + 2.0 * math.pi

    return angle


def get_linear_model_matrix(v, phi, delta):

    A = np.matrix(np.zeros((NX, NX)))
    A[0, 0] = 1.0
    A[1, 1] = 1.0
    A[2, 2] = 1.0
    A[3, 3] = 1.0
    A[0, 2] = DT * math.cos(phi)
    A[0, 3] = - DT * v * math.sin(phi)
    A[1, 2] = DT * math.sin(phi)
    A[1, 3] = DT * v * math.cos(phi)
    A[3, 2] = DT * math.tan(delta) / WB

    B = np.matrix(np.zeros((NX, NU)))
    B[2, 0] = DT
    B[3, 1] = DT * v / (WB * math.cos(delta) ** 2)

    C = np.zeros(NX)
    C[0] = DT * v * math.sin(phi) * phi
    C[1] = - DT * v * math.cos(phi) * phi
    C[3] = v * delta / (WB * math.cos(delta) ** 2)

    return A, B, C


def plot_car(x, y, yaw, steer=0.0, cabcolor="-r", truckcolor="-k"):

    outline = np.matrix([[-BACKTOWHEEL, (LENGTH - BACKTOWHEEL), (LENGTH - BACKTOWHEEL), -BACKTOWHEEL, -BACKTOWHEEL],
                         [WIDTH / 2, WIDTH / 2, - WIDTH / 2, -WIDTH / 2, WIDTH / 2]])

    fr_wheel = np.matrix([[WHEEL_LEN, -WHEEL_LEN, -WHEEL_LEN, WHEEL_LEN, WHEEL_LEN],
                          [-WHEEL_WIDTH - TREAD, -WHEEL_WIDTH - TREAD, WHEEL_WIDTH - TREAD, WHEEL_WIDTH - TREAD, -WHEEL_WIDTH - TREAD]])

    rr_wheel = np.copy(fr_wheel)

    fl_wheel = np.copy(fr_wheel)
    fl_wheel[1, :] *= -1
    rl_wheel = np.copy(rr_wheel)
    rl_wheel[1, :] *= -1

    Rot1 = np.matrix([[math.cos(yaw), math.sin(yaw)],
                      [-math.sin(yaw), math.cos(yaw)]])
    Rot2 = np.matrix([[math.cos(steer), math.sin(steer)],
                      [-math.sin(steer), math.cos(steer)]])

    fr_wheel = (fr_wheel.T * Rot2).T
    fl_wheel = (fl_wheel.T * Rot2).T
    fr_wheel[0, :] += WB
    fl_wheel[0, :] += WB

    fr_wheel = (fr_wheel.T * Rot1).T
    fl_wheel = (fl_wheel.T * Rot1).T

    outline = (outline.T * Rot1).T
    rr_wheel = (rr_wheel.T * Rot1).T
    rl_wheel = (rl_wheel.T * Rot1).T

    outline[0, :] += x
    outline[1, :] += y
    fr_wheel[0, :] += x
    fr_wheel[1, :] += y
    rr_wheel[0, :] += x
    rr_wheel[1, :] += y
    fl_wheel[0, :] += x
    fl_wheel[1, :] += y
    rl_wheel[0, :] += x
    rl_wheel[1, :] += y

    plt.plot(np.array(outline[0, :]).flatten(),
             np.array(outline[1, :]).flatten(), truckcolor)
    plt.plot(np.array(fr_wheel[0, :]).flatten(),
             np.array(fr_wheel[1, :]).flatten(), truckcolor)
    plt.plot(np.array(rr_wheel[0, :]).flatten(),
             np.array(rr_wheel[1, :]).flatten(), truckcolor)
    plt.plot(np.array(fl_wheel[0, :]).flatten(),
             np.array(fl_wheel[1, :]).flatten(), truckcolor)
    plt.plot(np.array(rl_wheel[0, :]).flatten(),
             np.array(rl_wheel[1, :]).flatten(), truckcolor)
    plt.plot(x, y, "*")


def update_state(state, a, delta):
    # input check
    global Y_pos, X_pos,heading,north_vel, east_vel
    if delta >= MAX_STEER:
        delta = MAX_STEER
    elif delta <= -MAX_STEER:
        delta = -MAX_STEER
#############################################33
    # state.x = state.x + state.v * math.cos(state.yaw) * DT
    # state.y = state.y + state.v * math.sin(state.yaw) * DT 
    # state.yaw = state.yaw + state.v / WB * math.tan(delta) * DT
    # print("yyyyyyyyyyy: ",state.yaw)
    # state.v = state.v + a * DT
###################################################
    state.x = X_pos
    state.y = Y_pos
    state.yaw = heading
    state.v = math.sqrt(north_vel ** 2 + east_vel ** 2)
##################################################
    if state. v > MAX_SPEED:
        state.v = MAX_SPEED
    elif state. v < MIN_SPEED:
        state.v = MIN_SPEED

    return state


def get_nparray_from_matrix(x):
    return np.array(x).flatten()


def calc_nearest_index(state, cx, cy, cyaw, pind):

    dx = [state.x - icx for icx in cx[pind:(pind + N_IND_SEARCH)]]
    dy = [state.y - icy for icy in cy[pind:(pind + N_IND_SEARCH)]]

    d = [idx ** 2 + idy ** 2 for (idx, idy) in zip(dx, dy)]

    mind = min(d)

    ind = d.index(mind) + pind

    mind = math.sqrt(mind)

    dxl = cx[ind] - state.x
    dyl = cy[ind] - state.y

    angle = pi_2_pi(cyaw[ind] - math.atan2(dyl, dxl))
    if angle < 0:
        mind *= -1

    return ind, mind


def predict_motion(x0, oa, od, xref):
    xbar = xref * 0.0
    for i in range(len(x0)):
        xbar[i, 0] = x0[i]

    state = State(x=x0[0], y=x0[1], yaw=x0[3], v=x0[2])
    for (ai, di, i) in zip(oa, od, range(1, T + 1)):
        state = update_state(state, ai, di)
        xbar[0, i] = state.x
        xbar[1, i] = state.y
        xbar[2, i] = state.v
        xbar[3, i] = state.yaw

    return xbar

vel = []
def iterative_linear_mpc_control(xref, x0, dref, oa, od):
    """
    MPC contorl with updating operational point iteraitvely
    """

    if oa is None or od is None:
        oa = [0.0] * T
        od = [0.0] * T

    for i in range(MAX_ITER):
        xbar = predict_motion(x0, oa, od, xref)
        poa, pod = oa[:], od[:]
        oa, od, ox, oy, oyaw, ov = linear_mpc_control(xref, xbar, x0, dref)
        du = sum(abs(oa - poa)) + sum(abs(od - pod))  # calc u change value
        if du <= DU_TH:
            break
    else:
        print("Iterative is max iter")
    

    
    print("Type of it oa:", type(oa))
    print("Type of it ov:", type(ov))
    # print("Type of it odelta:", type(odelta))
    print("Value of it oa:", oa)
    print("Value of it ov:", ov)
    vel.append(ov[0])

    # print("Value of it odelta:", odelta)

    return oa, od, ox, oy, oyaw, ov


def linear_mpc_control(xref, xbar, x0, dref):
    """
    linear mpc control

    xref: reference point
    xbar: operational point
    x0: initial state
    dref: reference steer angle
    """

    x = cvxpy.Variable((NX, T + 1))
    u = cvxpy.Variable((NU, T))

    cost = 0.0
    constraints = []

    for t in range(T):
        cost += cvxpy.quad_form(u[:, t], R)

        if t != 0:
            cost += cvxpy.quad_form(xref[:, t] - x[:, t], Q)

        A, B, C = get_linear_model_matrix(
            xbar[2, t], xbar[3, t], dref[0, t])
        constraints += [x[:, t + 1] == A * x[:, t] + B * u[:, t] + C]

        if t < (T - 1):
            cost += cvxpy.quad_form(u[:, t + 1] - u[:, t], Rd)
            constraints += [cvxpy.abs(u[1, t + 1] - u[1, t])
                            <= MAX_DSTEER * DT]

    cost += cvxpy.quad_form(xref[:, T] - x[:, T], Qf)

    constraints += [x[:, 0] == x0]
    constraints += [x[2, :] <= MAX_SPEED]
    constraints += [x[2, :] >= MIN_SPEED]
    constraints += [cvxpy.abs(u[0, :]) <= MAX_ACCEL]
    constraints += [cvxpy.abs(u[1, :]) <= MAX_STEER]

    prob = cvxpy.Problem(cvxpy.Minimize(cost), constraints)
    prob.solve(solver=cvxpy.ECOS, verbose=False)

    if prob.status == cvxpy.OPTIMAL or prob.status == cvxpy.OPTIMAL_INACCURATE:
        ox = get_nparray_from_matrix(x.value[0, :])
        oy = get_nparray_from_matrix(x.value[1, :])
        ov = get_nparray_from_matrix(x.value[2, :])
        oyaw = get_nparray_from_matrix(x.value[3, :])
        oa = get_nparray_from_matrix(u.value[0, :])
        odelta = get_nparray_from_matrix(u.value[1, :])

    else:
        print("Error: Cannot solve mpc..")
        oa, odelta, ox, oy, oyaw, ov = None, None, None, None, None, None
    
   

    print("Type of oa:", type(oa))
    print("Type of ov:", type(ov))
    # print("Type of odelta:", type(odelta))
    print("Value of oa:", oa)
    print("Value of ov:", ov)
    # print("Value of odelta:", odelta)

    return oa, odelta, ox, oy, oyaw, ov


def calc_ref_trajectory(state, cx, cy, cyaw, ck, sp, dl, pind):
    xref = np.zeros((NX, T + 1))
    dref = np.zeros((1, T + 1))
    ncourse = len(cx)

    ind, _ = calc_nearest_index(state, cx, cy, cyaw, pind)

    if pind >= ind:
        ind = pind

    xref[0, 0] = cx[ind]
    xref[1, 0] = cy[ind]
    xref[2, 0] = sp[ind]
    xref[3, 0] = cyaw[ind]
    dref[0, 0] = 0.0  # steer operational point should be 0

    travel = 0.0

    for i in range(T + 1):
        travel += abs(state.v) * DT
        dind = int(round(travel / dl))

        if (ind + dind) < ncourse:
            xref[0, i] = cx[ind + dind]
            xref[1, i] = cy[ind + dind]
            xref[2, i] = sp[ind + dind]
            xref[3, i] = cyaw[ind + dind]
            dref[0, i] = 0.0
        else:
            xref[0, i] = cx[ncourse - 1]
            xref[1, i] = cy[ncourse - 1]
            xref[2, i] = sp[ncourse - 1]
            xref[3, i] = cyaw[ncourse - 1]
            dref[0, i] = 0.0

    return xref, ind, dref


def check_goal(state, goal, tind, nind):

    # check goal
    dx = state.x - goal[0]
    dy = state.y - goal[1]
    d = math.sqrt(dx ** 2 + dy ** 2)

    if (d <= GOAL_DIS):
        isgoal = True
    else:
        isgoal = False

    if abs(tind - nind) >= 5:
        isgoal = False

    if (abs(state.v) <= STOP_SPEED):
        isstop = True
    else:
        isstop = False

    if isgoal and isstop:
        return True

    return False


def do_simulation(cx, cy, cyaw, ck, sp, dl, initial_state):
    """
    Simulation

    cx: course x position list
    cy: course y position list
    cyaw: course yaw position list
    ck: course curvature list
    sp: speed profile
    dl: course tick [m]

    """
    

    goal = [cx[-1], cy[-1]]

    state = initial_state

    # initial yaw compensation
    if state.yaw - cyaw[0] >= math.pi:
        state.yaw -= math.pi * 2.0
    elif state.yaw - cyaw[0] <= -math.pi:
        state.yaw += math.pi * 2.0

    time = 0.0
    x = [state.x]
    y = [state.y]
    yaw = [state.yaw]
    v = [state.v]
    t = [0.0]
    d = [0.0]
    a = [0.0]
    target_ind, _ = calc_nearest_index(state, cx, cy, cyaw, 0)

    odelta, oa = None, None

    cyaw = smooth_yaw(cyaw)

    while MAX_TIME >= time:
        xref, target_ind, dref = calc_ref_trajectory(
            state, cx, cy, cyaw, ck, sp, dl, target_ind)

        x0 = [state.x, state.y, state.v, state.yaw]  # current state

        oa, odelta, ox, oy, oyaw, ov = iterative_linear_mpc_control(
            xref, x0, dref, oa, odelta)

        if odelta is not None:
            di, ai = odelta[0], oa[0]
###############################################################
        steer_output = np.clip(di*(180/np.pi), a_min = -30, a_max = 30)
        steer_output = (50/3)*steer_output
        steer_output = np.clip(steer_output, a_min = -500, a_max = 500)

        
        steer_angle = steer_output
        print("Steer Angle: ",steer_angle)
        steering_feedback = obj.receive_data().split(',')[2]
        # print("steer Feedback: ",steering_feedback)
        velocity_feedback= obj.receive_data().split(',')[3]
        print("velocity_feedback: ",velocity_feedback)
        steer_rate = pid_controller.update(steer_angle, float(steering_feedback))

        if (steer_angle)>110:
            if int(velocity_feedback)> 7:
                obj.send_data("A,D,0,1,15,1,"+str(steer_rate)+",0,0,0,0\r\n")
            else:
                obj.send_data("A,D,7,0,0,1,"+str(steer_rate)+",0,0,0,0\r\n")
        elif int(velocity_feedback)> 10:
            obj.send_data("A,D,0,1,8,1,"+str(steer_rate)+",0,0,0,0\r\n")
        else:
            obj.send_data("A,D,8,0,0,1,"+str(steer_rate)+",0,0,0,0\r\n")

###############################################################
        state = update_state(state, ai, di)
        time = time + DT

        x.append(state.x)
        y.append(state.y)
        yaw.append(state.yaw)
        v.append(state.v)
        t.append(time)
        d.append(di)
        a.append(ai)

        if check_goal(state, goal, target_ind, len(cx)):
            print("Goal")
            break

        if show_animation:
            plt.cla()
            if ox is not None:
                plt.plot(ox, oy, "xr", label="MPC")
            plt.plot(cx, cy, "-r", label="course")
            plt.plot(x, y, "ob", label="trajectory")
            plt.plot(xref[0, :], xref[1, :], "xk", label="xref")
            plt.plot(cx[target_ind], cy[target_ind], "xg", label="target")
            plot_car(state.x, state.y, state.yaw, steer=di)
            plt.axis("equal")
            plt.grid(True)
            plt.title("Time[s]:" + str(round(time, 2)) +
                      ", speed[km/h]:" + str(round(state.v * 3.6, 2)))
            plt.pause(0.0001)

    return t, x, y, yaw, v, d, a


def calc_speed_profile(cx, cy, cyaw, target_speed):

    speed_profile = [target_speed] * len(cx)
    direction = 1.0  # forward

    # Set stop point
    for i in range(len(cx) - 1):
        dx = cx[i + 1] - cx[i]
        dy = cy[i + 1] - cy[i]

        move_direction = math.atan2(dy, dx)

        if dx != 0.0 and dy != 0.0:
            dangle = abs(pi_2_pi(move_direction - cyaw[i]))
            if dangle >= math.pi / 4.0:
                direction = -1.0
            else:
                direction = 1.0

        if direction != 1.0:
            speed_profile[i] = - target_speed
        else:
            speed_profile[i] = target_speed

    speed_profile[-1] = 0.0

    return speed_profile


def smooth_yaw(yaw):

    for i in range(len(yaw) - 1):
        dyaw = yaw[i + 1] - yaw[i]

        while dyaw >= math.pi / 2.0:
            yaw[i + 1] -= math.pi * 2.0
            dyaw = yaw[i + 1] - yaw[i]

        while dyaw <= -math.pi / 2.0:
            yaw[i + 1] += math.pi * 2.0
            dyaw = yaw[i + 1] - yaw[i]

    return yaw


def get_straight_course(dl):
    ax = [0.0, 5.0, 10.0, 20.0, 30.0, 40.0, 50.0]
    ay = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
    cx, cy, cyaw, ck, s = cubic_spline_planner.calc_spline_course(
        ax, ay, ds=dl)

    return cx, cy, cyaw, ck


def get_straight_course2(dl):
    ax = [0.0, -10.0, -20.0, -40.0, -50.0, -60.0, -70.0]
    ay = [0.0, -1.0, 1.0, 0.0, -1.0, 1.0, 0.0]
    cx, cy, cyaw, ck, s = cubic_spline_planner.calc_spline_course(
        ax, ay, ds=dl)

    return cx, cy, cyaw, ck


def get_straight_course3(dl):
    ax = [0.0, -10.0, -20.0, -40.0, -50.0, -60.0, -70.0]
    ay = [0.0, -1.0, 1.0, 0.0, -1.0, 1.0, 0.0]
    cx, cy, cyaw, ck, s = cubic_spline_planner.calc_spline_course(
        ax, ay, ds=dl)

    cyaw = [i - math.pi for i in cyaw]

    return cx, cy, cyaw, ck


def get_forward_course(dl):
    # ax = [0.0, 60.0, 125.0, 50.0, 75.0, 30.0, -10.0]
    # ax = [195034.85339845126, 195035.84322116408, 195037.1031070336, 195038.12222980024, 195039.44748034253, 195040.82633652442, 195042.00105036935, 195043.52156521718, 195044.75312869612, 195046.33548241763, 195047.61177394568, 195049.22853139866, 195050.5345883037, 195052.17084471424, 195053.47997428192, 195054.78929613755, 195056.37678301983, 195057.85299879083, 195058.95833736108, 195060.30888701667, 195061.43963377536, 195062.91956663196, 195064.14175796718, 195065.70169889796, 195066.9296992412, 195068.36805175638, 195069.42887500065, 195070.7304330902, 195072.08362612143, 195073.218788667, 195074.63572887913, 195075.68862341376, 195076.6351124799, 195077.7347042235, 195078.60069103178, 195079.650880908, 195080.6287427129, 195081.32271444102, 195082.08605880284, 195082.63336623312, 195083.20922211773, 195083.61741180674, 195083.97953359244, 195084.18050764024, 195084.33675151487, 195084.39227170288, 195084.3898971154]
    # ax = [0.0, 60.0, 125.0, 50.0, 75.0, 30.0, -10.0]
    ay =  [195035.01564388964, 195035.00679082592, 195034.9936108887, 195034.98011441834, 195034.9654643212, 195034.94940859164, 195034.9349560018, 195034.91456574108, 195034.89572758143, 195034.8738637947, 195034.8562683566, 195034.83166330607, 195034.80626529056, 195034.7875723583, 195034.76831182337, 195034.7486332703, 195034.73361898478, 195034.7192354125, 195034.70736153112, 195034.69722293824, 195034.68968415333, 195034.6828284861, 195034.6774374092, 195034.6732401281, 195034.6698572588, 195034.66653711168, 195034.66353066007, 195034.66332326047, 195034.66579409837, 195034.6689763078, 195034.67394859166, 195034.67921436354, 195034.68235747935, 195034.68453294094, 195034.68779055562, 195034.69023382966, 195034.69213884868, 195034.6952681908, 195034.69602101532, 195034.69640940512, 195034.6977127925, 195034.69809805622, 195034.69968302792, 195034.70107520858, 195034.70110240247, 195034.69932186234, 195034.6986627423, 195034.696465182, 195034.69677004858, 195034.69602271463, 195034.6983281464, 195034.70000905736, 195034.70191149, 195034.7040841457, 195034.70304908507, 195034.700150772, 195034.7009689791, 195034.70242482048, 195034.7037826161, 195034.70040720285, 195034.69902683859, 195034.69890064135, 195034.69765159627, 195034.69742816733, 195034.7014150095, 195034.70623183527, 195034.7129349051, 195034.719238495, 195034.7250103911, 195034.72792718516, 195034.73031946796, 195034.7339184442, 195034.7371984694, 195034.73955317534, 195034.74159657056, 195034.74429056316, 195034.7470667227, 195034.7499285604, 195034.7542011797, 195034.76329808898, 195034.7757598747, 195034.782435825, 195034.79429500073, 195034.80231105385, 195034.80891656972, 195034.81369728217, 195034.8188895589, 195034.82449420023, 195034.82594753808, 195034.82520674675, 195034.82378931352, 195034.82218880206, 195034.82037636286, 195034.81910405296, 195034.8178927635, 195034.81858386652, 195034.8188284955, 195034.81783023616, 195034.81691997117, 195034.81065115926, 195034.80133570152, 195034.7936096971, 195034.78232972434, 195034.7742318963, 195034.76375203786, 195034.75676322557, 195034.7471574447, 195034.73861274484, 195034.73088937884, 195034.72528226284, 195034.72021825958, 195034.71371760246, 195034.71058261138, 195034.709222238, 195034.71206668075, 195034.72059404213, 195034.7326701871, 195034.75632809487, 195034.78579610938, 195034.831159493, 195034.9038048816, 195034.99331500664, 195035.09476675538, 195035.23622446417, 195035.42788619426, 195035.63326609068, 195035.89384396985, 195036.13426753122, 195036.43231645218, 195036.7943819962, 195037.0818450105, 195037.51419646866, 195037.98715491404, 195038.3603707729, 195038.90661293553, 195039.49551406395, 195040.06152899994, 195040.60018341863, 195041.29552039903, 195041.95953390404, 195042.5827267875, 195043.36996616912, 195044.10719225946, 195044.78686385808, 195045.71338436846, 195046.42292564065, 195047.14440841807, 195048.04214365338, 195048.87180083472, 195049.8013801048, 195050.4878600191, 195051.44241937326, 195052.41138089285, 195053.12178032874, 195054.10582817515, 195055.09839214775, 195055.82475799887, 195056.83017796642, 195057.8418555005, 195058.76627521135, 195059.6952304908, 195060.53488996762, 195061.56481812065, 195062.31594803635, 195063.3480989634, 195064.47515723036, 195065.41586799215, 195066.1687667167, 195067.20282615448, 195068.2335200854, 195069.1695739597, 195070.00785532186, 195071.0282082099, 195071.85819255988, 195072.77591783885, 195073.77582068933, 195074.49749138975, 195075.48114335493, 195076.4520635102, 195077.14964429324, 195078.0968668081, 195079.03209904628, 195079.78960278936, 195080.6200444467, 195081.5196282756, 195082.1624728788, 195083.03014879854, 195083.876748217, 195084.62915633907, 195085.43705463377, 195086.00902661684, 195086.77443435957, 195087.50767514756, 195088.01907892205, 195088.6952809101, 195089.33107410895, 195089.76626299878, 195090.37551000077, 195090.79321290305, 195091.252916189, 195091.58857428312, 195091.91981576462, 195092.20509433432, 195092.4661992804, 195092.65081266375, 195092.77848941024, 195092.88258416986, 195092.9290675209, 195092.9405877809, 195092.91649399968, 195092.86780299214, 195092.8089270887, 195092.71788929493, 195092.6456962597, 195092.55675080078, 195092.49107658054, 195092.40043014512, 195092.3045944532, 195092.23088009853, 195092.12332287373, 195092.01135172482, 195091.92919682842, 195091.81296879952, 195091.6965143742, 195091.58786496468, 195091.4808197793, 195091.38401759096, 195091.26925799815, 195091.17312914616, 195091.06772754618, 195090.9533332107, 195090.8400057936, 195090.75799679858, 195090.63618434244, 195090.5480458351, 195090.45959599546, 195090.35290563348, 195090.25586987703, 195090.14908941468, 195090.0730417943, 195089.96672105085, 195089.85951079216, 195089.7803771094, 195089.66531120086, 195089.54679609864, 195089.45799875882, 195089.33804091337, 195089.229791801, 195089.11362108146, 195089.0206140953, 195088.9213464876, 195088.81332868952, 195088.72793024188, 195088.63401600078, 195088.5305809025, 195088.43095255716, 195088.3386622715, 195088.2121772462, 195088.07644522964, 195087.90622410004, 195087.75951982517, 195087.5402546288, 195087.34079810482, 195087.09792971806, 195086.80586929782, 195086.50912620136, 195086.14538460178, 195085.8205999418, 195085.4287319146, 195084.9634273453, 195084.60317679372, 195084.0824559178, 195083.53093749352, 195083.11677315205, 195082.5264640307, 195081.91519507454, 195081.3439639897, 195080.8174331957, 195080.1586360029, 195079.54517944573, 195078.85899341406, 195078.35300699424, 195077.64586663054, 195076.91886897158, 195076.37939635816, 195075.5590197736, 195074.93149595533, 195074.15538206205, 195073.51411108222, 195072.79608898988, 195072.00410144348, 195071.42926508127, 195070.65263596002, 195069.89502594247, 195069.22446380596, 195068.57471504758, 195068.0089326343, 195067.34192982578, 195066.87308584564, 195066.2514221017, 195065.61004285805, 195065.15351874684, 195064.6251665201, 195064.26524504754, 195063.81270972406, 195063.48862575812, 195063.18502820263, 195062.9233667608, 195062.74243414073, 195062.66349119085]

    # ay = [0.0, 0.0, 50.0, 65.0, 30.0, 50.0, -20.0]
    # ay = [1948528.0334873192, 1948527.978629866, 1948527.91688776, 1948527.8551691181, 1948527.8009324542, 1948527.7194117014, 1948527.6490860586, 1948527.5691741165, 1948527.4916342006, 1948527.4236027373, 1948527.3655778691, 1948527.2905512985, 1948527.2266253547, 1948527.147092278, 1948527.0914075966, 1948527.0208727613, 1948526.9811103598, 1948526.9193865506, 1948526.8893870984, 1948526.8584497347, 1948526.8255042639, 1948526.792370577, 1948526.7662160413, 1948526.745463809, 1948526.7769838683, 1948526.847937819, 1948526.9764621446, 1948527.1884803234, 1948527.4989548654, 1948527.8253387562, 1948528.3344628117, 1948528.7669260192, 1948529.257930578, 1948529.899100821, 1948530.465803498, 1948531.2848220025, 1948532.1645444955, 1948532.8788661724, 1948533.8044480465, 1948534.5952411094, 1948535.6704397055, 1948536.5603102657, 1948537.656874974, 1948538.4760583157, 1948539.4506888643, 1948540.2169261756, 1948540.6011516098]
    # ay = [0.0, 0.0, 50.0, 65.0, 30.0, 50.0, -20.0]
    
    ax =  [1948392.360874124, 1948392.6809574235, 1948393.1645646323, 1948393.7005877814, 1948394.2330837764, 1948394.8093175283, 1948395.3659077387, 1948396.0940011062, 1948396.8022700367, 1948397.63090961, 1948398.2652426867, 1948399.1816635379, 1948400.1469317852, 1948400.9717105723, 1948401.922887735, 1948403.0092317807, 1948404.0334963226, 1948404.9831489022, 1948406.0721953758, 1948407.3044088199, 1948408.2142206365, 1948409.479757933, 1948410.64275134, 1948411.9286749694, 1948412.9816180533, 1948414.151951868, 1948415.4367628216, 1948416.7168819457, 1948417.6439161, 1948418.797394651, 1948420.0605990828, 1948421.3177413528, 1948422.228656699, 1948423.4779424388, 1948424.719872987, 1948425.6195602077, 1948426.8557623469, 1948428.0910869876, 1948429.212847185, 1948430.111945304, 1948431.3501082882, 1948432.5897393809, 1948433.4917971103, 1948434.7316391405, 1948435.971377978, 1948437.0994017066, 1948438.1159837688, 1948439.3593449427, 1948440.2645279274, 1948441.5094175055, 1948442.75633115, 1948443.7782220934, 1948445.0283038751, 1948446.1673257127, 1948447.1931936746, 1948448.3357433467, 1948449.5983115435, 1948450.8635813135, 1948451.787410464, 1948453.063102208, 1948454.2248547145, 1948455.5097635416, 1948456.4474671546, 1948457.740219313, 1948459.0400235036, 1948459.989290092, 1948461.2976449335, 1948462.4898587125, 1948463.8050410568, 1948464.8825897623, 1948466.0809376403, 1948467.4025806612, 1948468.6088445152, 1948469.6988103215, 1948470.9133375515, 1948472.2525505123, 1948473.595431753, 1948474.6975523017, 1948475.9264459964, 1948477.1580439033, 1948478.5145430865, 1948479.5050003703, 1948480.995756896, 1948482.1146876037, 1948483.487892778, 1948484.6148181641, 1948485.8691229548, 1948487.2521319757, 1948488.38629157, 1948489.6447881223, 1948491.0278841988, 1948492.0321570209, 1948493.4106896562, 1948494.7866052368, 1948495.7843505298, 1948497.1497809975, 1948498.5085088608, 1948499.8623689995, 1948500.8431316374, 1948502.1846100804, 1948503.5182354606, 1948504.4843682607, 1948505.92543568, 1948506.9928723178, 1948508.2757697494, 1948509.189727439, 1948510.4169514647, 1948511.6097658707, 1948512.6639397293, 1948513.5943910496, 1948514.6149987075, 1948515.7280926306, 1948516.731521801, 1948517.629698746, 1948518.7178366412, 1948519.701958078, 1948520.5831165626, 1948521.6552856162, 1948522.5277072478, 1948523.4926014952, 1948524.5461857342, 1948525.49629722, 1948526.3437573041, 1948527.2759265928, 1948528.2816059478, 1948529.1833817349, 1948530.162083081, 1948530.953685912, 1948531.8192776812, 1948532.755087252, 1948533.4241099039, 1948534.326540901, 1948535.2070747048, 1948535.8326618627, 1948536.670737108, 1948537.479579046, 1948538.1932589116, 1948538.814682621, 1948539.5491855815, 1948540.19070655, 1948540.7448442536, 1948541.396574966, 1948541.9683006, 1948542.4652083819, 1948543.1140614438, 1948543.5868314877, 1948544.046195385, 1948544.5891163442, 1948545.0632551708, 1948545.5656016567, 1948545.915071205, 1948546.3774785185, 1948546.812987828, 1948547.1154396008, 1948547.5113618488, 1948547.879964965, 1948548.132915209, 1948548.4548306502, 1948548.745708013, 1948548.9813534447, 1948549.188363343, 1948549.3483804807, 1948549.5109545467, 1948549.6055484624, 1948549.7006854212, 1948549.7610082915, 1948549.7781149019, 1948549.7696849979, 1948549.725724591, 1948549.6464895864, 1948549.5440109414, 1948549.424268417, 1948549.2455143258, 1948549.0727575247, 1948548.8552955631, 1948548.5815729478, 1948548.360349162, 1948548.0254916481, 1948547.6552299045, 1948547.3622260615, 1948546.9287565046, 1948546.4600666398, 1948546.0493220729, 1948545.5663377745, 1948545.0042151213, 1948544.5738148035, 1948543.9527418811, 1948543.2977672566, 1948542.6730107134, 1948541.9524604054, 1948541.4083692695, 1948540.6370889605, 1948539.8401046298, 1948539.239541788, 1948538.3860315867, 1948537.5046511681, 1948536.85017003, 1948535.8440295116, 1948535.068366762, 1948534.0945944632, 1948533.2796045702, 1948532.359394934, 1948531.4242263492, 1948530.3816794048, 1948529.424486945, 1948528.5573603276, 1948527.4927375477, 1948526.6204869791, 1948525.6486721637, 1948524.5758477214, 1948523.5990876164, 1948522.7188552686, 1948521.5421940219, 1948520.6560220867, 1948519.5674908157, 1948518.7743067257, 1948517.6816605385, 1948516.5861065185, 1948515.7848315723, 1948514.6769890317, 1948513.5650797163, 1948512.7551248332, 1948511.6387593083, 1948510.5191231077, 1948509.5017759772, 1948508.4813268087, 1948507.5586915438, 1948506.4260591338, 1948505.4945761913, 1948504.4514408617, 1948503.298932881, 1948502.1383785522, 1948501.2899319855, 1948500.0128387958, 1948499.0513369206, 1948498.0859020944, 1948496.9006476167, 1948495.817086649, 1948494.6192099287, 1948493.7438234377, 1948492.535023236, 1948491.3179948598, 1948490.427600586, 1948489.199914447, 1948487.9714801093, 1948487.0819499823, 1948485.8746065933, 1948484.7966286154, 1948483.6380631207, 1948482.7144726666, 1948481.7171023635, 1948480.659503327, 1948479.8286236404, 1948478.9454959764, 1948478.0231354942, 1948477.2322444322, 1948476.5563085398, 1948475.774538129, 1948475.103320459, 1948474.4033679669, 1948473.918305262, 1948473.2845880105, 1948472.797539055, 1948472.292014369, 1948471.7715466851, 1948471.3216174685, 1948470.8463583516, 1948470.4727917204, 1948470.0744980038, 1948469.6665307132, 1948469.3875726757, 1948469.0251286675, 1948468.6983011232, 1948468.4796479144, 1948468.2023898482, 1948467.9489729297, 1948467.7443047394, 1948467.5750654205, 1948467.3749014179, 1948467.205952328, 1948467.0274481378, 1948466.8978774573, 1948466.726100755, 1948466.5665358263, 1948466.4599984838, 1948466.313799604, 1948466.2202380328, 1948466.123946265, 1948466.0577980352, 1948465.9982054327, 1948465.947881726, 1948465.9176276436, 1948465.881470933, 1948465.8489781304, 1948465.821799453, 1948465.790435079, 1948465.7614978834, 1948465.7289445212, 1948465.7043837062, 1948465.6703109122, 1948465.6344626064, 1948465.609895166, 1948465.579244393, 1948465.55784049, 1948465.532095324, 1948465.5136470622, 1948465.4960346678, 1948465.4815063542, 1948465.4735664611, 1948465.4700626782]
    ######################################




    


    # ax=[]
    # ay = []


    # for i in wp:
    #     ax.append(i[0])
    #     ay.append(i[1])

    # # print("x coord=",type(ax))
    # # print("y coord =",ay)


    ######################################
    cx, cy, cyaw, ck, s = cubic_spline_planner.calc_spline_course(
        ax, ay, ds=dl)

    return cx, cy, cyaw, ck


def get_switch_back_course(dl):
    ax = [0.0, 30.0, 6.0, 20.0, 35.0]
    ay = [0.0, 0.0, 20.0, 35.0, 20.0]
    cx, cy, cyaw, ck, s = cubic_spline_planner.calc_spline_course(
        ax, ay, ds=dl)
    ax = [35.0, 10.0, 0.0, 0.0]
    ay = [20.0, 30.0, 5.0, 0.0]
    cx2, cy2, cyaw2, ck2, s2 = cubic_spline_planner.calc_spline_course(
        ax, ay, ds=dl)
    cyaw2 = [i - math.pi for i in cyaw2]
    cx.extend(cx2)
    cy.extend(cy2)
    cyaw.extend(cyaw2)
    ck.extend(ck2)

    return cx, cy, cyaw, ck


# def main():
#     print(__file__ + " start!!")

#     dl = 1.0  # course tick
#     # cx, cy, cyaw, ck = get_straight_course(dl)
#     # cx, cy, cyaw, ck = get_straight_course2(dl)
#     cx, cy, cyaw, ck = get_straight_course3(dl)
#     # cx, cy, cyaw, ck = get_forward_course(dl)
#     # CX, cy, cyaw, ck = get_switch_back_course(dl)

#     sp = calc_speed_profile(cx, cy, cyaw, TARGET_SPEED)

#     initial_state = State(x=cx[0], y=cy[0], yaw=cyaw[0], v=0.0)

#     t, x, y, yaw, v, d, a = do_simulation(
#         cx, cy, cyaw, ck, sp, dl, initial_state)

#     # ax = [195034.85339845126, 195035.84322116408, 195037.1031070336, 195038.12222980024, 195039.44748034253, 195040.82633652442, 195042.00105036935, 195043.52156521718, 195044.75312869612, 195046.33548241763, 195047.61177394568, 195049.22853139866, 195050.5345883037, 195052.17084471424, 195053.47997428192, 195054.78929613755, 195056.37678301983, 195057.85299879083, 195058.95833736108, 195060.30888701667, 195061.43963377536, 195062.91956663196, 195064.14175796718, 195065.70169889796, 195066.9296992412, 195068.36805175638, 195069.42887500065, 195070.7304330902, 195072.08362612143, 195073.218788667, 195074.63572887913, 195075.68862341376, 195076.6351124799, 195077.7347042235, 195078.60069103178, 195079.650880908, 195080.6287427129, 195081.32271444102, 195082.08605880284, 195082.63336623312, 195083.20922211773, 195083.61741180674, 195083.97953359244, 195084.18050764024, 195084.33675151487, 195084.39227170288, 195084.3898971154]
#     # ay = [1948528.0334873192, 1948527.978629866, 1948527.91688776, 1948527.8551691181, 1948527.8009324542, 1948527.7194117014, 1948527.6490860586, 1948527.5691741165, 1948527.4916342006, 1948527.4236027373, 1948527.3655778691, 1948527.2905512985, 1948527.2266253547, 1948527.147092278, 1948527.0914075966, 1948527.0208727613, 1948526.9811103598, 1948526.9193865506, 1948526.8893870984, 1948526.8584497347, 1948526.8255042639, 1948526.792370577, 1948526.7662160413, 1948526.745463809, 1948526.7769838683, 1948526.847937819, 1948526.9764621446, 1948527.1884803234, 1948527.4989548654, 1948527.8253387562, 1948528.3344628117, 1948528.7669260192, 1948529.257930578, 1948529.899100821, 1948530.465803498, 1948531.2848220025, 1948532.1645444955, 1948532.8788661724, 1948533.8044480465, 1948534.5952411094, 1948535.6704397055, 1948536.5603102657, 1948537.656874974, 1948538.4760583157, 1948539.4506888643, 1948540.2169261756, 1948540.6011516098]
#     ax =  [195035.01564388964, 195035.00679082592, 195034.9936108887, 195034.98011441834, 195034.9654643212, 195034.94940859164, 195034.9349560018, 195034.91456574108, 195034.89572758143, 195034.8738637947, 195034.8562683566, 195034.83166330607, 195034.80626529056, 195034.7875723583, 195034.76831182337, 195034.7486332703, 195034.73361898478, 195034.7192354125, 195034.70736153112, 195034.69722293824, 195034.68968415333, 195034.6828284861, 195034.6774374092, 195034.6732401281, 195034.6698572588, 195034.66653711168, 195034.66353066007, 195034.66332326047, 195034.66579409837, 195034.6689763078, 195034.67394859166, 195034.67921436354, 195034.68235747935, 195034.68453294094, 195034.68779055562, 195034.69023382966, 195034.69213884868, 195034.6952681908, 195034.69602101532, 195034.69640940512, 195034.6977127925, 195034.69809805622, 195034.69968302792, 195034.70107520858, 195034.70110240247, 195034.69932186234, 195034.6986627423, 195034.696465182, 195034.69677004858, 195034.69602271463, 195034.6983281464, 195034.70000905736, 195034.70191149, 195034.7040841457, 195034.70304908507, 195034.700150772, 195034.7009689791, 195034.70242482048, 195034.7037826161, 195034.70040720285, 195034.69902683859, 195034.69890064135, 195034.69765159627, 195034.69742816733, 195034.7014150095, 195034.70623183527, 195034.7129349051, 195034.719238495, 195034.7250103911, 195034.72792718516, 195034.73031946796, 195034.7339184442, 195034.7371984694, 195034.73955317534, 195034.74159657056, 195034.74429056316, 195034.7470667227, 195034.7499285604, 195034.7542011797, 195034.76329808898, 195034.7757598747, 195034.782435825, 195034.79429500073, 195034.80231105385, 195034.80891656972, 195034.81369728217, 195034.8188895589, 195034.82449420023, 195034.82594753808, 195034.82520674675, 195034.82378931352, 195034.82218880206, 195034.82037636286, 195034.81910405296, 195034.8178927635, 195034.81858386652, 195034.8188284955, 195034.81783023616, 195034.81691997117, 195034.81065115926, 195034.80133570152, 195034.7936096971, 195034.78232972434, 195034.7742318963, 195034.76375203786, 195034.75676322557, 195034.7471574447, 195034.73861274484, 195034.73088937884, 195034.72528226284, 195034.72021825958, 195034.71371760246, 195034.71058261138, 195034.709222238, 195034.71206668075, 195034.72059404213, 195034.7326701871, 195034.75632809487, 195034.78579610938, 195034.831159493, 195034.9038048816, 195034.99331500664, 195035.09476675538, 195035.23622446417, 195035.42788619426, 195035.63326609068, 195035.89384396985, 195036.13426753122, 195036.43231645218, 195036.7943819962, 195037.0818450105, 195037.51419646866, 195037.98715491404, 195038.3603707729, 195038.90661293553, 195039.49551406395, 195040.06152899994, 195040.60018341863, 195041.29552039903, 195041.95953390404, 195042.5827267875, 195043.36996616912, 195044.10719225946, 195044.78686385808, 195045.71338436846, 195046.42292564065, 195047.14440841807, 195048.04214365338, 195048.87180083472, 195049.8013801048, 195050.4878600191, 195051.44241937326, 195052.41138089285, 195053.12178032874, 195054.10582817515, 195055.09839214775, 195055.82475799887, 195056.83017796642, 195057.8418555005, 195058.76627521135, 195059.6952304908, 195060.53488996762, 195061.56481812065, 195062.31594803635, 195063.3480989634, 195064.47515723036, 195065.41586799215, 195066.1687667167, 195067.20282615448, 195068.2335200854, 195069.1695739597, 195070.00785532186, 195071.0282082099, 195071.85819255988, 195072.77591783885, 195073.77582068933, 195074.49749138975, 195075.48114335493, 195076.4520635102, 195077.14964429324, 195078.0968668081, 195079.03209904628, 195079.78960278936, 195080.6200444467, 195081.5196282756, 195082.1624728788, 195083.03014879854, 195083.876748217, 195084.62915633907, 195085.43705463377, 195086.00902661684, 195086.77443435957, 195087.50767514756, 195088.01907892205, 195088.6952809101, 195089.33107410895, 195089.76626299878, 195090.37551000077, 195090.79321290305, 195091.252916189, 195091.58857428312, 195091.91981576462, 195092.20509433432, 195092.4661992804, 195092.65081266375, 195092.77848941024, 195092.88258416986, 195092.9290675209, 195092.9405877809, 195092.91649399968, 195092.86780299214, 195092.8089270887, 195092.71788929493, 195092.6456962597, 195092.55675080078, 195092.49107658054, 195092.40043014512, 195092.3045944532, 195092.23088009853, 195092.12332287373, 195092.01135172482, 195091.92919682842, 195091.81296879952, 195091.6965143742, 195091.58786496468, 195091.4808197793, 195091.38401759096, 195091.26925799815, 195091.17312914616, 195091.06772754618, 195090.9533332107, 195090.8400057936, 195090.75799679858, 195090.63618434244, 195090.5480458351, 195090.45959599546, 195090.35290563348, 195090.25586987703, 195090.14908941468, 195090.0730417943, 195089.96672105085, 195089.85951079216, 195089.7803771094, 195089.66531120086, 195089.54679609864, 195089.45799875882, 195089.33804091337, 195089.229791801, 195089.11362108146, 195089.0206140953, 195088.9213464876, 195088.81332868952, 195088.72793024188, 195088.63401600078, 195088.5305809025, 195088.43095255716, 195088.3386622715, 195088.2121772462, 195088.07644522964, 195087.90622410004, 195087.75951982517, 195087.5402546288, 195087.34079810482, 195087.09792971806, 195086.80586929782, 195086.50912620136, 195086.14538460178, 195085.8205999418, 195085.4287319146, 195084.9634273453, 195084.60317679372, 195084.0824559178, 195083.53093749352, 195083.11677315205, 195082.5264640307, 195081.91519507454, 195081.3439639897, 195080.8174331957, 195080.1586360029, 195079.54517944573, 195078.85899341406, 195078.35300699424, 195077.64586663054, 195076.91886897158, 195076.37939635816, 195075.5590197736, 195074.93149595533, 195074.15538206205, 195073.51411108222, 195072.79608898988, 195072.00410144348, 195071.42926508127, 195070.65263596002, 195069.89502594247, 195069.22446380596, 195068.57471504758, 195068.0089326343, 195067.34192982578, 195066.87308584564, 195066.2514221017, 195065.61004285805, 195065.15351874684, 195064.6251665201, 195064.26524504754, 195063.81270972406, 195063.48862575812, 195063.18502820263, 195062.9233667608, 195062.74243414073, 195062.66349119085]
#     ay =  [1948392.360874124, 1948392.6809574235, 1948393.1645646323, 1948393.7005877814, 1948394.2330837764, 1948394.8093175283, 1948395.3659077387, 1948396.0940011062, 1948396.8022700367, 1948397.63090961, 1948398.2652426867, 1948399.1816635379, 1948400.1469317852, 1948400.9717105723, 1948401.922887735, 1948403.0092317807, 1948404.0334963226, 1948404.9831489022, 1948406.0721953758, 1948407.3044088199, 1948408.2142206365, 1948409.479757933, 1948410.64275134, 1948411.9286749694, 1948412.9816180533, 1948414.151951868, 1948415.4367628216, 1948416.7168819457, 1948417.6439161, 1948418.797394651, 1948420.0605990828, 1948421.3177413528, 1948422.228656699, 1948423.4779424388, 1948424.719872987, 1948425.6195602077, 1948426.8557623469, 1948428.0910869876, 1948429.212847185, 1948430.111945304, 1948431.3501082882, 1948432.5897393809, 1948433.4917971103, 1948434.7316391405, 1948435.971377978, 1948437.0994017066, 1948438.1159837688, 1948439.3593449427, 1948440.2645279274, 1948441.5094175055, 1948442.75633115, 1948443.7782220934, 1948445.0283038751, 1948446.1673257127, 1948447.1931936746, 1948448.3357433467, 1948449.5983115435, 1948450.8635813135, 1948451.787410464, 1948453.063102208, 1948454.2248547145, 1948455.5097635416, 1948456.4474671546, 1948457.740219313, 1948459.0400235036, 1948459.989290092, 1948461.2976449335, 1948462.4898587125, 1948463.8050410568, 1948464.8825897623, 1948466.0809376403, 1948467.4025806612, 1948468.6088445152, 1948469.6988103215, 1948470.9133375515, 1948472.2525505123, 1948473.595431753, 1948474.6975523017, 1948475.9264459964, 1948477.1580439033, 1948478.5145430865, 1948479.5050003703, 1948480.995756896, 1948482.1146876037, 1948483.487892778, 1948484.6148181641, 1948485.8691229548, 1948487.2521319757, 1948488.38629157, 1948489.6447881223, 1948491.0278841988, 1948492.0321570209, 1948493.4106896562, 1948494.7866052368, 1948495.7843505298, 1948497.1497809975, 1948498.5085088608, 1948499.8623689995, 1948500.8431316374, 1948502.1846100804, 1948503.5182354606, 1948504.4843682607, 1948505.92543568, 1948506.9928723178, 1948508.2757697494, 1948509.189727439, 1948510.4169514647, 1948511.6097658707, 1948512.6639397293, 1948513.5943910496, 1948514.6149987075, 1948515.7280926306, 1948516.731521801, 1948517.629698746, 1948518.7178366412, 1948519.701958078, 1948520.5831165626, 1948521.6552856162, 1948522.5277072478, 1948523.4926014952, 1948524.5461857342, 1948525.49629722, 1948526.3437573041, 1948527.2759265928, 1948528.2816059478, 1948529.1833817349, 1948530.162083081, 1948530.953685912, 1948531.8192776812, 1948532.755087252, 1948533.4241099039, 1948534.326540901, 1948535.2070747048, 1948535.8326618627, 1948536.670737108, 1948537.479579046, 1948538.1932589116, 1948538.814682621, 1948539.5491855815, 1948540.19070655, 1948540.7448442536, 1948541.396574966, 1948541.9683006, 1948542.4652083819, 1948543.1140614438, 1948543.5868314877, 1948544.046195385, 1948544.5891163442, 1948545.0632551708, 1948545.5656016567, 1948545.915071205, 1948546.3774785185, 1948546.812987828, 1948547.1154396008, 1948547.5113618488, 1948547.879964965, 1948548.132915209, 1948548.4548306502, 1948548.745708013, 1948548.9813534447, 1948549.188363343, 1948549.3483804807, 1948549.5109545467, 1948549.6055484624, 1948549.7006854212, 1948549.7610082915, 1948549.7781149019, 1948549.7696849979, 1948549.725724591, 1948549.6464895864, 1948549.5440109414, 1948549.424268417, 1948549.2455143258, 1948549.0727575247, 1948548.8552955631, 1948548.5815729478, 1948548.360349162, 1948548.0254916481, 1948547.6552299045, 1948547.3622260615, 1948546.9287565046, 1948546.4600666398, 1948546.0493220729, 1948545.5663377745, 1948545.0042151213, 1948544.5738148035, 1948543.9527418811, 1948543.2977672566, 1948542.6730107134, 1948541.9524604054, 1948541.4083692695, 1948540.6370889605, 1948539.8401046298, 1948539.239541788, 1948538.3860315867, 1948537.5046511681, 1948536.85017003, 1948535.8440295116, 1948535.068366762, 1948534.0945944632, 1948533.2796045702, 1948532.359394934, 1948531.4242263492, 1948530.3816794048, 1948529.424486945, 1948528.5573603276, 1948527.4927375477, 1948526.6204869791, 1948525.6486721637, 1948524.5758477214, 1948523.5990876164, 1948522.7188552686, 1948521.5421940219, 1948520.6560220867, 1948519.5674908157, 1948518.7743067257, 1948517.6816605385, 1948516.5861065185, 1948515.7848315723, 1948514.6769890317, 1948513.5650797163, 1948512.7551248332, 1948511.6387593083, 1948510.5191231077, 1948509.5017759772, 1948508.4813268087, 1948507.5586915438, 1948506.4260591338, 1948505.4945761913, 1948504.4514408617, 1948503.298932881, 1948502.1383785522, 1948501.2899319855, 1948500.0128387958, 1948499.0513369206, 1948498.0859020944, 1948496.9006476167, 1948495.817086649, 1948494.6192099287, 1948493.7438234377, 1948492.535023236, 1948491.3179948598, 1948490.427600586, 1948489.199914447, 1948487.9714801093, 1948487.0819499823, 1948485.8746065933, 1948484.7966286154, 1948483.6380631207, 1948482.7144726666, 1948481.7171023635, 1948480.659503327, 1948479.8286236404, 1948478.9454959764, 1948478.0231354942, 1948477.2322444322, 1948476.5563085398, 1948475.774538129, 1948475.103320459, 1948474.4033679669, 1948473.918305262, 1948473.2845880105, 1948472.797539055, 1948472.292014369, 1948471.7715466851, 1948471.3216174685, 1948470.8463583516, 1948470.4727917204, 1948470.0744980038, 1948469.6665307132, 1948469.3875726757, 1948469.0251286675, 1948468.6983011232, 1948468.4796479144, 1948468.2023898482, 1948467.9489729297, 1948467.7443047394, 1948467.5750654205, 1948467.3749014179, 1948467.205952328, 1948467.0274481378, 1948466.8978774573, 1948466.726100755, 1948466.5665358263, 1948466.4599984838, 1948466.313799604, 1948466.2202380328, 1948466.123946265, 1948466.0577980352, 1948465.9982054327, 1948465.947881726, 1948465.9176276436, 1948465.881470933, 1948465.8489781304, 1948465.821799453, 1948465.790435079, 1948465.7614978834, 1948465.7289445212, 1948465.7043837062, 1948465.6703109122, 1948465.6344626064, 1948465.609895166, 1948465.579244393, 1948465.55784049, 1948465.532095324, 1948465.5136470622, 1948465.4960346678, 1948465.4815063542, 1948465.4735664611, 1948465.4700626782]

#     if show_animation:
#         plt.close("all")
#         plt.subplots()
#         plt.plot(cx, cy, "-r", label="spline")
#         plt.plot(x, y, "-g", label="tracking")
#         plt.plot(ax, ay, "-b", label="path")
#         plt.grid(True)
#         plt.axis("equal")
#         plt.xlabel("x[m]")
#         plt.ylabel("y[m]")
#         plt.legend()

#         plt.subplots()
#         plt.plot(t, v, "-r", label="speed")
#         plt.grid(True)
#         plt.xlabel("Time [s]")
#         plt.ylabel("Speed [kmh]")

#         plt.show()


def main2():
    print(__file__ + " start!!")

    dl = 1.0  # course tick
    # cx, cy, cyaw, ck = get_straight_course3(dl)
    cx, cy, cyaw, ck = get_forward_course(dl)
    sp = calc_speed_profile(cx, cy, cyaw, TARGET_SPEED)

    initial_state = State(x=cx[0], y=cy[0], yaw=0.0, v=0.0)

    t, x, y, yaw, v, d, a = do_simulation(
        cx, cy, cyaw, ck, sp, dl, initial_state)
    # print("velocit: ",np.rad2deg(d))
    print("yaw ",np.rad2deg(yaw))
    # ax = [195034.85339845126, 195035.84322116408, 195037.1031070336, 195038.12222980024, 195039.44748034253, 195040.82633652442, 195042.00105036935, 195043.52156521718, 195044.75312869612, 195046.33548241763, 195047.61177394568, 195049.22853139866, 195050.5345883037, 195052.17084471424, 195053.47997428192, 195054.78929613755, 195056.37678301983, 195057.85299879083, 195058.95833736108, 195060.30888701667, 195061.43963377536, 195062.91956663196, 195064.14175796718, 195065.70169889796, 195066.9296992412, 195068.36805175638, 195069.42887500065, 195070.7304330902, 195072.08362612143, 195073.218788667, 195074.63572887913, 195075.68862341376, 195076.6351124799, 195077.7347042235, 195078.60069103178, 195079.650880908, 195080.6287427129, 195081.32271444102, 195082.08605880284, 195082.63336623312, 195083.20922211773, 195083.61741180674, 195083.97953359244, 195084.18050764024, 195084.33675151487, 195084.39227170288, 195084.3898971154]
    # ay = [1948528.0334873192, 1948527.978629866, 1948527.91688776, 1948527.8551691181, 1948527.8009324542, 1948527.7194117014, 1948527.6490860586, 1948527.5691741165, 1948527.4916342006, 1948527.4236027373, 1948527.3655778691, 1948527.2905512985, 1948527.2266253547, 1948527.147092278, 1948527.0914075966, 1948527.0208727613, 1948526.9811103598, 1948526.9193865506, 1948526.8893870984, 1948526.8584497347, 1948526.8255042639, 1948526.792370577, 1948526.7662160413, 1948526.745463809, 1948526.7769838683, 1948526.847937819, 1948526.9764621446, 1948527.1884803234, 1948527.4989548654, 1948527.8253387562, 1948528.3344628117, 1948528.7669260192, 1948529.257930578, 1948529.899100821, 1948530.465803498, 1948531.2848220025, 1948532.1645444955, 1948532.8788661724, 1948533.8044480465, 1948534.5952411094, 1948535.6704397055, 1948536.5603102657, 1948537.656874974, 1948538.4760583157, 1948539.4506888643, 1948540.2169261756, 1948540.6011516098]
    ay =  [195035.01564388964, 195035.00679082592, 195034.9936108887, 195034.98011441834, 195034.9654643212, 195034.94940859164, 195034.9349560018, 195034.91456574108, 195034.89572758143, 195034.8738637947, 195034.8562683566, 195034.83166330607, 195034.80626529056, 195034.7875723583, 195034.76831182337, 195034.7486332703, 195034.73361898478, 195034.7192354125, 195034.70736153112, 195034.69722293824, 195034.68968415333, 195034.6828284861, 195034.6774374092, 195034.6732401281, 195034.6698572588, 195034.66653711168, 195034.66353066007, 195034.66332326047, 195034.66579409837, 195034.6689763078, 195034.67394859166, 195034.67921436354, 195034.68235747935, 195034.68453294094, 195034.68779055562, 195034.69023382966, 195034.69213884868, 195034.6952681908, 195034.69602101532, 195034.69640940512, 195034.6977127925, 195034.69809805622, 195034.69968302792, 195034.70107520858, 195034.70110240247, 195034.69932186234, 195034.6986627423, 195034.696465182, 195034.69677004858, 195034.69602271463, 195034.6983281464, 195034.70000905736, 195034.70191149, 195034.7040841457, 195034.70304908507, 195034.700150772, 195034.7009689791, 195034.70242482048, 195034.7037826161, 195034.70040720285, 195034.69902683859, 195034.69890064135, 195034.69765159627, 195034.69742816733, 195034.7014150095, 195034.70623183527, 195034.7129349051, 195034.719238495, 195034.7250103911, 195034.72792718516, 195034.73031946796, 195034.7339184442, 195034.7371984694, 195034.73955317534, 195034.74159657056, 195034.74429056316, 195034.7470667227, 195034.7499285604, 195034.7542011797, 195034.76329808898, 195034.7757598747, 195034.782435825, 195034.79429500073, 195034.80231105385, 195034.80891656972, 195034.81369728217, 195034.8188895589, 195034.82449420023, 195034.82594753808, 195034.82520674675, 195034.82378931352, 195034.82218880206, 195034.82037636286, 195034.81910405296, 195034.8178927635, 195034.81858386652, 195034.8188284955, 195034.81783023616, 195034.81691997117, 195034.81065115926, 195034.80133570152, 195034.7936096971, 195034.78232972434, 195034.7742318963, 195034.76375203786, 195034.75676322557, 195034.7471574447, 195034.73861274484, 195034.73088937884, 195034.72528226284, 195034.72021825958, 195034.71371760246, 195034.71058261138, 195034.709222238, 195034.71206668075, 195034.72059404213, 195034.7326701871, 195034.75632809487, 195034.78579610938, 195034.831159493, 195034.9038048816, 195034.99331500664, 195035.09476675538, 195035.23622446417, 195035.42788619426, 195035.63326609068, 195035.89384396985, 195036.13426753122, 195036.43231645218, 195036.7943819962, 195037.0818450105, 195037.51419646866, 195037.98715491404, 195038.3603707729, 195038.90661293553, 195039.49551406395, 195040.06152899994, 195040.60018341863, 195041.29552039903, 195041.95953390404, 195042.5827267875, 195043.36996616912, 195044.10719225946, 195044.78686385808, 195045.71338436846, 195046.42292564065, 195047.14440841807, 195048.04214365338, 195048.87180083472, 195049.8013801048, 195050.4878600191, 195051.44241937326, 195052.41138089285, 195053.12178032874, 195054.10582817515, 195055.09839214775, 195055.82475799887, 195056.83017796642, 195057.8418555005, 195058.76627521135, 195059.6952304908, 195060.53488996762, 195061.56481812065, 195062.31594803635, 195063.3480989634, 195064.47515723036, 195065.41586799215, 195066.1687667167, 195067.20282615448, 195068.2335200854, 195069.1695739597, 195070.00785532186, 195071.0282082099, 195071.85819255988, 195072.77591783885, 195073.77582068933, 195074.49749138975, 195075.48114335493, 195076.4520635102, 195077.14964429324, 195078.0968668081, 195079.03209904628, 195079.78960278936, 195080.6200444467, 195081.5196282756, 195082.1624728788, 195083.03014879854, 195083.876748217, 195084.62915633907, 195085.43705463377, 195086.00902661684, 195086.77443435957, 195087.50767514756, 195088.01907892205, 195088.6952809101, 195089.33107410895, 195089.76626299878, 195090.37551000077, 195090.79321290305, 195091.252916189, 195091.58857428312, 195091.91981576462, 195092.20509433432, 195092.4661992804, 195092.65081266375, 195092.77848941024, 195092.88258416986, 195092.9290675209, 195092.9405877809, 195092.91649399968, 195092.86780299214, 195092.8089270887, 195092.71788929493, 195092.6456962597, 195092.55675080078, 195092.49107658054, 195092.40043014512, 195092.3045944532, 195092.23088009853, 195092.12332287373, 195092.01135172482, 195091.92919682842, 195091.81296879952, 195091.6965143742, 195091.58786496468, 195091.4808197793, 195091.38401759096, 195091.26925799815, 195091.17312914616, 195091.06772754618, 195090.9533332107, 195090.8400057936, 195090.75799679858, 195090.63618434244, 195090.5480458351, 195090.45959599546, 195090.35290563348, 195090.25586987703, 195090.14908941468, 195090.0730417943, 195089.96672105085, 195089.85951079216, 195089.7803771094, 195089.66531120086, 195089.54679609864, 195089.45799875882, 195089.33804091337, 195089.229791801, 195089.11362108146, 195089.0206140953, 195088.9213464876, 195088.81332868952, 195088.72793024188, 195088.63401600078, 195088.5305809025, 195088.43095255716, 195088.3386622715, 195088.2121772462, 195088.07644522964, 195087.90622410004, 195087.75951982517, 195087.5402546288, 195087.34079810482, 195087.09792971806, 195086.80586929782, 195086.50912620136, 195086.14538460178, 195085.8205999418, 195085.4287319146, 195084.9634273453, 195084.60317679372, 195084.0824559178, 195083.53093749352, 195083.11677315205, 195082.5264640307, 195081.91519507454, 195081.3439639897, 195080.8174331957, 195080.1586360029, 195079.54517944573, 195078.85899341406, 195078.35300699424, 195077.64586663054, 195076.91886897158, 195076.37939635816, 195075.5590197736, 195074.93149595533, 195074.15538206205, 195073.51411108222, 195072.79608898988, 195072.00410144348, 195071.42926508127, 195070.65263596002, 195069.89502594247, 195069.22446380596, 195068.57471504758, 195068.0089326343, 195067.34192982578, 195066.87308584564, 195066.2514221017, 195065.61004285805, 195065.15351874684, 195064.6251665201, 195064.26524504754, 195063.81270972406, 195063.48862575812, 195063.18502820263, 195062.9233667608, 195062.74243414073, 195062.66349119085]
    ax =  [1948392.360874124, 1948392.6809574235, 1948393.1645646323, 1948393.7005877814, 1948394.2330837764, 1948394.8093175283, 1948395.3659077387, 1948396.0940011062, 1948396.8022700367, 1948397.63090961, 1948398.2652426867, 1948399.1816635379, 1948400.1469317852, 1948400.9717105723, 1948401.922887735, 1948403.0092317807, 1948404.0334963226, 1948404.9831489022, 1948406.0721953758, 1948407.3044088199, 1948408.2142206365, 1948409.479757933, 1948410.64275134, 1948411.9286749694, 1948412.9816180533, 1948414.151951868, 1948415.4367628216, 1948416.7168819457, 1948417.6439161, 1948418.797394651, 1948420.0605990828, 1948421.3177413528, 1948422.228656699, 1948423.4779424388, 1948424.719872987, 1948425.6195602077, 1948426.8557623469, 1948428.0910869876, 1948429.212847185, 1948430.111945304, 1948431.3501082882, 1948432.5897393809, 1948433.4917971103, 1948434.7316391405, 1948435.971377978, 1948437.0994017066, 1948438.1159837688, 1948439.3593449427, 1948440.2645279274, 1948441.5094175055, 1948442.75633115, 1948443.7782220934, 1948445.0283038751, 1948446.1673257127, 1948447.1931936746, 1948448.3357433467, 1948449.5983115435, 1948450.8635813135, 1948451.787410464, 1948453.063102208, 1948454.2248547145, 1948455.5097635416, 1948456.4474671546, 1948457.740219313, 1948459.0400235036, 1948459.989290092, 1948461.2976449335, 1948462.4898587125, 1948463.8050410568, 1948464.8825897623, 1948466.0809376403, 1948467.4025806612, 1948468.6088445152, 1948469.6988103215, 1948470.9133375515, 1948472.2525505123, 1948473.595431753, 1948474.6975523017, 1948475.9264459964, 1948477.1580439033, 1948478.5145430865, 1948479.5050003703, 1948480.995756896, 1948482.1146876037, 1948483.487892778, 1948484.6148181641, 1948485.8691229548, 1948487.2521319757, 1948488.38629157, 1948489.6447881223, 1948491.0278841988, 1948492.0321570209, 1948493.4106896562, 1948494.7866052368, 1948495.7843505298, 1948497.1497809975, 1948498.5085088608, 1948499.8623689995, 1948500.8431316374, 1948502.1846100804, 1948503.5182354606, 1948504.4843682607, 1948505.92543568, 1948506.9928723178, 1948508.2757697494, 1948509.189727439, 1948510.4169514647, 1948511.6097658707, 1948512.6639397293, 1948513.5943910496, 1948514.6149987075, 1948515.7280926306, 1948516.731521801, 1948517.629698746, 1948518.7178366412, 1948519.701958078, 1948520.5831165626, 1948521.6552856162, 1948522.5277072478, 1948523.4926014952, 1948524.5461857342, 1948525.49629722, 1948526.3437573041, 1948527.2759265928, 1948528.2816059478, 1948529.1833817349, 1948530.162083081, 1948530.953685912, 1948531.8192776812, 1948532.755087252, 1948533.4241099039, 1948534.326540901, 1948535.2070747048, 1948535.8326618627, 1948536.670737108, 1948537.479579046, 1948538.1932589116, 1948538.814682621, 1948539.5491855815, 1948540.19070655, 1948540.7448442536, 1948541.396574966, 1948541.9683006, 1948542.4652083819, 1948543.1140614438, 1948543.5868314877, 1948544.046195385, 1948544.5891163442, 1948545.0632551708, 1948545.5656016567, 1948545.915071205, 1948546.3774785185, 1948546.812987828, 1948547.1154396008, 1948547.5113618488, 1948547.879964965, 1948548.132915209, 1948548.4548306502, 1948548.745708013, 1948548.9813534447, 1948549.188363343, 1948549.3483804807, 1948549.5109545467, 1948549.6055484624, 1948549.7006854212, 1948549.7610082915, 1948549.7781149019, 1948549.7696849979, 1948549.725724591, 1948549.6464895864, 1948549.5440109414, 1948549.424268417, 1948549.2455143258, 1948549.0727575247, 1948548.8552955631, 1948548.5815729478, 1948548.360349162, 1948548.0254916481, 1948547.6552299045, 1948547.3622260615, 1948546.9287565046, 1948546.4600666398, 1948546.0493220729, 1948545.5663377745, 1948545.0042151213, 1948544.5738148035, 1948543.9527418811, 1948543.2977672566, 1948542.6730107134, 1948541.9524604054, 1948541.4083692695, 1948540.6370889605, 1948539.8401046298, 1948539.239541788, 1948538.3860315867, 1948537.5046511681, 1948536.85017003, 1948535.8440295116, 1948535.068366762, 1948534.0945944632, 1948533.2796045702, 1948532.359394934, 1948531.4242263492, 1948530.3816794048, 1948529.424486945, 1948528.5573603276, 1948527.4927375477, 1948526.6204869791, 1948525.6486721637, 1948524.5758477214, 1948523.5990876164, 1948522.7188552686, 1948521.5421940219, 1948520.6560220867, 1948519.5674908157, 1948518.7743067257, 1948517.6816605385, 1948516.5861065185, 1948515.7848315723, 1948514.6769890317, 1948513.5650797163, 1948512.7551248332, 1948511.6387593083, 1948510.5191231077, 1948509.5017759772, 1948508.4813268087, 1948507.5586915438, 1948506.4260591338, 1948505.4945761913, 1948504.4514408617, 1948503.298932881, 1948502.1383785522, 1948501.2899319855, 1948500.0128387958, 1948499.0513369206, 1948498.0859020944, 1948496.9006476167, 1948495.817086649, 1948494.6192099287, 1948493.7438234377, 1948492.535023236, 1948491.3179948598, 1948490.427600586, 1948489.199914447, 1948487.9714801093, 1948487.0819499823, 1948485.8746065933, 1948484.7966286154, 1948483.6380631207, 1948482.7144726666, 1948481.7171023635, 1948480.659503327, 1948479.8286236404, 1948478.9454959764, 1948478.0231354942, 1948477.2322444322, 1948476.5563085398, 1948475.774538129, 1948475.103320459, 1948474.4033679669, 1948473.918305262, 1948473.2845880105, 1948472.797539055, 1948472.292014369, 1948471.7715466851, 1948471.3216174685, 1948470.8463583516, 1948470.4727917204, 1948470.0744980038, 1948469.6665307132, 1948469.3875726757, 1948469.0251286675, 1948468.6983011232, 1948468.4796479144, 1948468.2023898482, 1948467.9489729297, 1948467.7443047394, 1948467.5750654205, 1948467.3749014179, 1948467.205952328, 1948467.0274481378, 1948466.8978774573, 1948466.726100755, 1948466.5665358263, 1948466.4599984838, 1948466.313799604, 1948466.2202380328, 1948466.123946265, 1948466.0577980352, 1948465.9982054327, 1948465.947881726, 1948465.9176276436, 1948465.881470933, 1948465.8489781304, 1948465.821799453, 1948465.790435079, 1948465.7614978834, 1948465.7289445212, 1948465.7043837062, 1948465.6703109122, 1948465.6344626064, 1948465.609895166, 1948465.579244393, 1948465.55784049, 1948465.532095324, 1948465.5136470622, 1948465.4960346678, 1948465.4815063542, 1948465.4735664611, 1948465.4700626782]

    if show_animation:
        plt.close("all")
        plt.subplots()
        plt.plot(cx, cy, "-r", label="spline")
        plt.plot(x, y, "-g", label="tracking")
        plt.plot(ax, ay, "b:", label="path")

        plt.grid(True)
        plt.axis("equal")
        plt.xlabel("x[m]")
        plt.ylabel("y[m]")
        plt.legend()

        plt.subplots()
        plt.plot(t, v, "-r", label="speed")
        plt.grid(True)
        plt.xlabel("Time [s]")
        plt.ylabel("Speed [kmh]")

        plt.show()


if __name__ == '__main__':
    # main()
    main2()
