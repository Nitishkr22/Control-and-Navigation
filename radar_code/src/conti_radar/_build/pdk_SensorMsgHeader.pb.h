// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pdk_SensorMsgHeader.proto

#ifndef PROTOBUF_INCLUDED_pdk_5fSensorMsgHeader_2eproto
#define PROTOBUF_INCLUDED_pdk_5fSensorMsgHeader_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "pdk_MsgHeader.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_pdk_5fSensorMsgHeader_2eproto 

namespace protobuf_pdk_5fSensorMsgHeader_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_pdk_5fSensorMsgHeader_2eproto
namespace pb {
namespace PDK {
class SensorMsgHeader;
class SensorMsgHeaderDefaultTypeInternal;
extern SensorMsgHeaderDefaultTypeInternal _SensorMsgHeader_default_instance_;
}  // namespace PDK
}  // namespace pb
namespace google {
namespace protobuf {
template<> ::pb::PDK::SensorMsgHeader* Arena::CreateMaybeMessage<::pb::PDK::SensorMsgHeader>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pb {
namespace PDK {

enum SensorMsgHeader_SignalStatus {
  SensorMsgHeader_SignalStatus_EM_SIGSTATE_INIT = 0,
  SensorMsgHeader_SignalStatus_EM_SIGSTATE_OK = 1,
  SensorMsgHeader_SignalStatus_EM_SIGSTATE_INVALID = 2
};
bool SensorMsgHeader_SignalStatus_IsValid(int value);
const SensorMsgHeader_SignalStatus SensorMsgHeader_SignalStatus_SignalStatus_MIN = SensorMsgHeader_SignalStatus_EM_SIGSTATE_INIT;
const SensorMsgHeader_SignalStatus SensorMsgHeader_SignalStatus_SignalStatus_MAX = SensorMsgHeader_SignalStatus_EM_SIGSTATE_INVALID;
const int SensorMsgHeader_SignalStatus_SignalStatus_ARRAYSIZE = SensorMsgHeader_SignalStatus_SignalStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SensorMsgHeader_SignalStatus_descriptor();
inline const ::std::string& SensorMsgHeader_SignalStatus_Name(SensorMsgHeader_SignalStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SensorMsgHeader_SignalStatus_descriptor(), value);
}
inline bool SensorMsgHeader_SignalStatus_Parse(
    const ::std::string& name, SensorMsgHeader_SignalStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SensorMsgHeader_SignalStatus>(
    SensorMsgHeader_SignalStatus_descriptor(), name, value);
}
enum SensorMsgHeader_SensorType {
  SensorMsgHeader_SensorType_ARS430EO = 0,
  SensorMsgHeader_SensorType_ARS430DI = 1,
  SensorMsgHeader_SensorType_SRR520CO = 3,
  SensorMsgHeader_SensorType_ARS540DEMO = 4,
  SensorMsgHeader_SensorType_SRR520DI = 5,
  SensorMsgHeader_SensorType_ARS548 = 6,
  SensorMsgHeader_SensorType_UNKNOWN = 99
};
bool SensorMsgHeader_SensorType_IsValid(int value);
const SensorMsgHeader_SensorType SensorMsgHeader_SensorType_SensorType_MIN = SensorMsgHeader_SensorType_ARS430EO;
const SensorMsgHeader_SensorType SensorMsgHeader_SensorType_SensorType_MAX = SensorMsgHeader_SensorType_UNKNOWN;
const int SensorMsgHeader_SensorType_SensorType_ARRAYSIZE = SensorMsgHeader_SensorType_SensorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SensorMsgHeader_SensorType_descriptor();
inline const ::std::string& SensorMsgHeader_SensorType_Name(SensorMsgHeader_SensorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SensorMsgHeader_SensorType_descriptor(), value);
}
inline bool SensorMsgHeader_SensorType_Parse(
    const ::std::string& name, SensorMsgHeader_SensorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SensorMsgHeader_SensorType>(
    SensorMsgHeader_SensorType_descriptor(), name, value);
}
// ===================================================================

class SensorMsgHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.PDK.SensorMsgHeader) */ {
 public:
  SensorMsgHeader();
  virtual ~SensorMsgHeader();

  SensorMsgHeader(const SensorMsgHeader& from);

  inline SensorMsgHeader& operator=(const SensorMsgHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SensorMsgHeader(SensorMsgHeader&& from) noexcept
    : SensorMsgHeader() {
    *this = ::std::move(from);
  }

  inline SensorMsgHeader& operator=(SensorMsgHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorMsgHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorMsgHeader* internal_default_instance() {
    return reinterpret_cast<const SensorMsgHeader*>(
               &_SensorMsgHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SensorMsgHeader* other);
  friend void swap(SensorMsgHeader& a, SensorMsgHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SensorMsgHeader* New() const final {
    return CreateMaybeMessage<SensorMsgHeader>(NULL);
  }

  SensorMsgHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SensorMsgHeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SensorMsgHeader& from);
  void MergeFrom(const SensorMsgHeader& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorMsgHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SensorMsgHeader_SignalStatus SignalStatus;
  static const SignalStatus EM_SIGSTATE_INIT =
    SensorMsgHeader_SignalStatus_EM_SIGSTATE_INIT;
  static const SignalStatus EM_SIGSTATE_OK =
    SensorMsgHeader_SignalStatus_EM_SIGSTATE_OK;
  static const SignalStatus EM_SIGSTATE_INVALID =
    SensorMsgHeader_SignalStatus_EM_SIGSTATE_INVALID;
  static inline bool SignalStatus_IsValid(int value) {
    return SensorMsgHeader_SignalStatus_IsValid(value);
  }
  static const SignalStatus SignalStatus_MIN =
    SensorMsgHeader_SignalStatus_SignalStatus_MIN;
  static const SignalStatus SignalStatus_MAX =
    SensorMsgHeader_SignalStatus_SignalStatus_MAX;
  static const int SignalStatus_ARRAYSIZE =
    SensorMsgHeader_SignalStatus_SignalStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SignalStatus_descriptor() {
    return SensorMsgHeader_SignalStatus_descriptor();
  }
  static inline const ::std::string& SignalStatus_Name(SignalStatus value) {
    return SensorMsgHeader_SignalStatus_Name(value);
  }
  static inline bool SignalStatus_Parse(const ::std::string& name,
      SignalStatus* value) {
    return SensorMsgHeader_SignalStatus_Parse(name, value);
  }

  typedef SensorMsgHeader_SensorType SensorType;
  static const SensorType ARS430EO =
    SensorMsgHeader_SensorType_ARS430EO;
  static const SensorType ARS430DI =
    SensorMsgHeader_SensorType_ARS430DI;
  static const SensorType SRR520CO =
    SensorMsgHeader_SensorType_SRR520CO;
  static const SensorType ARS540DEMO =
    SensorMsgHeader_SensorType_ARS540DEMO;
  static const SensorType SRR520DI =
    SensorMsgHeader_SensorType_SRR520DI;
  static const SensorType ARS548 =
    SensorMsgHeader_SensorType_ARS548;
  static const SensorType UNKNOWN =
    SensorMsgHeader_SensorType_UNKNOWN;
  static inline bool SensorType_IsValid(int value) {
    return SensorMsgHeader_SensorType_IsValid(value);
  }
  static const SensorType SensorType_MIN =
    SensorMsgHeader_SensorType_SensorType_MIN;
  static const SensorType SensorType_MAX =
    SensorMsgHeader_SensorType_SensorType_MAX;
  static const int SensorType_ARRAYSIZE =
    SensorMsgHeader_SensorType_SensorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SensorType_descriptor() {
    return SensorMsgHeader_SensorType_descriptor();
  }
  static inline const ::std::string& SensorType_Name(SensorType value) {
    return SensorMsgHeader_SensorType_Name(value);
  }
  static inline bool SensorType_Parse(const ::std::string& name,
      SensorType* value) {
    return SensorMsgHeader_SensorType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .pb.PDK.MsgHeader t_CommonHeader = 1;
  bool has_t_commonheader() const;
  void clear_t_commonheader();
  static const int kTCommonHeaderFieldNumber = 1;
  private:
  const ::pb::PDK::MsgHeader& _internal_t_commonheader() const;
  public:
  const ::pb::PDK::MsgHeader& t_commonheader() const;
  ::pb::PDK::MsgHeader* release_t_commonheader();
  ::pb::PDK::MsgHeader* mutable_t_commonheader();
  void set_allocated_t_commonheader(::pb::PDK::MsgHeader* t_commonheader);

  // optional uint32 u_SensorId = 2;
  bool has_u_sensorid() const;
  void clear_u_sensorid();
  static const int kUSensorIdFieldNumber = 2;
  ::google::protobuf::uint32 u_sensorid() const;
  void set_u_sensorid(::google::protobuf::uint32 value);

  // optional .pb.PDK.SensorMsgHeader.SignalStatus e_SignalStatus = 3 [default = EM_SIGSTATE_INVALID];
  bool has_e_signalstatus() const;
  void clear_e_signalstatus();
  static const int kESignalStatusFieldNumber = 3;
  ::pb::PDK::SensorMsgHeader_SignalStatus e_signalstatus() const;
  void set_e_signalstatus(::pb::PDK::SensorMsgHeader_SignalStatus value);

  // optional .pb.PDK.SensorMsgHeader.SensorType e_SensorType = 4 [default = UNKNOWN];
  bool has_e_sensortype() const;
  void clear_e_sensortype();
  static const int kESensorTypeFieldNumber = 4;
  ::pb::PDK::SensorMsgHeader_SensorType e_sensortype() const;
  void set_e_sensortype(::pb::PDK::SensorMsgHeader_SensorType value);

  // @@protoc_insertion_point(class_scope:pb.PDK.SensorMsgHeader)
 private:
  void set_has_t_commonheader();
  void clear_has_t_commonheader();
  void set_has_u_sensorid();
  void clear_has_u_sensorid();
  void set_has_e_signalstatus();
  void clear_has_e_signalstatus();
  void set_has_e_sensortype();
  void clear_has_e_sensortype();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::pb::PDK::MsgHeader* t_commonheader_;
  ::google::protobuf::uint32 u_sensorid_;
  int e_signalstatus_;
  int e_sensortype_;
  friend struct ::protobuf_pdk_5fSensorMsgHeader_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SensorMsgHeader

// optional .pb.PDK.MsgHeader t_CommonHeader = 1;
inline bool SensorMsgHeader::has_t_commonheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SensorMsgHeader::set_has_t_commonheader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SensorMsgHeader::clear_has_t_commonheader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::pb::PDK::MsgHeader& SensorMsgHeader::_internal_t_commonheader() const {
  return *t_commonheader_;
}
inline const ::pb::PDK::MsgHeader& SensorMsgHeader::t_commonheader() const {
  const ::pb::PDK::MsgHeader* p = t_commonheader_;
  // @@protoc_insertion_point(field_get:pb.PDK.SensorMsgHeader.t_CommonHeader)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::PDK::MsgHeader*>(
      &::pb::PDK::_MsgHeader_default_instance_);
}
inline ::pb::PDK::MsgHeader* SensorMsgHeader::release_t_commonheader() {
  // @@protoc_insertion_point(field_release:pb.PDK.SensorMsgHeader.t_CommonHeader)
  clear_has_t_commonheader();
  ::pb::PDK::MsgHeader* temp = t_commonheader_;
  t_commonheader_ = NULL;
  return temp;
}
inline ::pb::PDK::MsgHeader* SensorMsgHeader::mutable_t_commonheader() {
  set_has_t_commonheader();
  if (t_commonheader_ == NULL) {
    auto* p = CreateMaybeMessage<::pb::PDK::MsgHeader>(GetArenaNoVirtual());
    t_commonheader_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.PDK.SensorMsgHeader.t_CommonHeader)
  return t_commonheader_;
}
inline void SensorMsgHeader::set_allocated_t_commonheader(::pb::PDK::MsgHeader* t_commonheader) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(t_commonheader_);
  }
  if (t_commonheader) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      t_commonheader = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, t_commonheader, submessage_arena);
    }
    set_has_t_commonheader();
  } else {
    clear_has_t_commonheader();
  }
  t_commonheader_ = t_commonheader;
  // @@protoc_insertion_point(field_set_allocated:pb.PDK.SensorMsgHeader.t_CommonHeader)
}

// optional uint32 u_SensorId = 2;
inline bool SensorMsgHeader::has_u_sensorid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SensorMsgHeader::set_has_u_sensorid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SensorMsgHeader::clear_has_u_sensorid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SensorMsgHeader::clear_u_sensorid() {
  u_sensorid_ = 0u;
  clear_has_u_sensorid();
}
inline ::google::protobuf::uint32 SensorMsgHeader::u_sensorid() const {
  // @@protoc_insertion_point(field_get:pb.PDK.SensorMsgHeader.u_SensorId)
  return u_sensorid_;
}
inline void SensorMsgHeader::set_u_sensorid(::google::protobuf::uint32 value) {
  set_has_u_sensorid();
  u_sensorid_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.SensorMsgHeader.u_SensorId)
}

// optional .pb.PDK.SensorMsgHeader.SignalStatus e_SignalStatus = 3 [default = EM_SIGSTATE_INVALID];
inline bool SensorMsgHeader::has_e_signalstatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SensorMsgHeader::set_has_e_signalstatus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SensorMsgHeader::clear_has_e_signalstatus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SensorMsgHeader::clear_e_signalstatus() {
  e_signalstatus_ = 2;
  clear_has_e_signalstatus();
}
inline ::pb::PDK::SensorMsgHeader_SignalStatus SensorMsgHeader::e_signalstatus() const {
  // @@protoc_insertion_point(field_get:pb.PDK.SensorMsgHeader.e_SignalStatus)
  return static_cast< ::pb::PDK::SensorMsgHeader_SignalStatus >(e_signalstatus_);
}
inline void SensorMsgHeader::set_e_signalstatus(::pb::PDK::SensorMsgHeader_SignalStatus value) {
  assert(::pb::PDK::SensorMsgHeader_SignalStatus_IsValid(value));
  set_has_e_signalstatus();
  e_signalstatus_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.SensorMsgHeader.e_SignalStatus)
}

// optional .pb.PDK.SensorMsgHeader.SensorType e_SensorType = 4 [default = UNKNOWN];
inline bool SensorMsgHeader::has_e_sensortype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SensorMsgHeader::set_has_e_sensortype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SensorMsgHeader::clear_has_e_sensortype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SensorMsgHeader::clear_e_sensortype() {
  e_sensortype_ = 99;
  clear_has_e_sensortype();
}
inline ::pb::PDK::SensorMsgHeader_SensorType SensorMsgHeader::e_sensortype() const {
  // @@protoc_insertion_point(field_get:pb.PDK.SensorMsgHeader.e_SensorType)
  return static_cast< ::pb::PDK::SensorMsgHeader_SensorType >(e_sensortype_);
}
inline void SensorMsgHeader::set_e_sensortype(::pb::PDK::SensorMsgHeader_SensorType value) {
  assert(::pb::PDK::SensorMsgHeader_SensorType_IsValid(value));
  set_has_e_sensortype();
  e_sensortype_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.SensorMsgHeader.e_SensorType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace PDK
}  // namespace pb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::PDK::SensorMsgHeader_SignalStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::PDK::SensorMsgHeader_SignalStatus>() {
  return ::pb::PDK::SensorMsgHeader_SignalStatus_descriptor();
}
template <> struct is_proto_enum< ::pb::PDK::SensorMsgHeader_SensorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::PDK::SensorMsgHeader_SensorType>() {
  return ::pb::PDK::SensorMsgHeader_SensorType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_pdk_5fSensorMsgHeader_2eproto
