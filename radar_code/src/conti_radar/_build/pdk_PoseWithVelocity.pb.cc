// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pdk_PoseWithVelocity.proto

#include "pdk_PoseWithVelocity.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_pdk_5fMsgHeader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_pdk_5fMsgHeader_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MsgHeader;
}  // namespace protobuf_pdk_5fMsgHeader_2eproto
namespace protobuf_pdk_5fPoseWithVelocity_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_pdk_5fPoseWithVelocity_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PoseWithVelocity_PoseCartesian;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_pdk_5fPoseWithVelocity_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PoseWithVelocity_PoseWGS84;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_pdk_5fPoseWithVelocity_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PoseWithVelocity_Velocity;
}  // namespace protobuf_pdk_5fPoseWithVelocity_2eproto
namespace pb {
namespace PDK {
class PoseWithVelocity_PoseWGS84DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PoseWithVelocity_PoseWGS84>
      _instance;
} _PoseWithVelocity_PoseWGS84_default_instance_;
class PoseWithVelocity_PoseCartesianDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PoseWithVelocity_PoseCartesian>
      _instance;
} _PoseWithVelocity_PoseCartesian_default_instance_;
class PoseWithVelocity_VelocityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PoseWithVelocity_Velocity>
      _instance;
} _PoseWithVelocity_Velocity_default_instance_;
class PoseWithVelocityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PoseWithVelocity>
      _instance;
} _PoseWithVelocity_default_instance_;
}  // namespace PDK
}  // namespace pb
namespace protobuf_pdk_5fPoseWithVelocity_2eproto {
static void InitDefaultsPoseWithVelocity_PoseWGS84() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::PDK::_PoseWithVelocity_PoseWGS84_default_instance_;
    new (ptr) ::pb::PDK::PoseWithVelocity_PoseWGS84();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::PDK::PoseWithVelocity_PoseWGS84::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PoseWithVelocity_PoseWGS84 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPoseWithVelocity_PoseWGS84}, {}};

static void InitDefaultsPoseWithVelocity_PoseCartesian() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::PDK::_PoseWithVelocity_PoseCartesian_default_instance_;
    new (ptr) ::pb::PDK::PoseWithVelocity_PoseCartesian();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::PDK::PoseWithVelocity_PoseCartesian::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PoseWithVelocity_PoseCartesian =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPoseWithVelocity_PoseCartesian}, {}};

static void InitDefaultsPoseWithVelocity_Velocity() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::PDK::_PoseWithVelocity_Velocity_default_instance_;
    new (ptr) ::pb::PDK::PoseWithVelocity_Velocity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::PDK::PoseWithVelocity_Velocity::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PoseWithVelocity_Velocity =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPoseWithVelocity_Velocity}, {}};

static void InitDefaultsPoseWithVelocity() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::PDK::_PoseWithVelocity_default_instance_;
    new (ptr) ::pb::PDK::PoseWithVelocity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::PDK::PoseWithVelocity::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_PoseWithVelocity =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsPoseWithVelocity}, {
      &protobuf_pdk_5fMsgHeader_2eproto::scc_info_MsgHeader.base,
      &protobuf_pdk_5fPoseWithVelocity_2eproto::scc_info_PoseWithVelocity_PoseWGS84.base,
      &protobuf_pdk_5fPoseWithVelocity_2eproto::scc_info_PoseWithVelocity_PoseCartesian.base,
      &protobuf_pdk_5fPoseWithVelocity_2eproto::scc_info_PoseWithVelocity_Velocity.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_PoseWithVelocity_PoseWGS84.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PoseWithVelocity_PoseCartesian.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PoseWithVelocity_Velocity.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PoseWithVelocity.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseWGS84, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseWGS84, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseWGS84, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseWGS84, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseWGS84, altitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseWGS84, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseWGS84, varlat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseWGS84, varlong_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseWGS84, covlatlong_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseWGS84, varaltitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseWGS84, varheading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseWGS84, valid_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseCartesian, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseCartesian, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseCartesian, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseCartesian, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseCartesian, yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseCartesian, varx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseCartesian, vary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseCartesian, covxy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseCartesian, varyaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseCartesian, valid_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_Velocity, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_Velocity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_Velocity, vx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_Velocity, vy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_Velocity, yawrate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_Velocity, varvx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_Velocity, varvy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_Velocity, covvxvy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_Velocity, varyawrate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_Velocity, valid_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity, referenceframe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity, posewgs84_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity, posecartesian_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PDK::PoseWithVelocity, signalstatus_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::pb::PDK::PoseWithVelocity_PoseWGS84)},
  { 25, 38, sizeof(::pb::PDK::PoseWithVelocity_PoseCartesian)},
  { 46, 59, sizeof(::pb::PDK::PoseWithVelocity_Velocity)},
  { 67, 79, sizeof(::pb::PDK::PoseWithVelocity)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::PDK::_PoseWithVelocity_PoseWGS84_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::PDK::_PoseWithVelocity_PoseCartesian_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::PDK::_PoseWithVelocity_Velocity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::PDK::_PoseWithVelocity_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "pdk_PoseWithVelocity.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\032pdk_PoseWithVelocity.proto\022\006pb.PDK\032\023pd"
      "k_MsgHeader.proto\"\377\006\n\020PoseWithVelocity\022!"
      "\n\006header\030\001 \001(\0132\021.pb.PDK.MsgHeader\022\026\n\016ref"
      "erenceFrame\030\002 \001(\t\0225\n\tposeWGS84\030\003 \001(\0132\".p"
      "b.PDK.PoseWithVelocity.PoseWGS84\022=\n\rpose"
      "Cartesian\030\004 \001(\0132&.pb.PDK.PoseWithVelocit"
      "y.PoseCartesian\0223\n\010velocity\030\005 \001(\0132!.pb.P"
      "DK.PoseWithVelocity.Velocity\022\022\n\nconfiden"
      "ce\030\006 \001(\002\022;\n\014signalStatus\030\007 \001(\0162%.pb.PDK."
      "PoseWithVelocity.SignalStatus\032\300\001\n\tPoseWG"
      "S84\022\020\n\010latitude\030\001 \001(\001\022\021\n\tlongitude\030\002 \001(\001"
      "\022\020\n\010altitude\030\003 \001(\002\022\017\n\007heading\030\004 \001(\002\022\016\n\006v"
      "arLat\030\005 \001(\002\022\017\n\007varLong\030\006 \001(\002\022\022\n\ncovLatLo"
      "ng\030\007 \001(\002\022\023\n\013varAltitude\030\010 \001(\002\022\022\n\nvarHead"
      "ing\030\t \001(\002\022\r\n\005valid\030\n \001(\010\032|\n\rPoseCartesia"
      "n\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\013\n\003yaw\030\003 \001(\002\022\014\n\004"
      "varX\030\005 \001(\002\022\014\n\004varY\030\006 \001(\002\022\r\n\005covXY\030\007 \001(\002\022"
      "\016\n\006varYaw\030\t \001(\002\022\r\n\005valid\030\n \001(\010\032\205\001\n\010Veloc"
      "ity\022\n\n\002vx\030\001 \001(\002\022\n\n\002vy\030\002 \001(\002\022\017\n\007yawRate\030\003"
      " \001(\002\022\r\n\005varVx\030\004 \001(\002\022\r\n\005varVy\030\005 \001(\002\022\017\n\007co"
      "vVxVy\030\006 \001(\002\022\022\n\nvarYawRate\030\007 \001(\002\022\r\n\005valid"
      "\030\010 \001(\010\"k\n\014SignalStatus\022\022\n\016STATUS_UNKNOWN"
      "\020\000\022\017\n\013STATUS_INIT\020\001\022\r\n\tSTATUS_OK\020\002\022\023\n\017ST"
      "ATUS_FALLBACK\020\003\022\022\n\016STATUS_INVALID\020\004"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 955);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pdk_PoseWithVelocity.proto", &protobuf_RegisterTypes);
  ::protobuf_pdk_5fMsgHeader_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_pdk_5fPoseWithVelocity_2eproto
namespace pb {
namespace PDK {
const ::google::protobuf::EnumDescriptor* PoseWithVelocity_SignalStatus_descriptor() {
  protobuf_pdk_5fPoseWithVelocity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_pdk_5fPoseWithVelocity_2eproto::file_level_enum_descriptors[0];
}
bool PoseWithVelocity_SignalStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PoseWithVelocity_SignalStatus PoseWithVelocity::STATUS_UNKNOWN;
const PoseWithVelocity_SignalStatus PoseWithVelocity::STATUS_INIT;
const PoseWithVelocity_SignalStatus PoseWithVelocity::STATUS_OK;
const PoseWithVelocity_SignalStatus PoseWithVelocity::STATUS_FALLBACK;
const PoseWithVelocity_SignalStatus PoseWithVelocity::STATUS_INVALID;
const PoseWithVelocity_SignalStatus PoseWithVelocity::SignalStatus_MIN;
const PoseWithVelocity_SignalStatus PoseWithVelocity::SignalStatus_MAX;
const int PoseWithVelocity::SignalStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void PoseWithVelocity_PoseWGS84::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PoseWithVelocity_PoseWGS84::kLatitudeFieldNumber;
const int PoseWithVelocity_PoseWGS84::kLongitudeFieldNumber;
const int PoseWithVelocity_PoseWGS84::kAltitudeFieldNumber;
const int PoseWithVelocity_PoseWGS84::kHeadingFieldNumber;
const int PoseWithVelocity_PoseWGS84::kVarLatFieldNumber;
const int PoseWithVelocity_PoseWGS84::kVarLongFieldNumber;
const int PoseWithVelocity_PoseWGS84::kCovLatLongFieldNumber;
const int PoseWithVelocity_PoseWGS84::kVarAltitudeFieldNumber;
const int PoseWithVelocity_PoseWGS84::kVarHeadingFieldNumber;
const int PoseWithVelocity_PoseWGS84::kValidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PoseWithVelocity_PoseWGS84::PoseWithVelocity_PoseWGS84()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_pdk_5fPoseWithVelocity_2eproto::scc_info_PoseWithVelocity_PoseWGS84.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.PDK.PoseWithVelocity.PoseWGS84)
}
PoseWithVelocity_PoseWGS84::PoseWithVelocity_PoseWGS84(const PoseWithVelocity_PoseWGS84& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&valid_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(valid_));
  // @@protoc_insertion_point(copy_constructor:pb.PDK.PoseWithVelocity.PoseWGS84)
}

void PoseWithVelocity_PoseWGS84::SharedCtor() {
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&valid_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(valid_));
}

PoseWithVelocity_PoseWGS84::~PoseWithVelocity_PoseWGS84() {
  // @@protoc_insertion_point(destructor:pb.PDK.PoseWithVelocity.PoseWGS84)
  SharedDtor();
}

void PoseWithVelocity_PoseWGS84::SharedDtor() {
}

void PoseWithVelocity_PoseWGS84::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PoseWithVelocity_PoseWGS84::descriptor() {
  ::protobuf_pdk_5fPoseWithVelocity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pdk_5fPoseWithVelocity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PoseWithVelocity_PoseWGS84& PoseWithVelocity_PoseWGS84::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_pdk_5fPoseWithVelocity_2eproto::scc_info_PoseWithVelocity_PoseWGS84.base);
  return *internal_default_instance();
}


void PoseWithVelocity_PoseWGS84::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.PDK.PoseWithVelocity.PoseWGS84)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&latitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&varaltitude_) -
        reinterpret_cast<char*>(&latitude_)) + sizeof(varaltitude_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&varheading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&valid_) -
        reinterpret_cast<char*>(&varheading_)) + sizeof(valid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PoseWithVelocity_PoseWGS84::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.PDK.PoseWithVelocity.PoseWGS84)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double latitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float altitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_altitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float heading = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float varLat = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_varlat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &varlat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float varLong = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_varlong();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &varlong_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float covLatLong = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_covlatlong();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &covlatlong_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float varAltitude = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_varaltitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &varaltitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float varHeading = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_varheading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &varheading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool valid = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.PDK.PoseWithVelocity.PoseWGS84)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.PDK.PoseWithVelocity.PoseWGS84)
  return false;
#undef DO_
}

void PoseWithVelocity_PoseWGS84::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.PDK.PoseWithVelocity.PoseWGS84)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double latitude = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->latitude(), output);
  }

  // optional double longitude = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
  }

  // optional float altitude = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->altitude(), output);
  }

  // optional float heading = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->heading(), output);
  }

  // optional float varLat = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->varlat(), output);
  }

  // optional float varLong = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->varlong(), output);
  }

  // optional float covLatLong = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->covlatlong(), output);
  }

  // optional float varAltitude = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->varaltitude(), output);
  }

  // optional float varHeading = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->varheading(), output);
  }

  // optional bool valid = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->valid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.PDK.PoseWithVelocity.PoseWGS84)
}

::google::protobuf::uint8* PoseWithVelocity_PoseWGS84::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.PDK.PoseWithVelocity.PoseWGS84)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double latitude = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->latitude(), target);
  }

  // optional double longitude = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->longitude(), target);
  }

  // optional float altitude = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->altitude(), target);
  }

  // optional float heading = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->heading(), target);
  }

  // optional float varLat = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->varlat(), target);
  }

  // optional float varLong = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->varlong(), target);
  }

  // optional float covLatLong = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->covlatlong(), target);
  }

  // optional float varAltitude = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->varaltitude(), target);
  }

  // optional float varHeading = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->varheading(), target);
  }

  // optional bool valid = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->valid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PDK.PoseWithVelocity.PoseWGS84)
  return target;
}

size_t PoseWithVelocity_PoseWGS84::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.PDK.PoseWithVelocity.PoseWGS84)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double latitude = 1;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // optional double longitude = 2;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // optional float altitude = 3;
    if (has_altitude()) {
      total_size += 1 + 4;
    }

    // optional float heading = 4;
    if (has_heading()) {
      total_size += 1 + 4;
    }

    // optional float varLat = 5;
    if (has_varlat()) {
      total_size += 1 + 4;
    }

    // optional float varLong = 6;
    if (has_varlong()) {
      total_size += 1 + 4;
    }

    // optional float covLatLong = 7;
    if (has_covlatlong()) {
      total_size += 1 + 4;
    }

    // optional float varAltitude = 8;
    if (has_varaltitude()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional float varHeading = 9;
    if (has_varheading()) {
      total_size += 1 + 4;
    }

    // optional bool valid = 10;
    if (has_valid()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoseWithVelocity_PoseWGS84::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.PDK.PoseWithVelocity.PoseWGS84)
  GOOGLE_DCHECK_NE(&from, this);
  const PoseWithVelocity_PoseWGS84* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PoseWithVelocity_PoseWGS84>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.PDK.PoseWithVelocity.PoseWGS84)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.PDK.PoseWithVelocity.PoseWGS84)
    MergeFrom(*source);
  }
}

void PoseWithVelocity_PoseWGS84::MergeFrom(const PoseWithVelocity_PoseWGS84& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.PDK.PoseWithVelocity.PoseWGS84)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      altitude_ = from.altitude_;
    }
    if (cached_has_bits & 0x00000008u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000010u) {
      varlat_ = from.varlat_;
    }
    if (cached_has_bits & 0x00000020u) {
      varlong_ = from.varlong_;
    }
    if (cached_has_bits & 0x00000040u) {
      covlatlong_ = from.covlatlong_;
    }
    if (cached_has_bits & 0x00000080u) {
      varaltitude_ = from.varaltitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      varheading_ = from.varheading_;
    }
    if (cached_has_bits & 0x00000200u) {
      valid_ = from.valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PoseWithVelocity_PoseWGS84::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.PDK.PoseWithVelocity.PoseWGS84)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoseWithVelocity_PoseWGS84::CopyFrom(const PoseWithVelocity_PoseWGS84& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.PDK.PoseWithVelocity.PoseWGS84)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseWithVelocity_PoseWGS84::IsInitialized() const {
  return true;
}

void PoseWithVelocity_PoseWGS84::Swap(PoseWithVelocity_PoseWGS84* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PoseWithVelocity_PoseWGS84::InternalSwap(PoseWithVelocity_PoseWGS84* other) {
  using std::swap;
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(altitude_, other->altitude_);
  swap(heading_, other->heading_);
  swap(varlat_, other->varlat_);
  swap(varlong_, other->varlong_);
  swap(covlatlong_, other->covlatlong_);
  swap(varaltitude_, other->varaltitude_);
  swap(varheading_, other->varheading_);
  swap(valid_, other->valid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PoseWithVelocity_PoseWGS84::GetMetadata() const {
  protobuf_pdk_5fPoseWithVelocity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pdk_5fPoseWithVelocity_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PoseWithVelocity_PoseCartesian::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PoseWithVelocity_PoseCartesian::kXFieldNumber;
const int PoseWithVelocity_PoseCartesian::kYFieldNumber;
const int PoseWithVelocity_PoseCartesian::kYawFieldNumber;
const int PoseWithVelocity_PoseCartesian::kVarXFieldNumber;
const int PoseWithVelocity_PoseCartesian::kVarYFieldNumber;
const int PoseWithVelocity_PoseCartesian::kCovXYFieldNumber;
const int PoseWithVelocity_PoseCartesian::kVarYawFieldNumber;
const int PoseWithVelocity_PoseCartesian::kValidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PoseWithVelocity_PoseCartesian::PoseWithVelocity_PoseCartesian()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_pdk_5fPoseWithVelocity_2eproto::scc_info_PoseWithVelocity_PoseCartesian.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.PDK.PoseWithVelocity.PoseCartesian)
}
PoseWithVelocity_PoseCartesian::PoseWithVelocity_PoseCartesian(const PoseWithVelocity_PoseCartesian& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&valid_) -
    reinterpret_cast<char*>(&x_)) + sizeof(valid_));
  // @@protoc_insertion_point(copy_constructor:pb.PDK.PoseWithVelocity.PoseCartesian)
}

void PoseWithVelocity_PoseCartesian::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&valid_) -
      reinterpret_cast<char*>(&x_)) + sizeof(valid_));
}

PoseWithVelocity_PoseCartesian::~PoseWithVelocity_PoseCartesian() {
  // @@protoc_insertion_point(destructor:pb.PDK.PoseWithVelocity.PoseCartesian)
  SharedDtor();
}

void PoseWithVelocity_PoseCartesian::SharedDtor() {
}

void PoseWithVelocity_PoseCartesian::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PoseWithVelocity_PoseCartesian::descriptor() {
  ::protobuf_pdk_5fPoseWithVelocity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pdk_5fPoseWithVelocity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PoseWithVelocity_PoseCartesian& PoseWithVelocity_PoseCartesian::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_pdk_5fPoseWithVelocity_2eproto::scc_info_PoseWithVelocity_PoseCartesian.base);
  return *internal_default_instance();
}


void PoseWithVelocity_PoseCartesian::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.PDK.PoseWithVelocity.PoseCartesian)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&valid_) -
        reinterpret_cast<char*>(&x_)) + sizeof(valid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PoseWithVelocity_PoseCartesian::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.PDK.PoseWithVelocity.PoseCartesian)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float yaw = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_yaw();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float varX = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_varx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &varx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float varY = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_vary();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float covXY = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_covxy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &covxy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float varYaw = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_varyaw();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &varyaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool valid = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.PDK.PoseWithVelocity.PoseCartesian)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.PDK.PoseWithVelocity.PoseCartesian)
  return false;
#undef DO_
}

void PoseWithVelocity_PoseCartesian::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.PDK.PoseWithVelocity.PoseCartesian)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional float yaw = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->yaw(), output);
  }

  // optional float varX = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->varx(), output);
  }

  // optional float varY = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->vary(), output);
  }

  // optional float covXY = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->covxy(), output);
  }

  // optional float varYaw = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->varyaw(), output);
  }

  // optional bool valid = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->valid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.PDK.PoseWithVelocity.PoseCartesian)
}

::google::protobuf::uint8* PoseWithVelocity_PoseCartesian::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.PDK.PoseWithVelocity.PoseCartesian)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional float yaw = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->yaw(), target);
  }

  // optional float varX = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->varx(), target);
  }

  // optional float varY = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->vary(), target);
  }

  // optional float covXY = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->covxy(), target);
  }

  // optional float varYaw = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->varyaw(), target);
  }

  // optional bool valid = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->valid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PDK.PoseWithVelocity.PoseCartesian)
  return target;
}

size_t PoseWithVelocity_PoseCartesian::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.PDK.PoseWithVelocity.PoseCartesian)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional float yaw = 3;
    if (has_yaw()) {
      total_size += 1 + 4;
    }

    // optional float varX = 5;
    if (has_varx()) {
      total_size += 1 + 4;
    }

    // optional float varY = 6;
    if (has_vary()) {
      total_size += 1 + 4;
    }

    // optional float covXY = 7;
    if (has_covxy()) {
      total_size += 1 + 4;
    }

    // optional float varYaw = 9;
    if (has_varyaw()) {
      total_size += 1 + 4;
    }

    // optional bool valid = 10;
    if (has_valid()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoseWithVelocity_PoseCartesian::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.PDK.PoseWithVelocity.PoseCartesian)
  GOOGLE_DCHECK_NE(&from, this);
  const PoseWithVelocity_PoseCartesian* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PoseWithVelocity_PoseCartesian>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.PDK.PoseWithVelocity.PoseCartesian)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.PDK.PoseWithVelocity.PoseCartesian)
    MergeFrom(*source);
  }
}

void PoseWithVelocity_PoseCartesian::MergeFrom(const PoseWithVelocity_PoseCartesian& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.PDK.PoseWithVelocity.PoseCartesian)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      yaw_ = from.yaw_;
    }
    if (cached_has_bits & 0x00000008u) {
      varx_ = from.varx_;
    }
    if (cached_has_bits & 0x00000010u) {
      vary_ = from.vary_;
    }
    if (cached_has_bits & 0x00000020u) {
      covxy_ = from.covxy_;
    }
    if (cached_has_bits & 0x00000040u) {
      varyaw_ = from.varyaw_;
    }
    if (cached_has_bits & 0x00000080u) {
      valid_ = from.valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PoseWithVelocity_PoseCartesian::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.PDK.PoseWithVelocity.PoseCartesian)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoseWithVelocity_PoseCartesian::CopyFrom(const PoseWithVelocity_PoseCartesian& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.PDK.PoseWithVelocity.PoseCartesian)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseWithVelocity_PoseCartesian::IsInitialized() const {
  return true;
}

void PoseWithVelocity_PoseCartesian::Swap(PoseWithVelocity_PoseCartesian* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PoseWithVelocity_PoseCartesian::InternalSwap(PoseWithVelocity_PoseCartesian* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(yaw_, other->yaw_);
  swap(varx_, other->varx_);
  swap(vary_, other->vary_);
  swap(covxy_, other->covxy_);
  swap(varyaw_, other->varyaw_);
  swap(valid_, other->valid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PoseWithVelocity_PoseCartesian::GetMetadata() const {
  protobuf_pdk_5fPoseWithVelocity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pdk_5fPoseWithVelocity_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PoseWithVelocity_Velocity::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PoseWithVelocity_Velocity::kVxFieldNumber;
const int PoseWithVelocity_Velocity::kVyFieldNumber;
const int PoseWithVelocity_Velocity::kYawRateFieldNumber;
const int PoseWithVelocity_Velocity::kVarVxFieldNumber;
const int PoseWithVelocity_Velocity::kVarVyFieldNumber;
const int PoseWithVelocity_Velocity::kCovVxVyFieldNumber;
const int PoseWithVelocity_Velocity::kVarYawRateFieldNumber;
const int PoseWithVelocity_Velocity::kValidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PoseWithVelocity_Velocity::PoseWithVelocity_Velocity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_pdk_5fPoseWithVelocity_2eproto::scc_info_PoseWithVelocity_Velocity.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.PDK.PoseWithVelocity.Velocity)
}
PoseWithVelocity_Velocity::PoseWithVelocity_Velocity(const PoseWithVelocity_Velocity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vx_, &from.vx_,
    static_cast<size_t>(reinterpret_cast<char*>(&valid_) -
    reinterpret_cast<char*>(&vx_)) + sizeof(valid_));
  // @@protoc_insertion_point(copy_constructor:pb.PDK.PoseWithVelocity.Velocity)
}

void PoseWithVelocity_Velocity::SharedCtor() {
  ::memset(&vx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&valid_) -
      reinterpret_cast<char*>(&vx_)) + sizeof(valid_));
}

PoseWithVelocity_Velocity::~PoseWithVelocity_Velocity() {
  // @@protoc_insertion_point(destructor:pb.PDK.PoseWithVelocity.Velocity)
  SharedDtor();
}

void PoseWithVelocity_Velocity::SharedDtor() {
}

void PoseWithVelocity_Velocity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PoseWithVelocity_Velocity::descriptor() {
  ::protobuf_pdk_5fPoseWithVelocity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pdk_5fPoseWithVelocity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PoseWithVelocity_Velocity& PoseWithVelocity_Velocity::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_pdk_5fPoseWithVelocity_2eproto::scc_info_PoseWithVelocity_Velocity.base);
  return *internal_default_instance();
}


void PoseWithVelocity_Velocity::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.PDK.PoseWithVelocity.Velocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&vx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&valid_) -
        reinterpret_cast<char*>(&vx_)) + sizeof(valid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PoseWithVelocity_Velocity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.PDK.PoseWithVelocity.Velocity)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float vx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_vx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float vy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_vy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float yawRate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_yawrate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yawrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float varVx = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_varvx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &varvx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float varVy = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_varvy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &varvy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float covVxVy = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_covvxvy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &covvxvy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float varYawRate = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_varyawrate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &varyawrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool valid = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.PDK.PoseWithVelocity.Velocity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.PDK.PoseWithVelocity.Velocity)
  return false;
#undef DO_
}

void PoseWithVelocity_Velocity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.PDK.PoseWithVelocity.Velocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float vx = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->vx(), output);
  }

  // optional float vy = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->vy(), output);
  }

  // optional float yawRate = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->yawrate(), output);
  }

  // optional float varVx = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->varvx(), output);
  }

  // optional float varVy = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->varvy(), output);
  }

  // optional float covVxVy = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->covvxvy(), output);
  }

  // optional float varYawRate = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->varyawrate(), output);
  }

  // optional bool valid = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->valid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.PDK.PoseWithVelocity.Velocity)
}

::google::protobuf::uint8* PoseWithVelocity_Velocity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.PDK.PoseWithVelocity.Velocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float vx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->vx(), target);
  }

  // optional float vy = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->vy(), target);
  }

  // optional float yawRate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->yawrate(), target);
  }

  // optional float varVx = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->varvx(), target);
  }

  // optional float varVy = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->varvy(), target);
  }

  // optional float covVxVy = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->covvxvy(), target);
  }

  // optional float varYawRate = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->varyawrate(), target);
  }

  // optional bool valid = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->valid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PDK.PoseWithVelocity.Velocity)
  return target;
}

size_t PoseWithVelocity_Velocity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.PDK.PoseWithVelocity.Velocity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional float vx = 1;
    if (has_vx()) {
      total_size += 1 + 4;
    }

    // optional float vy = 2;
    if (has_vy()) {
      total_size += 1 + 4;
    }

    // optional float yawRate = 3;
    if (has_yawrate()) {
      total_size += 1 + 4;
    }

    // optional float varVx = 4;
    if (has_varvx()) {
      total_size += 1 + 4;
    }

    // optional float varVy = 5;
    if (has_varvy()) {
      total_size += 1 + 4;
    }

    // optional float covVxVy = 6;
    if (has_covvxvy()) {
      total_size += 1 + 4;
    }

    // optional float varYawRate = 7;
    if (has_varyawrate()) {
      total_size += 1 + 4;
    }

    // optional bool valid = 8;
    if (has_valid()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoseWithVelocity_Velocity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.PDK.PoseWithVelocity.Velocity)
  GOOGLE_DCHECK_NE(&from, this);
  const PoseWithVelocity_Velocity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PoseWithVelocity_Velocity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.PDK.PoseWithVelocity.Velocity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.PDK.PoseWithVelocity.Velocity)
    MergeFrom(*source);
  }
}

void PoseWithVelocity_Velocity::MergeFrom(const PoseWithVelocity_Velocity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.PDK.PoseWithVelocity.Velocity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      vx_ = from.vx_;
    }
    if (cached_has_bits & 0x00000002u) {
      vy_ = from.vy_;
    }
    if (cached_has_bits & 0x00000004u) {
      yawrate_ = from.yawrate_;
    }
    if (cached_has_bits & 0x00000008u) {
      varvx_ = from.varvx_;
    }
    if (cached_has_bits & 0x00000010u) {
      varvy_ = from.varvy_;
    }
    if (cached_has_bits & 0x00000020u) {
      covvxvy_ = from.covvxvy_;
    }
    if (cached_has_bits & 0x00000040u) {
      varyawrate_ = from.varyawrate_;
    }
    if (cached_has_bits & 0x00000080u) {
      valid_ = from.valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PoseWithVelocity_Velocity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.PDK.PoseWithVelocity.Velocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoseWithVelocity_Velocity::CopyFrom(const PoseWithVelocity_Velocity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.PDK.PoseWithVelocity.Velocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseWithVelocity_Velocity::IsInitialized() const {
  return true;
}

void PoseWithVelocity_Velocity::Swap(PoseWithVelocity_Velocity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PoseWithVelocity_Velocity::InternalSwap(PoseWithVelocity_Velocity* other) {
  using std::swap;
  swap(vx_, other->vx_);
  swap(vy_, other->vy_);
  swap(yawrate_, other->yawrate_);
  swap(varvx_, other->varvx_);
  swap(varvy_, other->varvy_);
  swap(covvxvy_, other->covvxvy_);
  swap(varyawrate_, other->varyawrate_);
  swap(valid_, other->valid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PoseWithVelocity_Velocity::GetMetadata() const {
  protobuf_pdk_5fPoseWithVelocity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pdk_5fPoseWithVelocity_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PoseWithVelocity::InitAsDefaultInstance() {
  ::pb::PDK::_PoseWithVelocity_default_instance_._instance.get_mutable()->header_ = const_cast< ::pb::PDK::MsgHeader*>(
      ::pb::PDK::MsgHeader::internal_default_instance());
  ::pb::PDK::_PoseWithVelocity_default_instance_._instance.get_mutable()->posewgs84_ = const_cast< ::pb::PDK::PoseWithVelocity_PoseWGS84*>(
      ::pb::PDK::PoseWithVelocity_PoseWGS84::internal_default_instance());
  ::pb::PDK::_PoseWithVelocity_default_instance_._instance.get_mutable()->posecartesian_ = const_cast< ::pb::PDK::PoseWithVelocity_PoseCartesian*>(
      ::pb::PDK::PoseWithVelocity_PoseCartesian::internal_default_instance());
  ::pb::PDK::_PoseWithVelocity_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::pb::PDK::PoseWithVelocity_Velocity*>(
      ::pb::PDK::PoseWithVelocity_Velocity::internal_default_instance());
}
void PoseWithVelocity::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PoseWithVelocity::kHeaderFieldNumber;
const int PoseWithVelocity::kReferenceFrameFieldNumber;
const int PoseWithVelocity::kPoseWGS84FieldNumber;
const int PoseWithVelocity::kPoseCartesianFieldNumber;
const int PoseWithVelocity::kVelocityFieldNumber;
const int PoseWithVelocity::kConfidenceFieldNumber;
const int PoseWithVelocity::kSignalStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PoseWithVelocity::PoseWithVelocity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_pdk_5fPoseWithVelocity_2eproto::scc_info_PoseWithVelocity.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.PDK.PoseWithVelocity)
}
PoseWithVelocity::PoseWithVelocity(const PoseWithVelocity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  referenceframe_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_referenceframe()) {
    referenceframe_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.referenceframe_);
  }
  if (from.has_header()) {
    header_ = new ::pb::PDK::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_posewgs84()) {
    posewgs84_ = new ::pb::PDK::PoseWithVelocity_PoseWGS84(*from.posewgs84_);
  } else {
    posewgs84_ = NULL;
  }
  if (from.has_posecartesian()) {
    posecartesian_ = new ::pb::PDK::PoseWithVelocity_PoseCartesian(*from.posecartesian_);
  } else {
    posecartesian_ = NULL;
  }
  if (from.has_velocity()) {
    velocity_ = new ::pb::PDK::PoseWithVelocity_Velocity(*from.velocity_);
  } else {
    velocity_ = NULL;
  }
  ::memcpy(&confidence_, &from.confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&signalstatus_) -
    reinterpret_cast<char*>(&confidence_)) + sizeof(signalstatus_));
  // @@protoc_insertion_point(copy_constructor:pb.PDK.PoseWithVelocity)
}

void PoseWithVelocity::SharedCtor() {
  referenceframe_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signalstatus_) -
      reinterpret_cast<char*>(&header_)) + sizeof(signalstatus_));
}

PoseWithVelocity::~PoseWithVelocity() {
  // @@protoc_insertion_point(destructor:pb.PDK.PoseWithVelocity)
  SharedDtor();
}

void PoseWithVelocity::SharedDtor() {
  referenceframe_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete posewgs84_;
  if (this != internal_default_instance()) delete posecartesian_;
  if (this != internal_default_instance()) delete velocity_;
}

void PoseWithVelocity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PoseWithVelocity::descriptor() {
  ::protobuf_pdk_5fPoseWithVelocity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pdk_5fPoseWithVelocity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PoseWithVelocity& PoseWithVelocity::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_pdk_5fPoseWithVelocity_2eproto::scc_info_PoseWithVelocity.base);
  return *internal_default_instance();
}


void PoseWithVelocity::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.PDK.PoseWithVelocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      referenceframe_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(posewgs84_ != NULL);
      posewgs84_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(posecartesian_ != NULL);
      posecartesian_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(velocity_ != NULL);
      velocity_->Clear();
    }
  }
  if (cached_has_bits & 96u) {
    ::memset(&confidence_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&signalstatus_) -
        reinterpret_cast<char*>(&confidence_)) + sizeof(signalstatus_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PoseWithVelocity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.PDK.PoseWithVelocity)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.PDK.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string referenceFrame = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_referenceframe()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->referenceframe().data(), static_cast<int>(this->referenceframe().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.PDK.PoseWithVelocity.referenceFrame");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.PDK.PoseWithVelocity.PoseWGS84 poseWGS84 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_posewgs84()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.PDK.PoseWithVelocity.PoseCartesian poseCartesian = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_posecartesian()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.PDK.PoseWithVelocity.Velocity velocity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float confidence = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_confidence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.PDK.PoseWithVelocity.SignalStatus signalStatus = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::PDK::PoseWithVelocity_SignalStatus_IsValid(value)) {
            set_signalstatus(static_cast< ::pb::PDK::PoseWithVelocity_SignalStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.PDK.PoseWithVelocity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.PDK.PoseWithVelocity)
  return false;
#undef DO_
}

void PoseWithVelocity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.PDK.PoseWithVelocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.PDK.MsgHeader header = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional string referenceFrame = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->referenceframe().data(), static_cast<int>(this->referenceframe().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.PDK.PoseWithVelocity.referenceFrame");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->referenceframe(), output);
  }

  // optional .pb.PDK.PoseWithVelocity.PoseWGS84 poseWGS84 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_posewgs84(), output);
  }

  // optional .pb.PDK.PoseWithVelocity.PoseCartesian poseCartesian = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_posecartesian(), output);
  }

  // optional .pb.PDK.PoseWithVelocity.Velocity velocity = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_velocity(), output);
  }

  // optional float confidence = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->confidence(), output);
  }

  // optional .pb.PDK.PoseWithVelocity.SignalStatus signalStatus = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->signalstatus(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.PDK.PoseWithVelocity)
}

::google::protobuf::uint8* PoseWithVelocity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.PDK.PoseWithVelocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.PDK.MsgHeader header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional string referenceFrame = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->referenceframe().data(), static_cast<int>(this->referenceframe().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.PDK.PoseWithVelocity.referenceFrame");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->referenceframe(), target);
  }

  // optional .pb.PDK.PoseWithVelocity.PoseWGS84 poseWGS84 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_posewgs84(), deterministic, target);
  }

  // optional .pb.PDK.PoseWithVelocity.PoseCartesian poseCartesian = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_posecartesian(), deterministic, target);
  }

  // optional .pb.PDK.PoseWithVelocity.Velocity velocity = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_velocity(), deterministic, target);
  }

  // optional float confidence = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->confidence(), target);
  }

  // optional .pb.PDK.PoseWithVelocity.SignalStatus signalStatus = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->signalstatus(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PDK.PoseWithVelocity)
  return target;
}

size_t PoseWithVelocity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.PDK.PoseWithVelocity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string referenceFrame = 2;
    if (has_referenceframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->referenceframe());
    }

    // optional .pb.PDK.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .pb.PDK.PoseWithVelocity.PoseWGS84 poseWGS84 = 3;
    if (has_posewgs84()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *posewgs84_);
    }

    // optional .pb.PDK.PoseWithVelocity.PoseCartesian poseCartesian = 4;
    if (has_posecartesian()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *posecartesian_);
    }

    // optional .pb.PDK.PoseWithVelocity.Velocity velocity = 5;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *velocity_);
    }

    // optional float confidence = 6;
    if (has_confidence()) {
      total_size += 1 + 4;
    }

    // optional .pb.PDK.PoseWithVelocity.SignalStatus signalStatus = 7;
    if (has_signalstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->signalstatus());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoseWithVelocity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.PDK.PoseWithVelocity)
  GOOGLE_DCHECK_NE(&from, this);
  const PoseWithVelocity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PoseWithVelocity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.PDK.PoseWithVelocity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.PDK.PoseWithVelocity)
    MergeFrom(*source);
  }
}

void PoseWithVelocity::MergeFrom(const PoseWithVelocity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.PDK.PoseWithVelocity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_referenceframe();
      referenceframe_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.referenceframe_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_header()->::pb::PDK::MsgHeader::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_posewgs84()->::pb::PDK::PoseWithVelocity_PoseWGS84::MergeFrom(from.posewgs84());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_posecartesian()->::pb::PDK::PoseWithVelocity_PoseCartesian::MergeFrom(from.posecartesian());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_velocity()->::pb::PDK::PoseWithVelocity_Velocity::MergeFrom(from.velocity());
    }
    if (cached_has_bits & 0x00000020u) {
      confidence_ = from.confidence_;
    }
    if (cached_has_bits & 0x00000040u) {
      signalstatus_ = from.signalstatus_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PoseWithVelocity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.PDK.PoseWithVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoseWithVelocity::CopyFrom(const PoseWithVelocity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.PDK.PoseWithVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseWithVelocity::IsInitialized() const {
  return true;
}

void PoseWithVelocity::Swap(PoseWithVelocity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PoseWithVelocity::InternalSwap(PoseWithVelocity* other) {
  using std::swap;
  referenceframe_.Swap(&other->referenceframe_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(posewgs84_, other->posewgs84_);
  swap(posecartesian_, other->posecartesian_);
  swap(velocity_, other->velocity_);
  swap(confidence_, other->confidence_);
  swap(signalstatus_, other->signalstatus_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PoseWithVelocity::GetMetadata() const {
  protobuf_pdk_5fPoseWithVelocity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pdk_5fPoseWithVelocity_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace PDK
}  // namespace pb
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::PDK::PoseWithVelocity_PoseWGS84* Arena::CreateMaybeMessage< ::pb::PDK::PoseWithVelocity_PoseWGS84 >(Arena* arena) {
  return Arena::CreateInternal< ::pb::PDK::PoseWithVelocity_PoseWGS84 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::PDK::PoseWithVelocity_PoseCartesian* Arena::CreateMaybeMessage< ::pb::PDK::PoseWithVelocity_PoseCartesian >(Arena* arena) {
  return Arena::CreateInternal< ::pb::PDK::PoseWithVelocity_PoseCartesian >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::PDK::PoseWithVelocity_Velocity* Arena::CreateMaybeMessage< ::pb::PDK::PoseWithVelocity_Velocity >(Arena* arena) {
  return Arena::CreateInternal< ::pb::PDK::PoseWithVelocity_Velocity >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::PDK::PoseWithVelocity* Arena::CreateMaybeMessage< ::pb::PDK::PoseWithVelocity >(Arena* arena) {
  return Arena::CreateInternal< ::pb::PDK::PoseWithVelocity >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
