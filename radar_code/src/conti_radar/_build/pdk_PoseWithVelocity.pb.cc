// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pdk_PoseWithVelocity.proto

#include "pdk_PoseWithVelocity.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace pb {
namespace PDK {
PROTOBUF_CONSTEXPR PoseWithVelocity_PoseWGS84::PoseWithVelocity_PoseWGS84(
    ::_pbi::ConstantInitialized)
  : latitude_(0)
  , longitude_(0)
  , altitude_(0)
  , heading_(0)
  , varlat_(0)
  , varlong_(0)
  , covlatlong_(0)
  , varaltitude_(0)
  , varheading_(0)
  , valid_(false){}
struct PoseWithVelocity_PoseWGS84DefaultTypeInternal {
  PROTOBUF_CONSTEXPR PoseWithVelocity_PoseWGS84DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PoseWithVelocity_PoseWGS84DefaultTypeInternal() {}
  union {
    PoseWithVelocity_PoseWGS84 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PoseWithVelocity_PoseWGS84DefaultTypeInternal _PoseWithVelocity_PoseWGS84_default_instance_;
PROTOBUF_CONSTEXPR PoseWithVelocity_PoseCartesian::PoseWithVelocity_PoseCartesian(
    ::_pbi::ConstantInitialized)
  : x_(0)
  , y_(0)
  , yaw_(0)
  , varx_(0)
  , vary_(0)
  , covxy_(0)
  , varyaw_(0)
  , valid_(false){}
struct PoseWithVelocity_PoseCartesianDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PoseWithVelocity_PoseCartesianDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PoseWithVelocity_PoseCartesianDefaultTypeInternal() {}
  union {
    PoseWithVelocity_PoseCartesian _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PoseWithVelocity_PoseCartesianDefaultTypeInternal _PoseWithVelocity_PoseCartesian_default_instance_;
PROTOBUF_CONSTEXPR PoseWithVelocity_Velocity::PoseWithVelocity_Velocity(
    ::_pbi::ConstantInitialized)
  : vx_(0)
  , vy_(0)
  , yawrate_(0)
  , varvx_(0)
  , varvy_(0)
  , covvxvy_(0)
  , varyawrate_(0)
  , valid_(false){}
struct PoseWithVelocity_VelocityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PoseWithVelocity_VelocityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PoseWithVelocity_VelocityDefaultTypeInternal() {}
  union {
    PoseWithVelocity_Velocity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PoseWithVelocity_VelocityDefaultTypeInternal _PoseWithVelocity_Velocity_default_instance_;
PROTOBUF_CONSTEXPR PoseWithVelocity::PoseWithVelocity(
    ::_pbi::ConstantInitialized)
  : referenceframe_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , header_(nullptr)
  , posewgs84_(nullptr)
  , posecartesian_(nullptr)
  , velocity_(nullptr)
  , confidence_(0)
  , signalstatus_(0)
{}
struct PoseWithVelocityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PoseWithVelocityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PoseWithVelocityDefaultTypeInternal() {}
  union {
    PoseWithVelocity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PoseWithVelocityDefaultTypeInternal _PoseWithVelocity_default_instance_;
}  // namespace PDK
}  // namespace pb
static ::_pb::Metadata file_level_metadata_pdk_5fPoseWithVelocity_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_pdk_5fPoseWithVelocity_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_pdk_5fPoseWithVelocity_2eproto = nullptr;

const uint32_t TableStruct_pdk_5fPoseWithVelocity_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseWGS84, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseWGS84, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseWGS84, latitude_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseWGS84, longitude_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseWGS84, altitude_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseWGS84, heading_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseWGS84, varlat_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseWGS84, varlong_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseWGS84, covlatlong_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseWGS84, varaltitude_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseWGS84, varheading_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseWGS84, valid_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseCartesian, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseCartesian, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseCartesian, x_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseCartesian, y_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseCartesian, yaw_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseCartesian, varx_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseCartesian, vary_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseCartesian, covxy_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseCartesian, varyaw_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_PoseCartesian, valid_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_Velocity, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_Velocity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_Velocity, vx_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_Velocity, vy_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_Velocity, yawrate_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_Velocity, varvx_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_Velocity, varvy_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_Velocity, covvxvy_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_Velocity, varyawrate_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity_Velocity, valid_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity, header_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity, referenceframe_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity, posewgs84_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity, posecartesian_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity, velocity_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity, confidence_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PoseWithVelocity, signalstatus_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, -1, sizeof(::pb::PDK::PoseWithVelocity_PoseWGS84)},
  { 26, 40, -1, sizeof(::pb::PDK::PoseWithVelocity_PoseCartesian)},
  { 48, 62, -1, sizeof(::pb::PDK::PoseWithVelocity_Velocity)},
  { 70, 83, -1, sizeof(::pb::PDK::PoseWithVelocity)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::pb::PDK::_PoseWithVelocity_PoseWGS84_default_instance_._instance,
  &::pb::PDK::_PoseWithVelocity_PoseCartesian_default_instance_._instance,
  &::pb::PDK::_PoseWithVelocity_Velocity_default_instance_._instance,
  &::pb::PDK::_PoseWithVelocity_default_instance_._instance,
};

const char descriptor_table_protodef_pdk_5fPoseWithVelocity_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032pdk_PoseWithVelocity.proto\022\006pb.PDK\032\023pd"
  "k_MsgHeader.proto\"\377\006\n\020PoseWithVelocity\022!"
  "\n\006header\030\001 \001(\0132\021.pb.PDK.MsgHeader\022\026\n\016ref"
  "erenceFrame\030\002 \001(\t\0225\n\tposeWGS84\030\003 \001(\0132\".p"
  "b.PDK.PoseWithVelocity.PoseWGS84\022=\n\rpose"
  "Cartesian\030\004 \001(\0132&.pb.PDK.PoseWithVelocit"
  "y.PoseCartesian\0223\n\010velocity\030\005 \001(\0132!.pb.P"
  "DK.PoseWithVelocity.Velocity\022\022\n\nconfiden"
  "ce\030\006 \001(\002\022;\n\014signalStatus\030\007 \001(\0162%.pb.PDK."
  "PoseWithVelocity.SignalStatus\032\300\001\n\tPoseWG"
  "S84\022\020\n\010latitude\030\001 \001(\001\022\021\n\tlongitude\030\002 \001(\001"
  "\022\020\n\010altitude\030\003 \001(\002\022\017\n\007heading\030\004 \001(\002\022\016\n\006v"
  "arLat\030\005 \001(\002\022\017\n\007varLong\030\006 \001(\002\022\022\n\ncovLatLo"
  "ng\030\007 \001(\002\022\023\n\013varAltitude\030\010 \001(\002\022\022\n\nvarHead"
  "ing\030\t \001(\002\022\r\n\005valid\030\n \001(\010\032|\n\rPoseCartesia"
  "n\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\013\n\003yaw\030\003 \001(\002\022\014\n\004"
  "varX\030\005 \001(\002\022\014\n\004varY\030\006 \001(\002\022\r\n\005covXY\030\007 \001(\002\022"
  "\016\n\006varYaw\030\t \001(\002\022\r\n\005valid\030\n \001(\010\032\205\001\n\010Veloc"
  "ity\022\n\n\002vx\030\001 \001(\002\022\n\n\002vy\030\002 \001(\002\022\017\n\007yawRate\030\003"
  " \001(\002\022\r\n\005varVx\030\004 \001(\002\022\r\n\005varVy\030\005 \001(\002\022\017\n\007co"
  "vVxVy\030\006 \001(\002\022\022\n\nvarYawRate\030\007 \001(\002\022\r\n\005valid"
  "\030\010 \001(\010\"k\n\014SignalStatus\022\022\n\016STATUS_UNKNOWN"
  "\020\000\022\017\n\013STATUS_INIT\020\001\022\r\n\tSTATUS_OK\020\002\022\023\n\017ST"
  "ATUS_FALLBACK\020\003\022\022\n\016STATUS_INVALID\020\004"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_pdk_5fPoseWithVelocity_2eproto_deps[1] = {
  &::descriptor_table_pdk_5fMsgHeader_2eproto,
};
static ::_pbi::once_flag descriptor_table_pdk_5fPoseWithVelocity_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_pdk_5fPoseWithVelocity_2eproto = {
    false, false, 955, descriptor_table_protodef_pdk_5fPoseWithVelocity_2eproto,
    "pdk_PoseWithVelocity.proto",
    &descriptor_table_pdk_5fPoseWithVelocity_2eproto_once, descriptor_table_pdk_5fPoseWithVelocity_2eproto_deps, 1, 4,
    schemas, file_default_instances, TableStruct_pdk_5fPoseWithVelocity_2eproto::offsets,
    file_level_metadata_pdk_5fPoseWithVelocity_2eproto, file_level_enum_descriptors_pdk_5fPoseWithVelocity_2eproto,
    file_level_service_descriptors_pdk_5fPoseWithVelocity_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_pdk_5fPoseWithVelocity_2eproto_getter() {
  return &descriptor_table_pdk_5fPoseWithVelocity_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_pdk_5fPoseWithVelocity_2eproto(&descriptor_table_pdk_5fPoseWithVelocity_2eproto);
namespace pb {
namespace PDK {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PoseWithVelocity_SignalStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pdk_5fPoseWithVelocity_2eproto);
  return file_level_enum_descriptors_pdk_5fPoseWithVelocity_2eproto[0];
}
bool PoseWithVelocity_SignalStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PoseWithVelocity_SignalStatus PoseWithVelocity::STATUS_UNKNOWN;
constexpr PoseWithVelocity_SignalStatus PoseWithVelocity::STATUS_INIT;
constexpr PoseWithVelocity_SignalStatus PoseWithVelocity::STATUS_OK;
constexpr PoseWithVelocity_SignalStatus PoseWithVelocity::STATUS_FALLBACK;
constexpr PoseWithVelocity_SignalStatus PoseWithVelocity::STATUS_INVALID;
constexpr PoseWithVelocity_SignalStatus PoseWithVelocity::SignalStatus_MIN;
constexpr PoseWithVelocity_SignalStatus PoseWithVelocity::SignalStatus_MAX;
constexpr int PoseWithVelocity::SignalStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class PoseWithVelocity_PoseWGS84::_Internal {
 public:
  using HasBits = decltype(std::declval<PoseWithVelocity_PoseWGS84>()._has_bits_);
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_altitude(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_varlat(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_varlong(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_covlatlong(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_varaltitude(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_varheading(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

PoseWithVelocity_PoseWGS84::PoseWithVelocity_PoseWGS84(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:pb.PDK.PoseWithVelocity.PoseWGS84)
}
PoseWithVelocity_PoseWGS84::PoseWithVelocity_PoseWGS84(const PoseWithVelocity_PoseWGS84& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&valid_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(valid_));
  // @@protoc_insertion_point(copy_constructor:pb.PDK.PoseWithVelocity.PoseWGS84)
}

inline void PoseWithVelocity_PoseWGS84::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&latitude_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&valid_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(valid_));
}

PoseWithVelocity_PoseWGS84::~PoseWithVelocity_PoseWGS84() {
  // @@protoc_insertion_point(destructor:pb.PDK.PoseWithVelocity.PoseWGS84)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PoseWithVelocity_PoseWGS84::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PoseWithVelocity_PoseWGS84::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PoseWithVelocity_PoseWGS84::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.PDK.PoseWithVelocity.PoseWGS84)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&latitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&varaltitude_) -
        reinterpret_cast<char*>(&latitude_)) + sizeof(varaltitude_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&varheading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&valid_) -
        reinterpret_cast<char*>(&varheading_)) + sizeof(valid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoseWithVelocity_PoseWGS84::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_latitude(&has_bits);
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_longitude(&has_bits);
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional float altitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_altitude(&has_bits);
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float heading = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_heading(&has_bits);
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float varLat = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_varlat(&has_bits);
          varlat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float varLong = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_varlong(&has_bits);
          varlong_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float covLatLong = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_covlatlong(&has_bits);
          covlatlong_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float varAltitude = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_varaltitude(&has_bits);
          varaltitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float varHeading = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_varheading(&has_bits);
          varheading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool valid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_valid(&has_bits);
          valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PoseWithVelocity_PoseWGS84::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PDK.PoseWithVelocity.PoseWGS84)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double latitude = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude(), target);
  }

  // optional double longitude = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude(), target);
  }

  // optional float altitude = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_altitude(), target);
  }

  // optional float heading = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_heading(), target);
  }

  // optional float varLat = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_varlat(), target);
  }

  // optional float varLong = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_varlong(), target);
  }

  // optional float covLatLong = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_covlatlong(), target);
  }

  // optional float varAltitude = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_varaltitude(), target);
  }

  // optional float varHeading = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_varheading(), target);
  }

  // optional bool valid = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_valid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PDK.PoseWithVelocity.PoseWGS84)
  return target;
}

size_t PoseWithVelocity_PoseWGS84::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.PDK.PoseWithVelocity.PoseWGS84)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double latitude = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double longitude = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional float altitude = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float heading = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float varLat = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float varLong = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float covLatLong = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float varAltitude = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional float varHeading = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional bool valid = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PoseWithVelocity_PoseWGS84::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PoseWithVelocity_PoseWGS84::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PoseWithVelocity_PoseWGS84::GetClassData() const { return &_class_data_; }

void PoseWithVelocity_PoseWGS84::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PoseWithVelocity_PoseWGS84 *>(to)->MergeFrom(
      static_cast<const PoseWithVelocity_PoseWGS84 &>(from));
}


void PoseWithVelocity_PoseWGS84::MergeFrom(const PoseWithVelocity_PoseWGS84& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.PDK.PoseWithVelocity.PoseWGS84)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      altitude_ = from.altitude_;
    }
    if (cached_has_bits & 0x00000008u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000010u) {
      varlat_ = from.varlat_;
    }
    if (cached_has_bits & 0x00000020u) {
      varlong_ = from.varlong_;
    }
    if (cached_has_bits & 0x00000040u) {
      covlatlong_ = from.covlatlong_;
    }
    if (cached_has_bits & 0x00000080u) {
      varaltitude_ = from.varaltitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      varheading_ = from.varheading_;
    }
    if (cached_has_bits & 0x00000200u) {
      valid_ = from.valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PoseWithVelocity_PoseWGS84::CopyFrom(const PoseWithVelocity_PoseWGS84& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.PDK.PoseWithVelocity.PoseWGS84)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseWithVelocity_PoseWGS84::IsInitialized() const {
  return true;
}

void PoseWithVelocity_PoseWGS84::InternalSwap(PoseWithVelocity_PoseWGS84* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PoseWithVelocity_PoseWGS84, valid_)
      + sizeof(PoseWithVelocity_PoseWGS84::valid_)
      - PROTOBUF_FIELD_OFFSET(PoseWithVelocity_PoseWGS84, latitude_)>(
          reinterpret_cast<char*>(&latitude_),
          reinterpret_cast<char*>(&other->latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PoseWithVelocity_PoseWGS84::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pdk_5fPoseWithVelocity_2eproto_getter, &descriptor_table_pdk_5fPoseWithVelocity_2eproto_once,
      file_level_metadata_pdk_5fPoseWithVelocity_2eproto[0]);
}

// ===================================================================

class PoseWithVelocity_PoseCartesian::_Internal {
 public:
  using HasBits = decltype(std::declval<PoseWithVelocity_PoseCartesian>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_yaw(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_varx(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_vary(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_covxy(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_varyaw(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

PoseWithVelocity_PoseCartesian::PoseWithVelocity_PoseCartesian(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:pb.PDK.PoseWithVelocity.PoseCartesian)
}
PoseWithVelocity_PoseCartesian::PoseWithVelocity_PoseCartesian(const PoseWithVelocity_PoseCartesian& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&valid_) -
    reinterpret_cast<char*>(&x_)) + sizeof(valid_));
  // @@protoc_insertion_point(copy_constructor:pb.PDK.PoseWithVelocity.PoseCartesian)
}

inline void PoseWithVelocity_PoseCartesian::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&valid_) -
    reinterpret_cast<char*>(&x_)) + sizeof(valid_));
}

PoseWithVelocity_PoseCartesian::~PoseWithVelocity_PoseCartesian() {
  // @@protoc_insertion_point(destructor:pb.PDK.PoseWithVelocity.PoseCartesian)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PoseWithVelocity_PoseCartesian::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PoseWithVelocity_PoseCartesian::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PoseWithVelocity_PoseCartesian::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.PDK.PoseWithVelocity.PoseCartesian)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&valid_) -
        reinterpret_cast<char*>(&x_)) + sizeof(valid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoseWithVelocity_PoseCartesian::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional float yaw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_yaw(&has_bits);
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float varX = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_varx(&has_bits);
          varx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float varY = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_vary(&has_bits);
          vary_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float covXY = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_covxy(&has_bits);
          covxy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float varYaw = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_varyaw(&has_bits);
          varyaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool valid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_valid(&has_bits);
          valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PoseWithVelocity_PoseCartesian::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PDK.PoseWithVelocity.PoseCartesian)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // optional float yaw = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_yaw(), target);
  }

  // optional float varX = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_varx(), target);
  }

  // optional float varY = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_vary(), target);
  }

  // optional float covXY = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_covxy(), target);
  }

  // optional float varYaw = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_varyaw(), target);
  }

  // optional bool valid = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_valid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PDK.PoseWithVelocity.PoseCartesian)
  return target;
}

size_t PoseWithVelocity_PoseCartesian::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.PDK.PoseWithVelocity.PoseCartesian)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional float yaw = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float varX = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float varY = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float covXY = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float varYaw = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional bool valid = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PoseWithVelocity_PoseCartesian::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PoseWithVelocity_PoseCartesian::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PoseWithVelocity_PoseCartesian::GetClassData() const { return &_class_data_; }

void PoseWithVelocity_PoseCartesian::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PoseWithVelocity_PoseCartesian *>(to)->MergeFrom(
      static_cast<const PoseWithVelocity_PoseCartesian &>(from));
}


void PoseWithVelocity_PoseCartesian::MergeFrom(const PoseWithVelocity_PoseCartesian& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.PDK.PoseWithVelocity.PoseCartesian)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      yaw_ = from.yaw_;
    }
    if (cached_has_bits & 0x00000008u) {
      varx_ = from.varx_;
    }
    if (cached_has_bits & 0x00000010u) {
      vary_ = from.vary_;
    }
    if (cached_has_bits & 0x00000020u) {
      covxy_ = from.covxy_;
    }
    if (cached_has_bits & 0x00000040u) {
      varyaw_ = from.varyaw_;
    }
    if (cached_has_bits & 0x00000080u) {
      valid_ = from.valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PoseWithVelocity_PoseCartesian::CopyFrom(const PoseWithVelocity_PoseCartesian& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.PDK.PoseWithVelocity.PoseCartesian)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseWithVelocity_PoseCartesian::IsInitialized() const {
  return true;
}

void PoseWithVelocity_PoseCartesian::InternalSwap(PoseWithVelocity_PoseCartesian* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PoseWithVelocity_PoseCartesian, valid_)
      + sizeof(PoseWithVelocity_PoseCartesian::valid_)
      - PROTOBUF_FIELD_OFFSET(PoseWithVelocity_PoseCartesian, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PoseWithVelocity_PoseCartesian::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pdk_5fPoseWithVelocity_2eproto_getter, &descriptor_table_pdk_5fPoseWithVelocity_2eproto_once,
      file_level_metadata_pdk_5fPoseWithVelocity_2eproto[1]);
}

// ===================================================================

class PoseWithVelocity_Velocity::_Internal {
 public:
  using HasBits = decltype(std::declval<PoseWithVelocity_Velocity>()._has_bits_);
  static void set_has_vx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_yawrate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_varvx(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_varvy(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_covvxvy(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_varyawrate(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

PoseWithVelocity_Velocity::PoseWithVelocity_Velocity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:pb.PDK.PoseWithVelocity.Velocity)
}
PoseWithVelocity_Velocity::PoseWithVelocity_Velocity(const PoseWithVelocity_Velocity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&vx_, &from.vx_,
    static_cast<size_t>(reinterpret_cast<char*>(&valid_) -
    reinterpret_cast<char*>(&vx_)) + sizeof(valid_));
  // @@protoc_insertion_point(copy_constructor:pb.PDK.PoseWithVelocity.Velocity)
}

inline void PoseWithVelocity_Velocity::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&valid_) -
    reinterpret_cast<char*>(&vx_)) + sizeof(valid_));
}

PoseWithVelocity_Velocity::~PoseWithVelocity_Velocity() {
  // @@protoc_insertion_point(destructor:pb.PDK.PoseWithVelocity.Velocity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PoseWithVelocity_Velocity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PoseWithVelocity_Velocity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PoseWithVelocity_Velocity::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.PDK.PoseWithVelocity.Velocity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&vx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&valid_) -
        reinterpret_cast<char*>(&vx_)) + sizeof(valid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoseWithVelocity_Velocity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float vx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_vx(&has_bits);
          vx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float vy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_vy(&has_bits);
          vy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float yawRate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_yawrate(&has_bits);
          yawrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float varVx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_varvx(&has_bits);
          varvx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float varVy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_varvy(&has_bits);
          varvy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float covVxVy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_covvxvy(&has_bits);
          covvxvy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float varYawRate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_varyawrate(&has_bits);
          varyawrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool valid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_valid(&has_bits);
          valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PoseWithVelocity_Velocity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PDK.PoseWithVelocity.Velocity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float vx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_vx(), target);
  }

  // optional float vy = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_vy(), target);
  }

  // optional float yawRate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_yawrate(), target);
  }

  // optional float varVx = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_varvx(), target);
  }

  // optional float varVy = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_varvy(), target);
  }

  // optional float covVxVy = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_covvxvy(), target);
  }

  // optional float varYawRate = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_varyawrate(), target);
  }

  // optional bool valid = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_valid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PDK.PoseWithVelocity.Velocity)
  return target;
}

size_t PoseWithVelocity_Velocity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.PDK.PoseWithVelocity.Velocity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float vx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float vy = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float yawRate = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float varVx = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float varVy = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float covVxVy = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float varYawRate = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional bool valid = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PoseWithVelocity_Velocity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PoseWithVelocity_Velocity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PoseWithVelocity_Velocity::GetClassData() const { return &_class_data_; }

void PoseWithVelocity_Velocity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PoseWithVelocity_Velocity *>(to)->MergeFrom(
      static_cast<const PoseWithVelocity_Velocity &>(from));
}


void PoseWithVelocity_Velocity::MergeFrom(const PoseWithVelocity_Velocity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.PDK.PoseWithVelocity.Velocity)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      vx_ = from.vx_;
    }
    if (cached_has_bits & 0x00000002u) {
      vy_ = from.vy_;
    }
    if (cached_has_bits & 0x00000004u) {
      yawrate_ = from.yawrate_;
    }
    if (cached_has_bits & 0x00000008u) {
      varvx_ = from.varvx_;
    }
    if (cached_has_bits & 0x00000010u) {
      varvy_ = from.varvy_;
    }
    if (cached_has_bits & 0x00000020u) {
      covvxvy_ = from.covvxvy_;
    }
    if (cached_has_bits & 0x00000040u) {
      varyawrate_ = from.varyawrate_;
    }
    if (cached_has_bits & 0x00000080u) {
      valid_ = from.valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PoseWithVelocity_Velocity::CopyFrom(const PoseWithVelocity_Velocity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.PDK.PoseWithVelocity.Velocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseWithVelocity_Velocity::IsInitialized() const {
  return true;
}

void PoseWithVelocity_Velocity::InternalSwap(PoseWithVelocity_Velocity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PoseWithVelocity_Velocity, valid_)
      + sizeof(PoseWithVelocity_Velocity::valid_)
      - PROTOBUF_FIELD_OFFSET(PoseWithVelocity_Velocity, vx_)>(
          reinterpret_cast<char*>(&vx_),
          reinterpret_cast<char*>(&other->vx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PoseWithVelocity_Velocity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pdk_5fPoseWithVelocity_2eproto_getter, &descriptor_table_pdk_5fPoseWithVelocity_2eproto_once,
      file_level_metadata_pdk_5fPoseWithVelocity_2eproto[2]);
}

// ===================================================================

class PoseWithVelocity::_Internal {
 public:
  using HasBits = decltype(std::declval<PoseWithVelocity>()._has_bits_);
  static const ::pb::PDK::MsgHeader& header(const PoseWithVelocity* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_referenceframe(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::pb::PDK::PoseWithVelocity_PoseWGS84& posewgs84(const PoseWithVelocity* msg);
  static void set_has_posewgs84(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::pb::PDK::PoseWithVelocity_PoseCartesian& posecartesian(const PoseWithVelocity* msg);
  static void set_has_posecartesian(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::pb::PDK::PoseWithVelocity_Velocity& velocity(const PoseWithVelocity* msg);
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_signalstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::pb::PDK::MsgHeader&
PoseWithVelocity::_Internal::header(const PoseWithVelocity* msg) {
  return *msg->header_;
}
const ::pb::PDK::PoseWithVelocity_PoseWGS84&
PoseWithVelocity::_Internal::posewgs84(const PoseWithVelocity* msg) {
  return *msg->posewgs84_;
}
const ::pb::PDK::PoseWithVelocity_PoseCartesian&
PoseWithVelocity::_Internal::posecartesian(const PoseWithVelocity* msg) {
  return *msg->posecartesian_;
}
const ::pb::PDK::PoseWithVelocity_Velocity&
PoseWithVelocity::_Internal::velocity(const PoseWithVelocity* msg) {
  return *msg->velocity_;
}
void PoseWithVelocity::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
PoseWithVelocity::PoseWithVelocity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:pb.PDK.PoseWithVelocity)
}
PoseWithVelocity::PoseWithVelocity(const PoseWithVelocity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  referenceframe_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    referenceframe_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_referenceframe()) {
    referenceframe_.Set(from._internal_referenceframe(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::pb::PDK::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_posewgs84()) {
    posewgs84_ = new ::pb::PDK::PoseWithVelocity_PoseWGS84(*from.posewgs84_);
  } else {
    posewgs84_ = nullptr;
  }
  if (from._internal_has_posecartesian()) {
    posecartesian_ = new ::pb::PDK::PoseWithVelocity_PoseCartesian(*from.posecartesian_);
  } else {
    posecartesian_ = nullptr;
  }
  if (from._internal_has_velocity()) {
    velocity_ = new ::pb::PDK::PoseWithVelocity_Velocity(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  ::memcpy(&confidence_, &from.confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&signalstatus_) -
    reinterpret_cast<char*>(&confidence_)) + sizeof(signalstatus_));
  // @@protoc_insertion_point(copy_constructor:pb.PDK.PoseWithVelocity)
}

inline void PoseWithVelocity::SharedCtor() {
referenceframe_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  referenceframe_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&signalstatus_) -
    reinterpret_cast<char*>(&header_)) + sizeof(signalstatus_));
}

PoseWithVelocity::~PoseWithVelocity() {
  // @@protoc_insertion_point(destructor:pb.PDK.PoseWithVelocity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PoseWithVelocity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  referenceframe_.Destroy();
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete posewgs84_;
  if (this != internal_default_instance()) delete posecartesian_;
  if (this != internal_default_instance()) delete velocity_;
}

void PoseWithVelocity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PoseWithVelocity::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.PDK.PoseWithVelocity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      referenceframe_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(posewgs84_ != nullptr);
      posewgs84_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(posecartesian_ != nullptr);
      posecartesian_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(velocity_ != nullptr);
      velocity_->Clear();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&confidence_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&signalstatus_) -
        reinterpret_cast<char*>(&confidence_)) + sizeof(signalstatus_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoseWithVelocity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pb.PDK.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string referenceFrame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_referenceframe();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "pb.PDK.PoseWithVelocity.referenceFrame");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .pb.PDK.PoseWithVelocity.PoseWGS84 poseWGS84 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_posewgs84(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pb.PDK.PoseWithVelocity.PoseCartesian poseCartesian = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_posecartesian(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pb.PDK.PoseWithVelocity.Velocity velocity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float confidence = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_confidence(&has_bits);
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .pb.PDK.PoseWithVelocity.SignalStatus signalStatus = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::PDK::PoseWithVelocity_SignalStatus_IsValid(val))) {
            _internal_set_signalstatus(static_cast<::pb::PDK::PoseWithVelocity_SignalStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PoseWithVelocity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PDK.PoseWithVelocity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.PDK.MsgHeader header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional string referenceFrame = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_referenceframe().data(), static_cast<int>(this->_internal_referenceframe().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.PDK.PoseWithVelocity.referenceFrame");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_referenceframe(), target);
  }

  // optional .pb.PDK.PoseWithVelocity.PoseWGS84 poseWGS84 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::posewgs84(this),
        _Internal::posewgs84(this).GetCachedSize(), target, stream);
  }

  // optional .pb.PDK.PoseWithVelocity.PoseCartesian poseCartesian = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::posecartesian(this),
        _Internal::posecartesian(this).GetCachedSize(), target, stream);
  }

  // optional .pb.PDK.PoseWithVelocity.Velocity velocity = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::velocity(this),
        _Internal::velocity(this).GetCachedSize(), target, stream);
  }

  // optional float confidence = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_confidence(), target);
  }

  // optional .pb.PDK.PoseWithVelocity.SignalStatus signalStatus = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_signalstatus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PDK.PoseWithVelocity)
  return target;
}

size_t PoseWithVelocity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.PDK.PoseWithVelocity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string referenceFrame = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_referenceframe());
    }

    // optional .pb.PDK.MsgHeader header = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .pb.PDK.PoseWithVelocity.PoseWGS84 poseWGS84 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *posewgs84_);
    }

    // optional .pb.PDK.PoseWithVelocity.PoseCartesian poseCartesian = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *posecartesian_);
    }

    // optional .pb.PDK.PoseWithVelocity.Velocity velocity = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *velocity_);
    }

    // optional float confidence = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional .pb.PDK.PoseWithVelocity.SignalStatus signalStatus = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_signalstatus());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PoseWithVelocity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PoseWithVelocity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PoseWithVelocity::GetClassData() const { return &_class_data_; }

void PoseWithVelocity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PoseWithVelocity *>(to)->MergeFrom(
      static_cast<const PoseWithVelocity &>(from));
}


void PoseWithVelocity::MergeFrom(const PoseWithVelocity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.PDK.PoseWithVelocity)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_referenceframe(from._internal_referenceframe());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header()->::pb::PDK::MsgHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_posewgs84()->::pb::PDK::PoseWithVelocity_PoseWGS84::MergeFrom(from._internal_posewgs84());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_posecartesian()->::pb::PDK::PoseWithVelocity_PoseCartesian::MergeFrom(from._internal_posecartesian());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_velocity()->::pb::PDK::PoseWithVelocity_Velocity::MergeFrom(from._internal_velocity());
    }
    if (cached_has_bits & 0x00000020u) {
      confidence_ = from.confidence_;
    }
    if (cached_has_bits & 0x00000040u) {
      signalstatus_ = from.signalstatus_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PoseWithVelocity::CopyFrom(const PoseWithVelocity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.PDK.PoseWithVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseWithVelocity::IsInitialized() const {
  return true;
}

void PoseWithVelocity::InternalSwap(PoseWithVelocity* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &referenceframe_, lhs_arena,
      &other->referenceframe_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PoseWithVelocity, signalstatus_)
      + sizeof(PoseWithVelocity::signalstatus_)
      - PROTOBUF_FIELD_OFFSET(PoseWithVelocity, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PoseWithVelocity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pdk_5fPoseWithVelocity_2eproto_getter, &descriptor_table_pdk_5fPoseWithVelocity_2eproto_once,
      file_level_metadata_pdk_5fPoseWithVelocity_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace PDK
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::PDK::PoseWithVelocity_PoseWGS84*
Arena::CreateMaybeMessage< ::pb::PDK::PoseWithVelocity_PoseWGS84 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::PDK::PoseWithVelocity_PoseWGS84 >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::PDK::PoseWithVelocity_PoseCartesian*
Arena::CreateMaybeMessage< ::pb::PDK::PoseWithVelocity_PoseCartesian >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::PDK::PoseWithVelocity_PoseCartesian >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::PDK::PoseWithVelocity_Velocity*
Arena::CreateMaybeMessage< ::pb::PDK::PoseWithVelocity_Velocity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::PDK::PoseWithVelocity_Velocity >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::PDK::PoseWithVelocity*
Arena::CreateMaybeMessage< ::pb::PDK::PoseWithVelocity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::PDK::PoseWithVelocity >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
