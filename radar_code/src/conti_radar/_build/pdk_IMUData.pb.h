// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pdk_IMUData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pdk_5fIMUData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pdk_5fIMUData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "pdk_MsgHeader.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pdk_5fIMUData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pdk_5fIMUData_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pdk_5fIMUData_2eproto;
namespace pb {
namespace PDK {
class IMUData;
struct IMUDataDefaultTypeInternal;
extern IMUDataDefaultTypeInternal _IMUData_default_instance_;
class IMUData_SignalStates;
struct IMUData_SignalStatesDefaultTypeInternal;
extern IMUData_SignalStatesDefaultTypeInternal _IMUData_SignalStates_default_instance_;
class IMUData_Signals;
struct IMUData_SignalsDefaultTypeInternal;
extern IMUData_SignalsDefaultTypeInternal _IMUData_Signals_default_instance_;
}  // namespace PDK
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::PDK::IMUData* Arena::CreateMaybeMessage<::pb::PDK::IMUData>(Arena*);
template<> ::pb::PDK::IMUData_SignalStates* Arena::CreateMaybeMessage<::pb::PDK::IMUData_SignalStates>(Arena*);
template<> ::pb::PDK::IMUData_Signals* Arena::CreateMaybeMessage<::pb::PDK::IMUData_Signals>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace PDK {

enum IMUData_SignalState : int {
  IMUData_SignalState_IMU_SIGNAL_INVALID = 0,
  IMUData_SignalState_IMU_SIGNAL_VALID = 1
};
bool IMUData_SignalState_IsValid(int value);
constexpr IMUData_SignalState IMUData_SignalState_SignalState_MIN = IMUData_SignalState_IMU_SIGNAL_INVALID;
constexpr IMUData_SignalState IMUData_SignalState_SignalState_MAX = IMUData_SignalState_IMU_SIGNAL_VALID;
constexpr int IMUData_SignalState_SignalState_ARRAYSIZE = IMUData_SignalState_SignalState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IMUData_SignalState_descriptor();
template<typename T>
inline const std::string& IMUData_SignalState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IMUData_SignalState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IMUData_SignalState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IMUData_SignalState_descriptor(), enum_t_value);
}
inline bool IMUData_SignalState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IMUData_SignalState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IMUData_SignalState>(
    IMUData_SignalState_descriptor(), name, value);
}
enum IMUData_SensorType : int {
  IMUData_SensorType_SC23S = 0,
  IMUData_SensorType_SC13S = 1,
  IMUData_SensorType_UNKNOWN = 255
};
bool IMUData_SensorType_IsValid(int value);
constexpr IMUData_SensorType IMUData_SensorType_SensorType_MIN = IMUData_SensorType_SC23S;
constexpr IMUData_SensorType IMUData_SensorType_SensorType_MAX = IMUData_SensorType_UNKNOWN;
constexpr int IMUData_SensorType_SensorType_ARRAYSIZE = IMUData_SensorType_SensorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IMUData_SensorType_descriptor();
template<typename T>
inline const std::string& IMUData_SensorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IMUData_SensorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IMUData_SensorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IMUData_SensorType_descriptor(), enum_t_value);
}
inline bool IMUData_SensorType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IMUData_SensorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IMUData_SensorType>(
    IMUData_SensorType_descriptor(), name, value);
}
// ===================================================================

class IMUData_SignalStates final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.PDK.IMUData.SignalStates) */ {
 public:
  inline IMUData_SignalStates() : IMUData_SignalStates(nullptr) {}
  ~IMUData_SignalStates() override;
  explicit PROTOBUF_CONSTEXPR IMUData_SignalStates(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMUData_SignalStates(const IMUData_SignalStates& from);
  IMUData_SignalStates(IMUData_SignalStates&& from) noexcept
    : IMUData_SignalStates() {
    *this = ::std::move(from);
  }

  inline IMUData_SignalStates& operator=(const IMUData_SignalStates& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMUData_SignalStates& operator=(IMUData_SignalStates&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMUData_SignalStates& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMUData_SignalStates* internal_default_instance() {
    return reinterpret_cast<const IMUData_SignalStates*>(
               &_IMUData_SignalStates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IMUData_SignalStates& a, IMUData_SignalStates& b) {
    a.Swap(&b);
  }
  inline void Swap(IMUData_SignalStates* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMUData_SignalStates* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IMUData_SignalStates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IMUData_SignalStates>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMUData_SignalStates& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMUData_SignalStates& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMUData_SignalStates* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.PDK.IMUData.SignalStates";
  }
  protected:
  explicit IMUData_SignalStates(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollRateFieldNumber = 1,
    kPitchRateFieldNumber = 2,
    kYawRateFieldNumber = 3,
    kLongAccFieldNumber = 4,
    kVertAccFieldNumber = 5,
    kLatAccFieldNumber = 6,
  };
  // optional .pb.PDK.IMUData.SignalState rollRate = 1 [default = IMU_SIGNAL_INVALID];
  bool has_rollrate() const;
  private:
  bool _internal_has_rollrate() const;
  public:
  void clear_rollrate();
  ::pb::PDK::IMUData_SignalState rollrate() const;
  void set_rollrate(::pb::PDK::IMUData_SignalState value);
  private:
  ::pb::PDK::IMUData_SignalState _internal_rollrate() const;
  void _internal_set_rollrate(::pb::PDK::IMUData_SignalState value);
  public:

  // optional .pb.PDK.IMUData.SignalState pitchRate = 2 [default = IMU_SIGNAL_INVALID];
  bool has_pitchrate() const;
  private:
  bool _internal_has_pitchrate() const;
  public:
  void clear_pitchrate();
  ::pb::PDK::IMUData_SignalState pitchrate() const;
  void set_pitchrate(::pb::PDK::IMUData_SignalState value);
  private:
  ::pb::PDK::IMUData_SignalState _internal_pitchrate() const;
  void _internal_set_pitchrate(::pb::PDK::IMUData_SignalState value);
  public:

  // optional .pb.PDK.IMUData.SignalState yawRate = 3 [default = IMU_SIGNAL_INVALID];
  bool has_yawrate() const;
  private:
  bool _internal_has_yawrate() const;
  public:
  void clear_yawrate();
  ::pb::PDK::IMUData_SignalState yawrate() const;
  void set_yawrate(::pb::PDK::IMUData_SignalState value);
  private:
  ::pb::PDK::IMUData_SignalState _internal_yawrate() const;
  void _internal_set_yawrate(::pb::PDK::IMUData_SignalState value);
  public:

  // optional .pb.PDK.IMUData.SignalState longAcc = 4 [default = IMU_SIGNAL_INVALID];
  bool has_longacc() const;
  private:
  bool _internal_has_longacc() const;
  public:
  void clear_longacc();
  ::pb::PDK::IMUData_SignalState longacc() const;
  void set_longacc(::pb::PDK::IMUData_SignalState value);
  private:
  ::pb::PDK::IMUData_SignalState _internal_longacc() const;
  void _internal_set_longacc(::pb::PDK::IMUData_SignalState value);
  public:

  // optional .pb.PDK.IMUData.SignalState vertAcc = 5 [default = IMU_SIGNAL_INVALID];
  bool has_vertacc() const;
  private:
  bool _internal_has_vertacc() const;
  public:
  void clear_vertacc();
  ::pb::PDK::IMUData_SignalState vertacc() const;
  void set_vertacc(::pb::PDK::IMUData_SignalState value);
  private:
  ::pb::PDK::IMUData_SignalState _internal_vertacc() const;
  void _internal_set_vertacc(::pb::PDK::IMUData_SignalState value);
  public:

  // optional .pb.PDK.IMUData.SignalState latAcc = 6 [default = IMU_SIGNAL_INVALID];
  bool has_latacc() const;
  private:
  bool _internal_has_latacc() const;
  public:
  void clear_latacc();
  ::pb::PDK::IMUData_SignalState latacc() const;
  void set_latacc(::pb::PDK::IMUData_SignalState value);
  private:
  ::pb::PDK::IMUData_SignalState _internal_latacc() const;
  void _internal_set_latacc(::pb::PDK::IMUData_SignalState value);
  public:

  // @@protoc_insertion_point(class_scope:pb.PDK.IMUData.SignalStates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int rollrate_;
  int pitchrate_;
  int yawrate_;
  int longacc_;
  int vertacc_;
  int latacc_;
  friend struct ::TableStruct_pdk_5fIMUData_2eproto;
};
// -------------------------------------------------------------------

class IMUData_Signals final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.PDK.IMUData.Signals) */ {
 public:
  inline IMUData_Signals() : IMUData_Signals(nullptr) {}
  ~IMUData_Signals() override;
  explicit PROTOBUF_CONSTEXPR IMUData_Signals(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMUData_Signals(const IMUData_Signals& from);
  IMUData_Signals(IMUData_Signals&& from) noexcept
    : IMUData_Signals() {
    *this = ::std::move(from);
  }

  inline IMUData_Signals& operator=(const IMUData_Signals& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMUData_Signals& operator=(IMUData_Signals&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMUData_Signals& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMUData_Signals* internal_default_instance() {
    return reinterpret_cast<const IMUData_Signals*>(
               &_IMUData_Signals_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IMUData_Signals& a, IMUData_Signals& b) {
    a.Swap(&b);
  }
  inline void Swap(IMUData_Signals* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMUData_Signals* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IMUData_Signals* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IMUData_Signals>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMUData_Signals& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMUData_Signals& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMUData_Signals* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.PDK.IMUData.Signals";
  }
  protected:
  explicit IMUData_Signals(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollRateFieldNumber = 1,
    kPitchRateFieldNumber = 2,
    kYawRateFieldNumber = 3,
    kLongAccFieldNumber = 4,
    kVertAccFieldNumber = 5,
    kLatAccFieldNumber = 6,
  };
  // optional float rollRate = 1;
  bool has_rollrate() const;
  private:
  bool _internal_has_rollrate() const;
  public:
  void clear_rollrate();
  float rollrate() const;
  void set_rollrate(float value);
  private:
  float _internal_rollrate() const;
  void _internal_set_rollrate(float value);
  public:

  // optional float pitchRate = 2;
  bool has_pitchrate() const;
  private:
  bool _internal_has_pitchrate() const;
  public:
  void clear_pitchrate();
  float pitchrate() const;
  void set_pitchrate(float value);
  private:
  float _internal_pitchrate() const;
  void _internal_set_pitchrate(float value);
  public:

  // optional float yawRate = 3;
  bool has_yawrate() const;
  private:
  bool _internal_has_yawrate() const;
  public:
  void clear_yawrate();
  float yawrate() const;
  void set_yawrate(float value);
  private:
  float _internal_yawrate() const;
  void _internal_set_yawrate(float value);
  public:

  // optional float longAcc = 4;
  bool has_longacc() const;
  private:
  bool _internal_has_longacc() const;
  public:
  void clear_longacc();
  float longacc() const;
  void set_longacc(float value);
  private:
  float _internal_longacc() const;
  void _internal_set_longacc(float value);
  public:

  // optional float vertAcc = 5;
  bool has_vertacc() const;
  private:
  bool _internal_has_vertacc() const;
  public:
  void clear_vertacc();
  float vertacc() const;
  void set_vertacc(float value);
  private:
  float _internal_vertacc() const;
  void _internal_set_vertacc(float value);
  public:

  // optional float latAcc = 6;
  bool has_latacc() const;
  private:
  bool _internal_has_latacc() const;
  public:
  void clear_latacc();
  float latacc() const;
  void set_latacc(float value);
  private:
  float _internal_latacc() const;
  void _internal_set_latacc(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb.PDK.IMUData.Signals)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float rollrate_;
  float pitchrate_;
  float yawrate_;
  float longacc_;
  float vertacc_;
  float latacc_;
  friend struct ::TableStruct_pdk_5fIMUData_2eproto;
};
// -------------------------------------------------------------------

class IMUData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.PDK.IMUData) */ {
 public:
  inline IMUData() : IMUData(nullptr) {}
  ~IMUData() override;
  explicit PROTOBUF_CONSTEXPR IMUData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMUData(const IMUData& from);
  IMUData(IMUData&& from) noexcept
    : IMUData() {
    *this = ::std::move(from);
  }

  inline IMUData& operator=(const IMUData& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMUData& operator=(IMUData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMUData& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMUData* internal_default_instance() {
    return reinterpret_cast<const IMUData*>(
               &_IMUData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IMUData& a, IMUData& b) {
    a.Swap(&b);
  }
  inline void Swap(IMUData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMUData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IMUData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IMUData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMUData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMUData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMUData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.PDK.IMUData";
  }
  protected:
  explicit IMUData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef IMUData_SignalStates SignalStates;
  typedef IMUData_Signals Signals;

  typedef IMUData_SignalState SignalState;
  static constexpr SignalState IMU_SIGNAL_INVALID =
    IMUData_SignalState_IMU_SIGNAL_INVALID;
  static constexpr SignalState IMU_SIGNAL_VALID =
    IMUData_SignalState_IMU_SIGNAL_VALID;
  static inline bool SignalState_IsValid(int value) {
    return IMUData_SignalState_IsValid(value);
  }
  static constexpr SignalState SignalState_MIN =
    IMUData_SignalState_SignalState_MIN;
  static constexpr SignalState SignalState_MAX =
    IMUData_SignalState_SignalState_MAX;
  static constexpr int SignalState_ARRAYSIZE =
    IMUData_SignalState_SignalState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SignalState_descriptor() {
    return IMUData_SignalState_descriptor();
  }
  template<typename T>
  static inline const std::string& SignalState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SignalState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SignalState_Name.");
    return IMUData_SignalState_Name(enum_t_value);
  }
  static inline bool SignalState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SignalState* value) {
    return IMUData_SignalState_Parse(name, value);
  }

  typedef IMUData_SensorType SensorType;
  static constexpr SensorType SC23S =
    IMUData_SensorType_SC23S;
  static constexpr SensorType SC13S =
    IMUData_SensorType_SC13S;
  static constexpr SensorType UNKNOWN =
    IMUData_SensorType_UNKNOWN;
  static inline bool SensorType_IsValid(int value) {
    return IMUData_SensorType_IsValid(value);
  }
  static constexpr SensorType SensorType_MIN =
    IMUData_SensorType_SensorType_MIN;
  static constexpr SensorType SensorType_MAX =
    IMUData_SensorType_SensorType_MAX;
  static constexpr int SensorType_ARRAYSIZE =
    IMUData_SensorType_SensorType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SensorType_descriptor() {
    return IMUData_SensorType_descriptor();
  }
  template<typename T>
  static inline const std::string& SensorType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SensorType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SensorType_Name.");
    return IMUData_SensorType_Name(enum_t_value);
  }
  static inline bool SensorType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SensorType* value) {
    return IMUData_SensorType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kSignalStatesFieldNumber = 3,
    kSignalsFieldNumber = 4,
    kSensorTypeFieldNumber = 2,
  };
  // optional .pb.PDK.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::pb::PDK::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::pb::PDK::MsgHeader* release_header();
  ::pb::PDK::MsgHeader* mutable_header();
  void set_allocated_header(::pb::PDK::MsgHeader* header);
  private:
  const ::pb::PDK::MsgHeader& _internal_header() const;
  ::pb::PDK::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::pb::PDK::MsgHeader* header);
  ::pb::PDK::MsgHeader* unsafe_arena_release_header();

  // optional .pb.PDK.IMUData.SignalStates signalStates = 3;
  bool has_signalstates() const;
  private:
  bool _internal_has_signalstates() const;
  public:
  void clear_signalstates();
  const ::pb::PDK::IMUData_SignalStates& signalstates() const;
  PROTOBUF_NODISCARD ::pb::PDK::IMUData_SignalStates* release_signalstates();
  ::pb::PDK::IMUData_SignalStates* mutable_signalstates();
  void set_allocated_signalstates(::pb::PDK::IMUData_SignalStates* signalstates);
  private:
  const ::pb::PDK::IMUData_SignalStates& _internal_signalstates() const;
  ::pb::PDK::IMUData_SignalStates* _internal_mutable_signalstates();
  public:
  void unsafe_arena_set_allocated_signalstates(
      ::pb::PDK::IMUData_SignalStates* signalstates);
  ::pb::PDK::IMUData_SignalStates* unsafe_arena_release_signalstates();

  // optional .pb.PDK.IMUData.Signals signals = 4;
  bool has_signals() const;
  private:
  bool _internal_has_signals() const;
  public:
  void clear_signals();
  const ::pb::PDK::IMUData_Signals& signals() const;
  PROTOBUF_NODISCARD ::pb::PDK::IMUData_Signals* release_signals();
  ::pb::PDK::IMUData_Signals* mutable_signals();
  void set_allocated_signals(::pb::PDK::IMUData_Signals* signals);
  private:
  const ::pb::PDK::IMUData_Signals& _internal_signals() const;
  ::pb::PDK::IMUData_Signals* _internal_mutable_signals();
  public:
  void unsafe_arena_set_allocated_signals(
      ::pb::PDK::IMUData_Signals* signals);
  ::pb::PDK::IMUData_Signals* unsafe_arena_release_signals();

  // optional .pb.PDK.IMUData.SensorType sensorType = 2 [default = UNKNOWN];
  bool has_sensortype() const;
  private:
  bool _internal_has_sensortype() const;
  public:
  void clear_sensortype();
  ::pb::PDK::IMUData_SensorType sensortype() const;
  void set_sensortype(::pb::PDK::IMUData_SensorType value);
  private:
  ::pb::PDK::IMUData_SensorType _internal_sensortype() const;
  void _internal_set_sensortype(::pb::PDK::IMUData_SensorType value);
  public:

  // @@protoc_insertion_point(class_scope:pb.PDK.IMUData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pb::PDK::MsgHeader* header_;
  ::pb::PDK::IMUData_SignalStates* signalstates_;
  ::pb::PDK::IMUData_Signals* signals_;
  int sensortype_;
  friend struct ::TableStruct_pdk_5fIMUData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IMUData_SignalStates

// optional .pb.PDK.IMUData.SignalState rollRate = 1 [default = IMU_SIGNAL_INVALID];
inline bool IMUData_SignalStates::_internal_has_rollrate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IMUData_SignalStates::has_rollrate() const {
  return _internal_has_rollrate();
}
inline void IMUData_SignalStates::clear_rollrate() {
  rollrate_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::pb::PDK::IMUData_SignalState IMUData_SignalStates::_internal_rollrate() const {
  return static_cast< ::pb::PDK::IMUData_SignalState >(rollrate_);
}
inline ::pb::PDK::IMUData_SignalState IMUData_SignalStates::rollrate() const {
  // @@protoc_insertion_point(field_get:pb.PDK.IMUData.SignalStates.rollRate)
  return _internal_rollrate();
}
inline void IMUData_SignalStates::_internal_set_rollrate(::pb::PDK::IMUData_SignalState value) {
  assert(::pb::PDK::IMUData_SignalState_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  rollrate_ = value;
}
inline void IMUData_SignalStates::set_rollrate(::pb::PDK::IMUData_SignalState value) {
  _internal_set_rollrate(value);
  // @@protoc_insertion_point(field_set:pb.PDK.IMUData.SignalStates.rollRate)
}

// optional .pb.PDK.IMUData.SignalState pitchRate = 2 [default = IMU_SIGNAL_INVALID];
inline bool IMUData_SignalStates::_internal_has_pitchrate() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool IMUData_SignalStates::has_pitchrate() const {
  return _internal_has_pitchrate();
}
inline void IMUData_SignalStates::clear_pitchrate() {
  pitchrate_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::pb::PDK::IMUData_SignalState IMUData_SignalStates::_internal_pitchrate() const {
  return static_cast< ::pb::PDK::IMUData_SignalState >(pitchrate_);
}
inline ::pb::PDK::IMUData_SignalState IMUData_SignalStates::pitchrate() const {
  // @@protoc_insertion_point(field_get:pb.PDK.IMUData.SignalStates.pitchRate)
  return _internal_pitchrate();
}
inline void IMUData_SignalStates::_internal_set_pitchrate(::pb::PDK::IMUData_SignalState value) {
  assert(::pb::PDK::IMUData_SignalState_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  pitchrate_ = value;
}
inline void IMUData_SignalStates::set_pitchrate(::pb::PDK::IMUData_SignalState value) {
  _internal_set_pitchrate(value);
  // @@protoc_insertion_point(field_set:pb.PDK.IMUData.SignalStates.pitchRate)
}

// optional .pb.PDK.IMUData.SignalState yawRate = 3 [default = IMU_SIGNAL_INVALID];
inline bool IMUData_SignalStates::_internal_has_yawrate() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool IMUData_SignalStates::has_yawrate() const {
  return _internal_has_yawrate();
}
inline void IMUData_SignalStates::clear_yawrate() {
  yawrate_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::pb::PDK::IMUData_SignalState IMUData_SignalStates::_internal_yawrate() const {
  return static_cast< ::pb::PDK::IMUData_SignalState >(yawrate_);
}
inline ::pb::PDK::IMUData_SignalState IMUData_SignalStates::yawrate() const {
  // @@protoc_insertion_point(field_get:pb.PDK.IMUData.SignalStates.yawRate)
  return _internal_yawrate();
}
inline void IMUData_SignalStates::_internal_set_yawrate(::pb::PDK::IMUData_SignalState value) {
  assert(::pb::PDK::IMUData_SignalState_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  yawrate_ = value;
}
inline void IMUData_SignalStates::set_yawrate(::pb::PDK::IMUData_SignalState value) {
  _internal_set_yawrate(value);
  // @@protoc_insertion_point(field_set:pb.PDK.IMUData.SignalStates.yawRate)
}

// optional .pb.PDK.IMUData.SignalState longAcc = 4 [default = IMU_SIGNAL_INVALID];
inline bool IMUData_SignalStates::_internal_has_longacc() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool IMUData_SignalStates::has_longacc() const {
  return _internal_has_longacc();
}
inline void IMUData_SignalStates::clear_longacc() {
  longacc_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::pb::PDK::IMUData_SignalState IMUData_SignalStates::_internal_longacc() const {
  return static_cast< ::pb::PDK::IMUData_SignalState >(longacc_);
}
inline ::pb::PDK::IMUData_SignalState IMUData_SignalStates::longacc() const {
  // @@protoc_insertion_point(field_get:pb.PDK.IMUData.SignalStates.longAcc)
  return _internal_longacc();
}
inline void IMUData_SignalStates::_internal_set_longacc(::pb::PDK::IMUData_SignalState value) {
  assert(::pb::PDK::IMUData_SignalState_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  longacc_ = value;
}
inline void IMUData_SignalStates::set_longacc(::pb::PDK::IMUData_SignalState value) {
  _internal_set_longacc(value);
  // @@protoc_insertion_point(field_set:pb.PDK.IMUData.SignalStates.longAcc)
}

// optional .pb.PDK.IMUData.SignalState vertAcc = 5 [default = IMU_SIGNAL_INVALID];
inline bool IMUData_SignalStates::_internal_has_vertacc() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool IMUData_SignalStates::has_vertacc() const {
  return _internal_has_vertacc();
}
inline void IMUData_SignalStates::clear_vertacc() {
  vertacc_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::pb::PDK::IMUData_SignalState IMUData_SignalStates::_internal_vertacc() const {
  return static_cast< ::pb::PDK::IMUData_SignalState >(vertacc_);
}
inline ::pb::PDK::IMUData_SignalState IMUData_SignalStates::vertacc() const {
  // @@protoc_insertion_point(field_get:pb.PDK.IMUData.SignalStates.vertAcc)
  return _internal_vertacc();
}
inline void IMUData_SignalStates::_internal_set_vertacc(::pb::PDK::IMUData_SignalState value) {
  assert(::pb::PDK::IMUData_SignalState_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  vertacc_ = value;
}
inline void IMUData_SignalStates::set_vertacc(::pb::PDK::IMUData_SignalState value) {
  _internal_set_vertacc(value);
  // @@protoc_insertion_point(field_set:pb.PDK.IMUData.SignalStates.vertAcc)
}

// optional .pb.PDK.IMUData.SignalState latAcc = 6 [default = IMU_SIGNAL_INVALID];
inline bool IMUData_SignalStates::_internal_has_latacc() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool IMUData_SignalStates::has_latacc() const {
  return _internal_has_latacc();
}
inline void IMUData_SignalStates::clear_latacc() {
  latacc_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::pb::PDK::IMUData_SignalState IMUData_SignalStates::_internal_latacc() const {
  return static_cast< ::pb::PDK::IMUData_SignalState >(latacc_);
}
inline ::pb::PDK::IMUData_SignalState IMUData_SignalStates::latacc() const {
  // @@protoc_insertion_point(field_get:pb.PDK.IMUData.SignalStates.latAcc)
  return _internal_latacc();
}
inline void IMUData_SignalStates::_internal_set_latacc(::pb::PDK::IMUData_SignalState value) {
  assert(::pb::PDK::IMUData_SignalState_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  latacc_ = value;
}
inline void IMUData_SignalStates::set_latacc(::pb::PDK::IMUData_SignalState value) {
  _internal_set_latacc(value);
  // @@protoc_insertion_point(field_set:pb.PDK.IMUData.SignalStates.latAcc)
}

// -------------------------------------------------------------------

// IMUData_Signals

// optional float rollRate = 1;
inline bool IMUData_Signals::_internal_has_rollrate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IMUData_Signals::has_rollrate() const {
  return _internal_has_rollrate();
}
inline void IMUData_Signals::clear_rollrate() {
  rollrate_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float IMUData_Signals::_internal_rollrate() const {
  return rollrate_;
}
inline float IMUData_Signals::rollrate() const {
  // @@protoc_insertion_point(field_get:pb.PDK.IMUData.Signals.rollRate)
  return _internal_rollrate();
}
inline void IMUData_Signals::_internal_set_rollrate(float value) {
  _has_bits_[0] |= 0x00000001u;
  rollrate_ = value;
}
inline void IMUData_Signals::set_rollrate(float value) {
  _internal_set_rollrate(value);
  // @@protoc_insertion_point(field_set:pb.PDK.IMUData.Signals.rollRate)
}

// optional float pitchRate = 2;
inline bool IMUData_Signals::_internal_has_pitchrate() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool IMUData_Signals::has_pitchrate() const {
  return _internal_has_pitchrate();
}
inline void IMUData_Signals::clear_pitchrate() {
  pitchrate_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float IMUData_Signals::_internal_pitchrate() const {
  return pitchrate_;
}
inline float IMUData_Signals::pitchrate() const {
  // @@protoc_insertion_point(field_get:pb.PDK.IMUData.Signals.pitchRate)
  return _internal_pitchrate();
}
inline void IMUData_Signals::_internal_set_pitchrate(float value) {
  _has_bits_[0] |= 0x00000002u;
  pitchrate_ = value;
}
inline void IMUData_Signals::set_pitchrate(float value) {
  _internal_set_pitchrate(value);
  // @@protoc_insertion_point(field_set:pb.PDK.IMUData.Signals.pitchRate)
}

// optional float yawRate = 3;
inline bool IMUData_Signals::_internal_has_yawrate() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool IMUData_Signals::has_yawrate() const {
  return _internal_has_yawrate();
}
inline void IMUData_Signals::clear_yawrate() {
  yawrate_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float IMUData_Signals::_internal_yawrate() const {
  return yawrate_;
}
inline float IMUData_Signals::yawrate() const {
  // @@protoc_insertion_point(field_get:pb.PDK.IMUData.Signals.yawRate)
  return _internal_yawrate();
}
inline void IMUData_Signals::_internal_set_yawrate(float value) {
  _has_bits_[0] |= 0x00000004u;
  yawrate_ = value;
}
inline void IMUData_Signals::set_yawrate(float value) {
  _internal_set_yawrate(value);
  // @@protoc_insertion_point(field_set:pb.PDK.IMUData.Signals.yawRate)
}

// optional float longAcc = 4;
inline bool IMUData_Signals::_internal_has_longacc() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool IMUData_Signals::has_longacc() const {
  return _internal_has_longacc();
}
inline void IMUData_Signals::clear_longacc() {
  longacc_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float IMUData_Signals::_internal_longacc() const {
  return longacc_;
}
inline float IMUData_Signals::longacc() const {
  // @@protoc_insertion_point(field_get:pb.PDK.IMUData.Signals.longAcc)
  return _internal_longacc();
}
inline void IMUData_Signals::_internal_set_longacc(float value) {
  _has_bits_[0] |= 0x00000008u;
  longacc_ = value;
}
inline void IMUData_Signals::set_longacc(float value) {
  _internal_set_longacc(value);
  // @@protoc_insertion_point(field_set:pb.PDK.IMUData.Signals.longAcc)
}

// optional float vertAcc = 5;
inline bool IMUData_Signals::_internal_has_vertacc() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool IMUData_Signals::has_vertacc() const {
  return _internal_has_vertacc();
}
inline void IMUData_Signals::clear_vertacc() {
  vertacc_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float IMUData_Signals::_internal_vertacc() const {
  return vertacc_;
}
inline float IMUData_Signals::vertacc() const {
  // @@protoc_insertion_point(field_get:pb.PDK.IMUData.Signals.vertAcc)
  return _internal_vertacc();
}
inline void IMUData_Signals::_internal_set_vertacc(float value) {
  _has_bits_[0] |= 0x00000010u;
  vertacc_ = value;
}
inline void IMUData_Signals::set_vertacc(float value) {
  _internal_set_vertacc(value);
  // @@protoc_insertion_point(field_set:pb.PDK.IMUData.Signals.vertAcc)
}

// optional float latAcc = 6;
inline bool IMUData_Signals::_internal_has_latacc() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool IMUData_Signals::has_latacc() const {
  return _internal_has_latacc();
}
inline void IMUData_Signals::clear_latacc() {
  latacc_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float IMUData_Signals::_internal_latacc() const {
  return latacc_;
}
inline float IMUData_Signals::latacc() const {
  // @@protoc_insertion_point(field_get:pb.PDK.IMUData.Signals.latAcc)
  return _internal_latacc();
}
inline void IMUData_Signals::_internal_set_latacc(float value) {
  _has_bits_[0] |= 0x00000020u;
  latacc_ = value;
}
inline void IMUData_Signals::set_latacc(float value) {
  _internal_set_latacc(value);
  // @@protoc_insertion_point(field_set:pb.PDK.IMUData.Signals.latAcc)
}

// -------------------------------------------------------------------

// IMUData

// optional .pb.PDK.MsgHeader header = 1;
inline bool IMUData::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool IMUData::has_header() const {
  return _internal_has_header();
}
inline const ::pb::PDK::MsgHeader& IMUData::_internal_header() const {
  const ::pb::PDK::MsgHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::PDK::MsgHeader&>(
      ::pb::PDK::_MsgHeader_default_instance_);
}
inline const ::pb::PDK::MsgHeader& IMUData::header() const {
  // @@protoc_insertion_point(field_get:pb.PDK.IMUData.header)
  return _internal_header();
}
inline void IMUData::unsafe_arena_set_allocated_header(
    ::pb::PDK::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.PDK.IMUData.header)
}
inline ::pb::PDK::MsgHeader* IMUData::release_header() {
  _has_bits_[0] &= ~0x00000001u;
  ::pb::PDK::MsgHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pb::PDK::MsgHeader* IMUData::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:pb.PDK.IMUData.header)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::PDK::MsgHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::pb::PDK::MsgHeader* IMUData::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::PDK::MsgHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::pb::PDK::MsgHeader* IMUData::mutable_header() {
  ::pb::PDK::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:pb.PDK.IMUData.header)
  return _msg;
}
inline void IMUData::set_allocated_header(::pb::PDK::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:pb.PDK.IMUData.header)
}

// optional .pb.PDK.IMUData.SensorType sensorType = 2 [default = UNKNOWN];
inline bool IMUData::_internal_has_sensortype() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool IMUData::has_sensortype() const {
  return _internal_has_sensortype();
}
inline void IMUData::clear_sensortype() {
  sensortype_ = 255;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::pb::PDK::IMUData_SensorType IMUData::_internal_sensortype() const {
  return static_cast< ::pb::PDK::IMUData_SensorType >(sensortype_);
}
inline ::pb::PDK::IMUData_SensorType IMUData::sensortype() const {
  // @@protoc_insertion_point(field_get:pb.PDK.IMUData.sensorType)
  return _internal_sensortype();
}
inline void IMUData::_internal_set_sensortype(::pb::PDK::IMUData_SensorType value) {
  assert(::pb::PDK::IMUData_SensorType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  sensortype_ = value;
}
inline void IMUData::set_sensortype(::pb::PDK::IMUData_SensorType value) {
  _internal_set_sensortype(value);
  // @@protoc_insertion_point(field_set:pb.PDK.IMUData.sensorType)
}

// optional .pb.PDK.IMUData.SignalStates signalStates = 3;
inline bool IMUData::_internal_has_signalstates() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || signalstates_ != nullptr);
  return value;
}
inline bool IMUData::has_signalstates() const {
  return _internal_has_signalstates();
}
inline void IMUData::clear_signalstates() {
  if (signalstates_ != nullptr) signalstates_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::pb::PDK::IMUData_SignalStates& IMUData::_internal_signalstates() const {
  const ::pb::PDK::IMUData_SignalStates* p = signalstates_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::PDK::IMUData_SignalStates&>(
      ::pb::PDK::_IMUData_SignalStates_default_instance_);
}
inline const ::pb::PDK::IMUData_SignalStates& IMUData::signalstates() const {
  // @@protoc_insertion_point(field_get:pb.PDK.IMUData.signalStates)
  return _internal_signalstates();
}
inline void IMUData::unsafe_arena_set_allocated_signalstates(
    ::pb::PDK::IMUData_SignalStates* signalstates) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signalstates_);
  }
  signalstates_ = signalstates;
  if (signalstates) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.PDK.IMUData.signalStates)
}
inline ::pb::PDK::IMUData_SignalStates* IMUData::release_signalstates() {
  _has_bits_[0] &= ~0x00000002u;
  ::pb::PDK::IMUData_SignalStates* temp = signalstates_;
  signalstates_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pb::PDK::IMUData_SignalStates* IMUData::unsafe_arena_release_signalstates() {
  // @@protoc_insertion_point(field_release:pb.PDK.IMUData.signalStates)
  _has_bits_[0] &= ~0x00000002u;
  ::pb::PDK::IMUData_SignalStates* temp = signalstates_;
  signalstates_ = nullptr;
  return temp;
}
inline ::pb::PDK::IMUData_SignalStates* IMUData::_internal_mutable_signalstates() {
  _has_bits_[0] |= 0x00000002u;
  if (signalstates_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::PDK::IMUData_SignalStates>(GetArenaForAllocation());
    signalstates_ = p;
  }
  return signalstates_;
}
inline ::pb::PDK::IMUData_SignalStates* IMUData::mutable_signalstates() {
  ::pb::PDK::IMUData_SignalStates* _msg = _internal_mutable_signalstates();
  // @@protoc_insertion_point(field_mutable:pb.PDK.IMUData.signalStates)
  return _msg;
}
inline void IMUData::set_allocated_signalstates(::pb::PDK::IMUData_SignalStates* signalstates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete signalstates_;
  }
  if (signalstates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(signalstates);
    if (message_arena != submessage_arena) {
      signalstates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signalstates, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  signalstates_ = signalstates;
  // @@protoc_insertion_point(field_set_allocated:pb.PDK.IMUData.signalStates)
}

// optional .pb.PDK.IMUData.Signals signals = 4;
inline bool IMUData::_internal_has_signals() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || signals_ != nullptr);
  return value;
}
inline bool IMUData::has_signals() const {
  return _internal_has_signals();
}
inline void IMUData::clear_signals() {
  if (signals_ != nullptr) signals_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::pb::PDK::IMUData_Signals& IMUData::_internal_signals() const {
  const ::pb::PDK::IMUData_Signals* p = signals_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::PDK::IMUData_Signals&>(
      ::pb::PDK::_IMUData_Signals_default_instance_);
}
inline const ::pb::PDK::IMUData_Signals& IMUData::signals() const {
  // @@protoc_insertion_point(field_get:pb.PDK.IMUData.signals)
  return _internal_signals();
}
inline void IMUData::unsafe_arena_set_allocated_signals(
    ::pb::PDK::IMUData_Signals* signals) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signals_);
  }
  signals_ = signals;
  if (signals) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.PDK.IMUData.signals)
}
inline ::pb::PDK::IMUData_Signals* IMUData::release_signals() {
  _has_bits_[0] &= ~0x00000004u;
  ::pb::PDK::IMUData_Signals* temp = signals_;
  signals_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pb::PDK::IMUData_Signals* IMUData::unsafe_arena_release_signals() {
  // @@protoc_insertion_point(field_release:pb.PDK.IMUData.signals)
  _has_bits_[0] &= ~0x00000004u;
  ::pb::PDK::IMUData_Signals* temp = signals_;
  signals_ = nullptr;
  return temp;
}
inline ::pb::PDK::IMUData_Signals* IMUData::_internal_mutable_signals() {
  _has_bits_[0] |= 0x00000004u;
  if (signals_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::PDK::IMUData_Signals>(GetArenaForAllocation());
    signals_ = p;
  }
  return signals_;
}
inline ::pb::PDK::IMUData_Signals* IMUData::mutable_signals() {
  ::pb::PDK::IMUData_Signals* _msg = _internal_mutable_signals();
  // @@protoc_insertion_point(field_mutable:pb.PDK.IMUData.signals)
  return _msg;
}
inline void IMUData::set_allocated_signals(::pb::PDK::IMUData_Signals* signals) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete signals_;
  }
  if (signals) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(signals);
    if (message_arena != submessage_arena) {
      signals = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signals, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  signals_ = signals;
  // @@protoc_insertion_point(field_set_allocated:pb.PDK.IMUData.signals)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PDK
}  // namespace pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pb::PDK::IMUData_SignalState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::PDK::IMUData_SignalState>() {
  return ::pb::PDK::IMUData_SignalState_descriptor();
}
template <> struct is_proto_enum< ::pb::PDK::IMUData_SensorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::PDK::IMUData_SensorType>() {
  return ::pb::PDK::IMUData_SensorType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pdk_5fIMUData_2eproto
