// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pdk_IMUData.proto

#ifndef PROTOBUF_INCLUDED_pdk_5fIMUData_2eproto
#define PROTOBUF_INCLUDED_pdk_5fIMUData_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "pdk_MsgHeader.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_pdk_5fIMUData_2eproto 

namespace protobuf_pdk_5fIMUData_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_pdk_5fIMUData_2eproto
namespace pb {
namespace PDK {
class IMUData;
class IMUDataDefaultTypeInternal;
extern IMUDataDefaultTypeInternal _IMUData_default_instance_;
class IMUData_SignalStates;
class IMUData_SignalStatesDefaultTypeInternal;
extern IMUData_SignalStatesDefaultTypeInternal _IMUData_SignalStates_default_instance_;
class IMUData_Signals;
class IMUData_SignalsDefaultTypeInternal;
extern IMUData_SignalsDefaultTypeInternal _IMUData_Signals_default_instance_;
}  // namespace PDK
}  // namespace pb
namespace google {
namespace protobuf {
template<> ::pb::PDK::IMUData* Arena::CreateMaybeMessage<::pb::PDK::IMUData>(Arena*);
template<> ::pb::PDK::IMUData_SignalStates* Arena::CreateMaybeMessage<::pb::PDK::IMUData_SignalStates>(Arena*);
template<> ::pb::PDK::IMUData_Signals* Arena::CreateMaybeMessage<::pb::PDK::IMUData_Signals>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pb {
namespace PDK {

enum IMUData_SignalState {
  IMUData_SignalState_IMU_SIGNAL_INVALID = 0,
  IMUData_SignalState_IMU_SIGNAL_VALID = 1
};
bool IMUData_SignalState_IsValid(int value);
const IMUData_SignalState IMUData_SignalState_SignalState_MIN = IMUData_SignalState_IMU_SIGNAL_INVALID;
const IMUData_SignalState IMUData_SignalState_SignalState_MAX = IMUData_SignalState_IMU_SIGNAL_VALID;
const int IMUData_SignalState_SignalState_ARRAYSIZE = IMUData_SignalState_SignalState_MAX + 1;

const ::google::protobuf::EnumDescriptor* IMUData_SignalState_descriptor();
inline const ::std::string& IMUData_SignalState_Name(IMUData_SignalState value) {
  return ::google::protobuf::internal::NameOfEnum(
    IMUData_SignalState_descriptor(), value);
}
inline bool IMUData_SignalState_Parse(
    const ::std::string& name, IMUData_SignalState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IMUData_SignalState>(
    IMUData_SignalState_descriptor(), name, value);
}
enum IMUData_SensorType {
  IMUData_SensorType_SC23S = 0,
  IMUData_SensorType_SC13S = 1,
  IMUData_SensorType_UNKNOWN = 255
};
bool IMUData_SensorType_IsValid(int value);
const IMUData_SensorType IMUData_SensorType_SensorType_MIN = IMUData_SensorType_SC23S;
const IMUData_SensorType IMUData_SensorType_SensorType_MAX = IMUData_SensorType_UNKNOWN;
const int IMUData_SensorType_SensorType_ARRAYSIZE = IMUData_SensorType_SensorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* IMUData_SensorType_descriptor();
inline const ::std::string& IMUData_SensorType_Name(IMUData_SensorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    IMUData_SensorType_descriptor(), value);
}
inline bool IMUData_SensorType_Parse(
    const ::std::string& name, IMUData_SensorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IMUData_SensorType>(
    IMUData_SensorType_descriptor(), name, value);
}
// ===================================================================

class IMUData_SignalStates : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.PDK.IMUData.SignalStates) */ {
 public:
  IMUData_SignalStates();
  virtual ~IMUData_SignalStates();

  IMUData_SignalStates(const IMUData_SignalStates& from);

  inline IMUData_SignalStates& operator=(const IMUData_SignalStates& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMUData_SignalStates(IMUData_SignalStates&& from) noexcept
    : IMUData_SignalStates() {
    *this = ::std::move(from);
  }

  inline IMUData_SignalStates& operator=(IMUData_SignalStates&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IMUData_SignalStates& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMUData_SignalStates* internal_default_instance() {
    return reinterpret_cast<const IMUData_SignalStates*>(
               &_IMUData_SignalStates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(IMUData_SignalStates* other);
  friend void swap(IMUData_SignalStates& a, IMUData_SignalStates& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMUData_SignalStates* New() const final {
    return CreateMaybeMessage<IMUData_SignalStates>(NULL);
  }

  IMUData_SignalStates* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IMUData_SignalStates>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IMUData_SignalStates& from);
  void MergeFrom(const IMUData_SignalStates& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMUData_SignalStates* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.PDK.IMUData.SignalState rollRate = 1 [default = IMU_SIGNAL_INVALID];
  bool has_rollrate() const;
  void clear_rollrate();
  static const int kRollRateFieldNumber = 1;
  ::pb::PDK::IMUData_SignalState rollrate() const;
  void set_rollrate(::pb::PDK::IMUData_SignalState value);

  // optional .pb.PDK.IMUData.SignalState pitchRate = 2 [default = IMU_SIGNAL_INVALID];
  bool has_pitchrate() const;
  void clear_pitchrate();
  static const int kPitchRateFieldNumber = 2;
  ::pb::PDK::IMUData_SignalState pitchrate() const;
  void set_pitchrate(::pb::PDK::IMUData_SignalState value);

  // optional .pb.PDK.IMUData.SignalState yawRate = 3 [default = IMU_SIGNAL_INVALID];
  bool has_yawrate() const;
  void clear_yawrate();
  static const int kYawRateFieldNumber = 3;
  ::pb::PDK::IMUData_SignalState yawrate() const;
  void set_yawrate(::pb::PDK::IMUData_SignalState value);

  // optional .pb.PDK.IMUData.SignalState longAcc = 4 [default = IMU_SIGNAL_INVALID];
  bool has_longacc() const;
  void clear_longacc();
  static const int kLongAccFieldNumber = 4;
  ::pb::PDK::IMUData_SignalState longacc() const;
  void set_longacc(::pb::PDK::IMUData_SignalState value);

  // optional .pb.PDK.IMUData.SignalState vertAcc = 5 [default = IMU_SIGNAL_INVALID];
  bool has_vertacc() const;
  void clear_vertacc();
  static const int kVertAccFieldNumber = 5;
  ::pb::PDK::IMUData_SignalState vertacc() const;
  void set_vertacc(::pb::PDK::IMUData_SignalState value);

  // optional .pb.PDK.IMUData.SignalState latAcc = 6 [default = IMU_SIGNAL_INVALID];
  bool has_latacc() const;
  void clear_latacc();
  static const int kLatAccFieldNumber = 6;
  ::pb::PDK::IMUData_SignalState latacc() const;
  void set_latacc(::pb::PDK::IMUData_SignalState value);

  // @@protoc_insertion_point(class_scope:pb.PDK.IMUData.SignalStates)
 private:
  void set_has_rollrate();
  void clear_has_rollrate();
  void set_has_pitchrate();
  void clear_has_pitchrate();
  void set_has_yawrate();
  void clear_has_yawrate();
  void set_has_longacc();
  void clear_has_longacc();
  void set_has_vertacc();
  void clear_has_vertacc();
  void set_has_latacc();
  void clear_has_latacc();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int rollrate_;
  int pitchrate_;
  int yawrate_;
  int longacc_;
  int vertacc_;
  int latacc_;
  friend struct ::protobuf_pdk_5fIMUData_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IMUData_Signals : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.PDK.IMUData.Signals) */ {
 public:
  IMUData_Signals();
  virtual ~IMUData_Signals();

  IMUData_Signals(const IMUData_Signals& from);

  inline IMUData_Signals& operator=(const IMUData_Signals& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMUData_Signals(IMUData_Signals&& from) noexcept
    : IMUData_Signals() {
    *this = ::std::move(from);
  }

  inline IMUData_Signals& operator=(IMUData_Signals&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IMUData_Signals& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMUData_Signals* internal_default_instance() {
    return reinterpret_cast<const IMUData_Signals*>(
               &_IMUData_Signals_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(IMUData_Signals* other);
  friend void swap(IMUData_Signals& a, IMUData_Signals& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMUData_Signals* New() const final {
    return CreateMaybeMessage<IMUData_Signals>(NULL);
  }

  IMUData_Signals* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IMUData_Signals>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IMUData_Signals& from);
  void MergeFrom(const IMUData_Signals& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMUData_Signals* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float rollRate = 1;
  bool has_rollrate() const;
  void clear_rollrate();
  static const int kRollRateFieldNumber = 1;
  float rollrate() const;
  void set_rollrate(float value);

  // optional float pitchRate = 2;
  bool has_pitchrate() const;
  void clear_pitchrate();
  static const int kPitchRateFieldNumber = 2;
  float pitchrate() const;
  void set_pitchrate(float value);

  // optional float yawRate = 3;
  bool has_yawrate() const;
  void clear_yawrate();
  static const int kYawRateFieldNumber = 3;
  float yawrate() const;
  void set_yawrate(float value);

  // optional float longAcc = 4;
  bool has_longacc() const;
  void clear_longacc();
  static const int kLongAccFieldNumber = 4;
  float longacc() const;
  void set_longacc(float value);

  // optional float vertAcc = 5;
  bool has_vertacc() const;
  void clear_vertacc();
  static const int kVertAccFieldNumber = 5;
  float vertacc() const;
  void set_vertacc(float value);

  // optional float latAcc = 6;
  bool has_latacc() const;
  void clear_latacc();
  static const int kLatAccFieldNumber = 6;
  float latacc() const;
  void set_latacc(float value);

  // @@protoc_insertion_point(class_scope:pb.PDK.IMUData.Signals)
 private:
  void set_has_rollrate();
  void clear_has_rollrate();
  void set_has_pitchrate();
  void clear_has_pitchrate();
  void set_has_yawrate();
  void clear_has_yawrate();
  void set_has_longacc();
  void clear_has_longacc();
  void set_has_vertacc();
  void clear_has_vertacc();
  void set_has_latacc();
  void clear_has_latacc();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float rollrate_;
  float pitchrate_;
  float yawrate_;
  float longacc_;
  float vertacc_;
  float latacc_;
  friend struct ::protobuf_pdk_5fIMUData_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IMUData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.PDK.IMUData) */ {
 public:
  IMUData();
  virtual ~IMUData();

  IMUData(const IMUData& from);

  inline IMUData& operator=(const IMUData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMUData(IMUData&& from) noexcept
    : IMUData() {
    *this = ::std::move(from);
  }

  inline IMUData& operator=(IMUData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IMUData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMUData* internal_default_instance() {
    return reinterpret_cast<const IMUData*>(
               &_IMUData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(IMUData* other);
  friend void swap(IMUData& a, IMUData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMUData* New() const final {
    return CreateMaybeMessage<IMUData>(NULL);
  }

  IMUData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IMUData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IMUData& from);
  void MergeFrom(const IMUData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMUData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef IMUData_SignalStates SignalStates;
  typedef IMUData_Signals Signals;

  typedef IMUData_SignalState SignalState;
  static const SignalState IMU_SIGNAL_INVALID =
    IMUData_SignalState_IMU_SIGNAL_INVALID;
  static const SignalState IMU_SIGNAL_VALID =
    IMUData_SignalState_IMU_SIGNAL_VALID;
  static inline bool SignalState_IsValid(int value) {
    return IMUData_SignalState_IsValid(value);
  }
  static const SignalState SignalState_MIN =
    IMUData_SignalState_SignalState_MIN;
  static const SignalState SignalState_MAX =
    IMUData_SignalState_SignalState_MAX;
  static const int SignalState_ARRAYSIZE =
    IMUData_SignalState_SignalState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SignalState_descriptor() {
    return IMUData_SignalState_descriptor();
  }
  static inline const ::std::string& SignalState_Name(SignalState value) {
    return IMUData_SignalState_Name(value);
  }
  static inline bool SignalState_Parse(const ::std::string& name,
      SignalState* value) {
    return IMUData_SignalState_Parse(name, value);
  }

  typedef IMUData_SensorType SensorType;
  static const SensorType SC23S =
    IMUData_SensorType_SC23S;
  static const SensorType SC13S =
    IMUData_SensorType_SC13S;
  static const SensorType UNKNOWN =
    IMUData_SensorType_UNKNOWN;
  static inline bool SensorType_IsValid(int value) {
    return IMUData_SensorType_IsValid(value);
  }
  static const SensorType SensorType_MIN =
    IMUData_SensorType_SensorType_MIN;
  static const SensorType SensorType_MAX =
    IMUData_SensorType_SensorType_MAX;
  static const int SensorType_ARRAYSIZE =
    IMUData_SensorType_SensorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SensorType_descriptor() {
    return IMUData_SensorType_descriptor();
  }
  static inline const ::std::string& SensorType_Name(SensorType value) {
    return IMUData_SensorType_Name(value);
  }
  static inline bool SensorType_Parse(const ::std::string& name,
      SensorType* value) {
    return IMUData_SensorType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .pb.PDK.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::pb::PDK::MsgHeader& _internal_header() const;
  public:
  const ::pb::PDK::MsgHeader& header() const;
  ::pb::PDK::MsgHeader* release_header();
  ::pb::PDK::MsgHeader* mutable_header();
  void set_allocated_header(::pb::PDK::MsgHeader* header);

  // optional .pb.PDK.IMUData.SignalStates signalStates = 3;
  bool has_signalstates() const;
  void clear_signalstates();
  static const int kSignalStatesFieldNumber = 3;
  private:
  const ::pb::PDK::IMUData_SignalStates& _internal_signalstates() const;
  public:
  const ::pb::PDK::IMUData_SignalStates& signalstates() const;
  ::pb::PDK::IMUData_SignalStates* release_signalstates();
  ::pb::PDK::IMUData_SignalStates* mutable_signalstates();
  void set_allocated_signalstates(::pb::PDK::IMUData_SignalStates* signalstates);

  // optional .pb.PDK.IMUData.Signals signals = 4;
  bool has_signals() const;
  void clear_signals();
  static const int kSignalsFieldNumber = 4;
  private:
  const ::pb::PDK::IMUData_Signals& _internal_signals() const;
  public:
  const ::pb::PDK::IMUData_Signals& signals() const;
  ::pb::PDK::IMUData_Signals* release_signals();
  ::pb::PDK::IMUData_Signals* mutable_signals();
  void set_allocated_signals(::pb::PDK::IMUData_Signals* signals);

  // optional .pb.PDK.IMUData.SensorType sensorType = 2 [default = UNKNOWN];
  bool has_sensortype() const;
  void clear_sensortype();
  static const int kSensorTypeFieldNumber = 2;
  ::pb::PDK::IMUData_SensorType sensortype() const;
  void set_sensortype(::pb::PDK::IMUData_SensorType value);

  // @@protoc_insertion_point(class_scope:pb.PDK.IMUData)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_sensortype();
  void clear_has_sensortype();
  void set_has_signalstates();
  void clear_has_signalstates();
  void set_has_signals();
  void clear_has_signals();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::pb::PDK::MsgHeader* header_;
  ::pb::PDK::IMUData_SignalStates* signalstates_;
  ::pb::PDK::IMUData_Signals* signals_;
  int sensortype_;
  friend struct ::protobuf_pdk_5fIMUData_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IMUData_SignalStates

// optional .pb.PDK.IMUData.SignalState rollRate = 1 [default = IMU_SIGNAL_INVALID];
inline bool IMUData_SignalStates::has_rollrate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMUData_SignalStates::set_has_rollrate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMUData_SignalStates::clear_has_rollrate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMUData_SignalStates::clear_rollrate() {
  rollrate_ = 0;
  clear_has_rollrate();
}
inline ::pb::PDK::IMUData_SignalState IMUData_SignalStates::rollrate() const {
  // @@protoc_insertion_point(field_get:pb.PDK.IMUData.SignalStates.rollRate)
  return static_cast< ::pb::PDK::IMUData_SignalState >(rollrate_);
}
inline void IMUData_SignalStates::set_rollrate(::pb::PDK::IMUData_SignalState value) {
  assert(::pb::PDK::IMUData_SignalState_IsValid(value));
  set_has_rollrate();
  rollrate_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.IMUData.SignalStates.rollRate)
}

// optional .pb.PDK.IMUData.SignalState pitchRate = 2 [default = IMU_SIGNAL_INVALID];
inline bool IMUData_SignalStates::has_pitchrate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMUData_SignalStates::set_has_pitchrate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMUData_SignalStates::clear_has_pitchrate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMUData_SignalStates::clear_pitchrate() {
  pitchrate_ = 0;
  clear_has_pitchrate();
}
inline ::pb::PDK::IMUData_SignalState IMUData_SignalStates::pitchrate() const {
  // @@protoc_insertion_point(field_get:pb.PDK.IMUData.SignalStates.pitchRate)
  return static_cast< ::pb::PDK::IMUData_SignalState >(pitchrate_);
}
inline void IMUData_SignalStates::set_pitchrate(::pb::PDK::IMUData_SignalState value) {
  assert(::pb::PDK::IMUData_SignalState_IsValid(value));
  set_has_pitchrate();
  pitchrate_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.IMUData.SignalStates.pitchRate)
}

// optional .pb.PDK.IMUData.SignalState yawRate = 3 [default = IMU_SIGNAL_INVALID];
inline bool IMUData_SignalStates::has_yawrate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMUData_SignalStates::set_has_yawrate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMUData_SignalStates::clear_has_yawrate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMUData_SignalStates::clear_yawrate() {
  yawrate_ = 0;
  clear_has_yawrate();
}
inline ::pb::PDK::IMUData_SignalState IMUData_SignalStates::yawrate() const {
  // @@protoc_insertion_point(field_get:pb.PDK.IMUData.SignalStates.yawRate)
  return static_cast< ::pb::PDK::IMUData_SignalState >(yawrate_);
}
inline void IMUData_SignalStates::set_yawrate(::pb::PDK::IMUData_SignalState value) {
  assert(::pb::PDK::IMUData_SignalState_IsValid(value));
  set_has_yawrate();
  yawrate_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.IMUData.SignalStates.yawRate)
}

// optional .pb.PDK.IMUData.SignalState longAcc = 4 [default = IMU_SIGNAL_INVALID];
inline bool IMUData_SignalStates::has_longacc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMUData_SignalStates::set_has_longacc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMUData_SignalStates::clear_has_longacc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMUData_SignalStates::clear_longacc() {
  longacc_ = 0;
  clear_has_longacc();
}
inline ::pb::PDK::IMUData_SignalState IMUData_SignalStates::longacc() const {
  // @@protoc_insertion_point(field_get:pb.PDK.IMUData.SignalStates.longAcc)
  return static_cast< ::pb::PDK::IMUData_SignalState >(longacc_);
}
inline void IMUData_SignalStates::set_longacc(::pb::PDK::IMUData_SignalState value) {
  assert(::pb::PDK::IMUData_SignalState_IsValid(value));
  set_has_longacc();
  longacc_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.IMUData.SignalStates.longAcc)
}

// optional .pb.PDK.IMUData.SignalState vertAcc = 5 [default = IMU_SIGNAL_INVALID];
inline bool IMUData_SignalStates::has_vertacc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMUData_SignalStates::set_has_vertacc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMUData_SignalStates::clear_has_vertacc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMUData_SignalStates::clear_vertacc() {
  vertacc_ = 0;
  clear_has_vertacc();
}
inline ::pb::PDK::IMUData_SignalState IMUData_SignalStates::vertacc() const {
  // @@protoc_insertion_point(field_get:pb.PDK.IMUData.SignalStates.vertAcc)
  return static_cast< ::pb::PDK::IMUData_SignalState >(vertacc_);
}
inline void IMUData_SignalStates::set_vertacc(::pb::PDK::IMUData_SignalState value) {
  assert(::pb::PDK::IMUData_SignalState_IsValid(value));
  set_has_vertacc();
  vertacc_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.IMUData.SignalStates.vertAcc)
}

// optional .pb.PDK.IMUData.SignalState latAcc = 6 [default = IMU_SIGNAL_INVALID];
inline bool IMUData_SignalStates::has_latacc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMUData_SignalStates::set_has_latacc() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMUData_SignalStates::clear_has_latacc() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMUData_SignalStates::clear_latacc() {
  latacc_ = 0;
  clear_has_latacc();
}
inline ::pb::PDK::IMUData_SignalState IMUData_SignalStates::latacc() const {
  // @@protoc_insertion_point(field_get:pb.PDK.IMUData.SignalStates.latAcc)
  return static_cast< ::pb::PDK::IMUData_SignalState >(latacc_);
}
inline void IMUData_SignalStates::set_latacc(::pb::PDK::IMUData_SignalState value) {
  assert(::pb::PDK::IMUData_SignalState_IsValid(value));
  set_has_latacc();
  latacc_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.IMUData.SignalStates.latAcc)
}

// -------------------------------------------------------------------

// IMUData_Signals

// optional float rollRate = 1;
inline bool IMUData_Signals::has_rollrate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMUData_Signals::set_has_rollrate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMUData_Signals::clear_has_rollrate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMUData_Signals::clear_rollrate() {
  rollrate_ = 0;
  clear_has_rollrate();
}
inline float IMUData_Signals::rollrate() const {
  // @@protoc_insertion_point(field_get:pb.PDK.IMUData.Signals.rollRate)
  return rollrate_;
}
inline void IMUData_Signals::set_rollrate(float value) {
  set_has_rollrate();
  rollrate_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.IMUData.Signals.rollRate)
}

// optional float pitchRate = 2;
inline bool IMUData_Signals::has_pitchrate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMUData_Signals::set_has_pitchrate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMUData_Signals::clear_has_pitchrate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMUData_Signals::clear_pitchrate() {
  pitchrate_ = 0;
  clear_has_pitchrate();
}
inline float IMUData_Signals::pitchrate() const {
  // @@protoc_insertion_point(field_get:pb.PDK.IMUData.Signals.pitchRate)
  return pitchrate_;
}
inline void IMUData_Signals::set_pitchrate(float value) {
  set_has_pitchrate();
  pitchrate_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.IMUData.Signals.pitchRate)
}

// optional float yawRate = 3;
inline bool IMUData_Signals::has_yawrate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMUData_Signals::set_has_yawrate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMUData_Signals::clear_has_yawrate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMUData_Signals::clear_yawrate() {
  yawrate_ = 0;
  clear_has_yawrate();
}
inline float IMUData_Signals::yawrate() const {
  // @@protoc_insertion_point(field_get:pb.PDK.IMUData.Signals.yawRate)
  return yawrate_;
}
inline void IMUData_Signals::set_yawrate(float value) {
  set_has_yawrate();
  yawrate_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.IMUData.Signals.yawRate)
}

// optional float longAcc = 4;
inline bool IMUData_Signals::has_longacc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMUData_Signals::set_has_longacc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMUData_Signals::clear_has_longacc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMUData_Signals::clear_longacc() {
  longacc_ = 0;
  clear_has_longacc();
}
inline float IMUData_Signals::longacc() const {
  // @@protoc_insertion_point(field_get:pb.PDK.IMUData.Signals.longAcc)
  return longacc_;
}
inline void IMUData_Signals::set_longacc(float value) {
  set_has_longacc();
  longacc_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.IMUData.Signals.longAcc)
}

// optional float vertAcc = 5;
inline bool IMUData_Signals::has_vertacc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMUData_Signals::set_has_vertacc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMUData_Signals::clear_has_vertacc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMUData_Signals::clear_vertacc() {
  vertacc_ = 0;
  clear_has_vertacc();
}
inline float IMUData_Signals::vertacc() const {
  // @@protoc_insertion_point(field_get:pb.PDK.IMUData.Signals.vertAcc)
  return vertacc_;
}
inline void IMUData_Signals::set_vertacc(float value) {
  set_has_vertacc();
  vertacc_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.IMUData.Signals.vertAcc)
}

// optional float latAcc = 6;
inline bool IMUData_Signals::has_latacc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMUData_Signals::set_has_latacc() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMUData_Signals::clear_has_latacc() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMUData_Signals::clear_latacc() {
  latacc_ = 0;
  clear_has_latacc();
}
inline float IMUData_Signals::latacc() const {
  // @@protoc_insertion_point(field_get:pb.PDK.IMUData.Signals.latAcc)
  return latacc_;
}
inline void IMUData_Signals::set_latacc(float value) {
  set_has_latacc();
  latacc_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.IMUData.Signals.latAcc)
}

// -------------------------------------------------------------------

// IMUData

// optional .pb.PDK.MsgHeader header = 1;
inline bool IMUData::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMUData::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMUData::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::pb::PDK::MsgHeader& IMUData::_internal_header() const {
  return *header_;
}
inline const ::pb::PDK::MsgHeader& IMUData::header() const {
  const ::pb::PDK::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:pb.PDK.IMUData.header)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::PDK::MsgHeader*>(
      &::pb::PDK::_MsgHeader_default_instance_);
}
inline ::pb::PDK::MsgHeader* IMUData::release_header() {
  // @@protoc_insertion_point(field_release:pb.PDK.IMUData.header)
  clear_has_header();
  ::pb::PDK::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::pb::PDK::MsgHeader* IMUData::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::pb::PDK::MsgHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.PDK.IMUData.header)
  return header_;
}
inline void IMUData::set_allocated_header(::pb::PDK::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:pb.PDK.IMUData.header)
}

// optional .pb.PDK.IMUData.SensorType sensorType = 2 [default = UNKNOWN];
inline bool IMUData::has_sensortype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMUData::set_has_sensortype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMUData::clear_has_sensortype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMUData::clear_sensortype() {
  sensortype_ = 255;
  clear_has_sensortype();
}
inline ::pb::PDK::IMUData_SensorType IMUData::sensortype() const {
  // @@protoc_insertion_point(field_get:pb.PDK.IMUData.sensorType)
  return static_cast< ::pb::PDK::IMUData_SensorType >(sensortype_);
}
inline void IMUData::set_sensortype(::pb::PDK::IMUData_SensorType value) {
  assert(::pb::PDK::IMUData_SensorType_IsValid(value));
  set_has_sensortype();
  sensortype_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.IMUData.sensorType)
}

// optional .pb.PDK.IMUData.SignalStates signalStates = 3;
inline bool IMUData::has_signalstates() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMUData::set_has_signalstates() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMUData::clear_has_signalstates() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMUData::clear_signalstates() {
  if (signalstates_ != NULL) signalstates_->Clear();
  clear_has_signalstates();
}
inline const ::pb::PDK::IMUData_SignalStates& IMUData::_internal_signalstates() const {
  return *signalstates_;
}
inline const ::pb::PDK::IMUData_SignalStates& IMUData::signalstates() const {
  const ::pb::PDK::IMUData_SignalStates* p = signalstates_;
  // @@protoc_insertion_point(field_get:pb.PDK.IMUData.signalStates)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::PDK::IMUData_SignalStates*>(
      &::pb::PDK::_IMUData_SignalStates_default_instance_);
}
inline ::pb::PDK::IMUData_SignalStates* IMUData::release_signalstates() {
  // @@protoc_insertion_point(field_release:pb.PDK.IMUData.signalStates)
  clear_has_signalstates();
  ::pb::PDK::IMUData_SignalStates* temp = signalstates_;
  signalstates_ = NULL;
  return temp;
}
inline ::pb::PDK::IMUData_SignalStates* IMUData::mutable_signalstates() {
  set_has_signalstates();
  if (signalstates_ == NULL) {
    auto* p = CreateMaybeMessage<::pb::PDK::IMUData_SignalStates>(GetArenaNoVirtual());
    signalstates_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.PDK.IMUData.signalStates)
  return signalstates_;
}
inline void IMUData::set_allocated_signalstates(::pb::PDK::IMUData_SignalStates* signalstates) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete signalstates_;
  }
  if (signalstates) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      signalstates = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signalstates, submessage_arena);
    }
    set_has_signalstates();
  } else {
    clear_has_signalstates();
  }
  signalstates_ = signalstates;
  // @@protoc_insertion_point(field_set_allocated:pb.PDK.IMUData.signalStates)
}

// optional .pb.PDK.IMUData.Signals signals = 4;
inline bool IMUData::has_signals() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMUData::set_has_signals() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMUData::clear_has_signals() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMUData::clear_signals() {
  if (signals_ != NULL) signals_->Clear();
  clear_has_signals();
}
inline const ::pb::PDK::IMUData_Signals& IMUData::_internal_signals() const {
  return *signals_;
}
inline const ::pb::PDK::IMUData_Signals& IMUData::signals() const {
  const ::pb::PDK::IMUData_Signals* p = signals_;
  // @@protoc_insertion_point(field_get:pb.PDK.IMUData.signals)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::PDK::IMUData_Signals*>(
      &::pb::PDK::_IMUData_Signals_default_instance_);
}
inline ::pb::PDK::IMUData_Signals* IMUData::release_signals() {
  // @@protoc_insertion_point(field_release:pb.PDK.IMUData.signals)
  clear_has_signals();
  ::pb::PDK::IMUData_Signals* temp = signals_;
  signals_ = NULL;
  return temp;
}
inline ::pb::PDK::IMUData_Signals* IMUData::mutable_signals() {
  set_has_signals();
  if (signals_ == NULL) {
    auto* p = CreateMaybeMessage<::pb::PDK::IMUData_Signals>(GetArenaNoVirtual());
    signals_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.PDK.IMUData.signals)
  return signals_;
}
inline void IMUData::set_allocated_signals(::pb::PDK::IMUData_Signals* signals) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete signals_;
  }
  if (signals) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      signals = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signals, submessage_arena);
    }
    set_has_signals();
  } else {
    clear_has_signals();
  }
  signals_ = signals;
  // @@protoc_insertion_point(field_set_allocated:pb.PDK.IMUData.signals)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PDK
}  // namespace pb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::PDK::IMUData_SignalState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::PDK::IMUData_SignalState>() {
  return ::pb::PDK::IMUData_SignalState_descriptor();
}
template <> struct is_proto_enum< ::pb::PDK::IMUData_SensorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::PDK::IMUData_SensorType>() {
  return ::pb::PDK::IMUData_SensorType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_pdk_5fIMUData_2eproto
