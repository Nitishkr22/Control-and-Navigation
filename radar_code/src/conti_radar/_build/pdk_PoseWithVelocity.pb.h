// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pdk_PoseWithVelocity.proto

#ifndef PROTOBUF_INCLUDED_pdk_5fPoseWithVelocity_2eproto
#define PROTOBUF_INCLUDED_pdk_5fPoseWithVelocity_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "pdk_MsgHeader.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_pdk_5fPoseWithVelocity_2eproto 

namespace protobuf_pdk_5fPoseWithVelocity_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_pdk_5fPoseWithVelocity_2eproto
namespace pb {
namespace PDK {
class PoseWithVelocity;
class PoseWithVelocityDefaultTypeInternal;
extern PoseWithVelocityDefaultTypeInternal _PoseWithVelocity_default_instance_;
class PoseWithVelocity_PoseCartesian;
class PoseWithVelocity_PoseCartesianDefaultTypeInternal;
extern PoseWithVelocity_PoseCartesianDefaultTypeInternal _PoseWithVelocity_PoseCartesian_default_instance_;
class PoseWithVelocity_PoseWGS84;
class PoseWithVelocity_PoseWGS84DefaultTypeInternal;
extern PoseWithVelocity_PoseWGS84DefaultTypeInternal _PoseWithVelocity_PoseWGS84_default_instance_;
class PoseWithVelocity_Velocity;
class PoseWithVelocity_VelocityDefaultTypeInternal;
extern PoseWithVelocity_VelocityDefaultTypeInternal _PoseWithVelocity_Velocity_default_instance_;
}  // namespace PDK
}  // namespace pb
namespace google {
namespace protobuf {
template<> ::pb::PDK::PoseWithVelocity* Arena::CreateMaybeMessage<::pb::PDK::PoseWithVelocity>(Arena*);
template<> ::pb::PDK::PoseWithVelocity_PoseCartesian* Arena::CreateMaybeMessage<::pb::PDK::PoseWithVelocity_PoseCartesian>(Arena*);
template<> ::pb::PDK::PoseWithVelocity_PoseWGS84* Arena::CreateMaybeMessage<::pb::PDK::PoseWithVelocity_PoseWGS84>(Arena*);
template<> ::pb::PDK::PoseWithVelocity_Velocity* Arena::CreateMaybeMessage<::pb::PDK::PoseWithVelocity_Velocity>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pb {
namespace PDK {

enum PoseWithVelocity_SignalStatus {
  PoseWithVelocity_SignalStatus_STATUS_UNKNOWN = 0,
  PoseWithVelocity_SignalStatus_STATUS_INIT = 1,
  PoseWithVelocity_SignalStatus_STATUS_OK = 2,
  PoseWithVelocity_SignalStatus_STATUS_FALLBACK = 3,
  PoseWithVelocity_SignalStatus_STATUS_INVALID = 4
};
bool PoseWithVelocity_SignalStatus_IsValid(int value);
const PoseWithVelocity_SignalStatus PoseWithVelocity_SignalStatus_SignalStatus_MIN = PoseWithVelocity_SignalStatus_STATUS_UNKNOWN;
const PoseWithVelocity_SignalStatus PoseWithVelocity_SignalStatus_SignalStatus_MAX = PoseWithVelocity_SignalStatus_STATUS_INVALID;
const int PoseWithVelocity_SignalStatus_SignalStatus_ARRAYSIZE = PoseWithVelocity_SignalStatus_SignalStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* PoseWithVelocity_SignalStatus_descriptor();
inline const ::std::string& PoseWithVelocity_SignalStatus_Name(PoseWithVelocity_SignalStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    PoseWithVelocity_SignalStatus_descriptor(), value);
}
inline bool PoseWithVelocity_SignalStatus_Parse(
    const ::std::string& name, PoseWithVelocity_SignalStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PoseWithVelocity_SignalStatus>(
    PoseWithVelocity_SignalStatus_descriptor(), name, value);
}
// ===================================================================

class PoseWithVelocity_PoseWGS84 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.PDK.PoseWithVelocity.PoseWGS84) */ {
 public:
  PoseWithVelocity_PoseWGS84();
  virtual ~PoseWithVelocity_PoseWGS84();

  PoseWithVelocity_PoseWGS84(const PoseWithVelocity_PoseWGS84& from);

  inline PoseWithVelocity_PoseWGS84& operator=(const PoseWithVelocity_PoseWGS84& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PoseWithVelocity_PoseWGS84(PoseWithVelocity_PoseWGS84&& from) noexcept
    : PoseWithVelocity_PoseWGS84() {
    *this = ::std::move(from);
  }

  inline PoseWithVelocity_PoseWGS84& operator=(PoseWithVelocity_PoseWGS84&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PoseWithVelocity_PoseWGS84& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PoseWithVelocity_PoseWGS84* internal_default_instance() {
    return reinterpret_cast<const PoseWithVelocity_PoseWGS84*>(
               &_PoseWithVelocity_PoseWGS84_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PoseWithVelocity_PoseWGS84* other);
  friend void swap(PoseWithVelocity_PoseWGS84& a, PoseWithVelocity_PoseWGS84& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PoseWithVelocity_PoseWGS84* New() const final {
    return CreateMaybeMessage<PoseWithVelocity_PoseWGS84>(NULL);
  }

  PoseWithVelocity_PoseWGS84* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PoseWithVelocity_PoseWGS84>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PoseWithVelocity_PoseWGS84& from);
  void MergeFrom(const PoseWithVelocity_PoseWGS84& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoseWithVelocity_PoseWGS84* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double latitude = 1;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 1;
  double latitude() const;
  void set_latitude(double value);

  // optional double longitude = 2;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  double longitude() const;
  void set_longitude(double value);

  // optional float altitude = 3;
  bool has_altitude() const;
  void clear_altitude();
  static const int kAltitudeFieldNumber = 3;
  float altitude() const;
  void set_altitude(float value);

  // optional float heading = 4;
  bool has_heading() const;
  void clear_heading();
  static const int kHeadingFieldNumber = 4;
  float heading() const;
  void set_heading(float value);

  // optional float varLat = 5;
  bool has_varlat() const;
  void clear_varlat();
  static const int kVarLatFieldNumber = 5;
  float varlat() const;
  void set_varlat(float value);

  // optional float varLong = 6;
  bool has_varlong() const;
  void clear_varlong();
  static const int kVarLongFieldNumber = 6;
  float varlong() const;
  void set_varlong(float value);

  // optional float covLatLong = 7;
  bool has_covlatlong() const;
  void clear_covlatlong();
  static const int kCovLatLongFieldNumber = 7;
  float covlatlong() const;
  void set_covlatlong(float value);

  // optional float varAltitude = 8;
  bool has_varaltitude() const;
  void clear_varaltitude();
  static const int kVarAltitudeFieldNumber = 8;
  float varaltitude() const;
  void set_varaltitude(float value);

  // optional float varHeading = 9;
  bool has_varheading() const;
  void clear_varheading();
  static const int kVarHeadingFieldNumber = 9;
  float varheading() const;
  void set_varheading(float value);

  // optional bool valid = 10;
  bool has_valid() const;
  void clear_valid();
  static const int kValidFieldNumber = 10;
  bool valid() const;
  void set_valid(bool value);

  // @@protoc_insertion_point(class_scope:pb.PDK.PoseWithVelocity.PoseWGS84)
 private:
  void set_has_latitude();
  void clear_has_latitude();
  void set_has_longitude();
  void clear_has_longitude();
  void set_has_altitude();
  void clear_has_altitude();
  void set_has_heading();
  void clear_has_heading();
  void set_has_varlat();
  void clear_has_varlat();
  void set_has_varlong();
  void clear_has_varlong();
  void set_has_covlatlong();
  void clear_has_covlatlong();
  void set_has_varaltitude();
  void clear_has_varaltitude();
  void set_has_varheading();
  void clear_has_varheading();
  void set_has_valid();
  void clear_has_valid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double latitude_;
  double longitude_;
  float altitude_;
  float heading_;
  float varlat_;
  float varlong_;
  float covlatlong_;
  float varaltitude_;
  float varheading_;
  bool valid_;
  friend struct ::protobuf_pdk_5fPoseWithVelocity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PoseWithVelocity_PoseCartesian : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.PDK.PoseWithVelocity.PoseCartesian) */ {
 public:
  PoseWithVelocity_PoseCartesian();
  virtual ~PoseWithVelocity_PoseCartesian();

  PoseWithVelocity_PoseCartesian(const PoseWithVelocity_PoseCartesian& from);

  inline PoseWithVelocity_PoseCartesian& operator=(const PoseWithVelocity_PoseCartesian& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PoseWithVelocity_PoseCartesian(PoseWithVelocity_PoseCartesian&& from) noexcept
    : PoseWithVelocity_PoseCartesian() {
    *this = ::std::move(from);
  }

  inline PoseWithVelocity_PoseCartesian& operator=(PoseWithVelocity_PoseCartesian&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PoseWithVelocity_PoseCartesian& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PoseWithVelocity_PoseCartesian* internal_default_instance() {
    return reinterpret_cast<const PoseWithVelocity_PoseCartesian*>(
               &_PoseWithVelocity_PoseCartesian_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PoseWithVelocity_PoseCartesian* other);
  friend void swap(PoseWithVelocity_PoseCartesian& a, PoseWithVelocity_PoseCartesian& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PoseWithVelocity_PoseCartesian* New() const final {
    return CreateMaybeMessage<PoseWithVelocity_PoseCartesian>(NULL);
  }

  PoseWithVelocity_PoseCartesian* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PoseWithVelocity_PoseCartesian>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PoseWithVelocity_PoseCartesian& from);
  void MergeFrom(const PoseWithVelocity_PoseCartesian& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoseWithVelocity_PoseCartesian* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // optional double y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // optional float yaw = 3;
  bool has_yaw() const;
  void clear_yaw();
  static const int kYawFieldNumber = 3;
  float yaw() const;
  void set_yaw(float value);

  // optional float varX = 5;
  bool has_varx() const;
  void clear_varx();
  static const int kVarXFieldNumber = 5;
  float varx() const;
  void set_varx(float value);

  // optional float varY = 6;
  bool has_vary() const;
  void clear_vary();
  static const int kVarYFieldNumber = 6;
  float vary() const;
  void set_vary(float value);

  // optional float covXY = 7;
  bool has_covxy() const;
  void clear_covxy();
  static const int kCovXYFieldNumber = 7;
  float covxy() const;
  void set_covxy(float value);

  // optional float varYaw = 9;
  bool has_varyaw() const;
  void clear_varyaw();
  static const int kVarYawFieldNumber = 9;
  float varyaw() const;
  void set_varyaw(float value);

  // optional bool valid = 10;
  bool has_valid() const;
  void clear_valid();
  static const int kValidFieldNumber = 10;
  bool valid() const;
  void set_valid(bool value);

  // @@protoc_insertion_point(class_scope:pb.PDK.PoseWithVelocity.PoseCartesian)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_yaw();
  void clear_has_yaw();
  void set_has_varx();
  void clear_has_varx();
  void set_has_vary();
  void clear_has_vary();
  void set_has_covxy();
  void clear_has_covxy();
  void set_has_varyaw();
  void clear_has_varyaw();
  void set_has_valid();
  void clear_has_valid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  float yaw_;
  float varx_;
  float vary_;
  float covxy_;
  float varyaw_;
  bool valid_;
  friend struct ::protobuf_pdk_5fPoseWithVelocity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PoseWithVelocity_Velocity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.PDK.PoseWithVelocity.Velocity) */ {
 public:
  PoseWithVelocity_Velocity();
  virtual ~PoseWithVelocity_Velocity();

  PoseWithVelocity_Velocity(const PoseWithVelocity_Velocity& from);

  inline PoseWithVelocity_Velocity& operator=(const PoseWithVelocity_Velocity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PoseWithVelocity_Velocity(PoseWithVelocity_Velocity&& from) noexcept
    : PoseWithVelocity_Velocity() {
    *this = ::std::move(from);
  }

  inline PoseWithVelocity_Velocity& operator=(PoseWithVelocity_Velocity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PoseWithVelocity_Velocity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PoseWithVelocity_Velocity* internal_default_instance() {
    return reinterpret_cast<const PoseWithVelocity_Velocity*>(
               &_PoseWithVelocity_Velocity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PoseWithVelocity_Velocity* other);
  friend void swap(PoseWithVelocity_Velocity& a, PoseWithVelocity_Velocity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PoseWithVelocity_Velocity* New() const final {
    return CreateMaybeMessage<PoseWithVelocity_Velocity>(NULL);
  }

  PoseWithVelocity_Velocity* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PoseWithVelocity_Velocity>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PoseWithVelocity_Velocity& from);
  void MergeFrom(const PoseWithVelocity_Velocity& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoseWithVelocity_Velocity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float vx = 1;
  bool has_vx() const;
  void clear_vx();
  static const int kVxFieldNumber = 1;
  float vx() const;
  void set_vx(float value);

  // optional float vy = 2;
  bool has_vy() const;
  void clear_vy();
  static const int kVyFieldNumber = 2;
  float vy() const;
  void set_vy(float value);

  // optional float yawRate = 3;
  bool has_yawrate() const;
  void clear_yawrate();
  static const int kYawRateFieldNumber = 3;
  float yawrate() const;
  void set_yawrate(float value);

  // optional float varVx = 4;
  bool has_varvx() const;
  void clear_varvx();
  static const int kVarVxFieldNumber = 4;
  float varvx() const;
  void set_varvx(float value);

  // optional float varVy = 5;
  bool has_varvy() const;
  void clear_varvy();
  static const int kVarVyFieldNumber = 5;
  float varvy() const;
  void set_varvy(float value);

  // optional float covVxVy = 6;
  bool has_covvxvy() const;
  void clear_covvxvy();
  static const int kCovVxVyFieldNumber = 6;
  float covvxvy() const;
  void set_covvxvy(float value);

  // optional float varYawRate = 7;
  bool has_varyawrate() const;
  void clear_varyawrate();
  static const int kVarYawRateFieldNumber = 7;
  float varyawrate() const;
  void set_varyawrate(float value);

  // optional bool valid = 8;
  bool has_valid() const;
  void clear_valid();
  static const int kValidFieldNumber = 8;
  bool valid() const;
  void set_valid(bool value);

  // @@protoc_insertion_point(class_scope:pb.PDK.PoseWithVelocity.Velocity)
 private:
  void set_has_vx();
  void clear_has_vx();
  void set_has_vy();
  void clear_has_vy();
  void set_has_yawrate();
  void clear_has_yawrate();
  void set_has_varvx();
  void clear_has_varvx();
  void set_has_varvy();
  void clear_has_varvy();
  void set_has_covvxvy();
  void clear_has_covvxvy();
  void set_has_varyawrate();
  void clear_has_varyawrate();
  void set_has_valid();
  void clear_has_valid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float vx_;
  float vy_;
  float yawrate_;
  float varvx_;
  float varvy_;
  float covvxvy_;
  float varyawrate_;
  bool valid_;
  friend struct ::protobuf_pdk_5fPoseWithVelocity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PoseWithVelocity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.PDK.PoseWithVelocity) */ {
 public:
  PoseWithVelocity();
  virtual ~PoseWithVelocity();

  PoseWithVelocity(const PoseWithVelocity& from);

  inline PoseWithVelocity& operator=(const PoseWithVelocity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PoseWithVelocity(PoseWithVelocity&& from) noexcept
    : PoseWithVelocity() {
    *this = ::std::move(from);
  }

  inline PoseWithVelocity& operator=(PoseWithVelocity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PoseWithVelocity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PoseWithVelocity* internal_default_instance() {
    return reinterpret_cast<const PoseWithVelocity*>(
               &_PoseWithVelocity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PoseWithVelocity* other);
  friend void swap(PoseWithVelocity& a, PoseWithVelocity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PoseWithVelocity* New() const final {
    return CreateMaybeMessage<PoseWithVelocity>(NULL);
  }

  PoseWithVelocity* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PoseWithVelocity>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PoseWithVelocity& from);
  void MergeFrom(const PoseWithVelocity& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoseWithVelocity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PoseWithVelocity_PoseWGS84 PoseWGS84;
  typedef PoseWithVelocity_PoseCartesian PoseCartesian;
  typedef PoseWithVelocity_Velocity Velocity;

  typedef PoseWithVelocity_SignalStatus SignalStatus;
  static const SignalStatus STATUS_UNKNOWN =
    PoseWithVelocity_SignalStatus_STATUS_UNKNOWN;
  static const SignalStatus STATUS_INIT =
    PoseWithVelocity_SignalStatus_STATUS_INIT;
  static const SignalStatus STATUS_OK =
    PoseWithVelocity_SignalStatus_STATUS_OK;
  static const SignalStatus STATUS_FALLBACK =
    PoseWithVelocity_SignalStatus_STATUS_FALLBACK;
  static const SignalStatus STATUS_INVALID =
    PoseWithVelocity_SignalStatus_STATUS_INVALID;
  static inline bool SignalStatus_IsValid(int value) {
    return PoseWithVelocity_SignalStatus_IsValid(value);
  }
  static const SignalStatus SignalStatus_MIN =
    PoseWithVelocity_SignalStatus_SignalStatus_MIN;
  static const SignalStatus SignalStatus_MAX =
    PoseWithVelocity_SignalStatus_SignalStatus_MAX;
  static const int SignalStatus_ARRAYSIZE =
    PoseWithVelocity_SignalStatus_SignalStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SignalStatus_descriptor() {
    return PoseWithVelocity_SignalStatus_descriptor();
  }
  static inline const ::std::string& SignalStatus_Name(SignalStatus value) {
    return PoseWithVelocity_SignalStatus_Name(value);
  }
  static inline bool SignalStatus_Parse(const ::std::string& name,
      SignalStatus* value) {
    return PoseWithVelocity_SignalStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string referenceFrame = 2;
  bool has_referenceframe() const;
  void clear_referenceframe();
  static const int kReferenceFrameFieldNumber = 2;
  const ::std::string& referenceframe() const;
  void set_referenceframe(const ::std::string& value);
  #if LANG_CXX11
  void set_referenceframe(::std::string&& value);
  #endif
  void set_referenceframe(const char* value);
  void set_referenceframe(const char* value, size_t size);
  ::std::string* mutable_referenceframe();
  ::std::string* release_referenceframe();
  void set_allocated_referenceframe(::std::string* referenceframe);

  // optional .pb.PDK.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::pb::PDK::MsgHeader& _internal_header() const;
  public:
  const ::pb::PDK::MsgHeader& header() const;
  ::pb::PDK::MsgHeader* release_header();
  ::pb::PDK::MsgHeader* mutable_header();
  void set_allocated_header(::pb::PDK::MsgHeader* header);

  // optional .pb.PDK.PoseWithVelocity.PoseWGS84 poseWGS84 = 3;
  bool has_posewgs84() const;
  void clear_posewgs84();
  static const int kPoseWGS84FieldNumber = 3;
  private:
  const ::pb::PDK::PoseWithVelocity_PoseWGS84& _internal_posewgs84() const;
  public:
  const ::pb::PDK::PoseWithVelocity_PoseWGS84& posewgs84() const;
  ::pb::PDK::PoseWithVelocity_PoseWGS84* release_posewgs84();
  ::pb::PDK::PoseWithVelocity_PoseWGS84* mutable_posewgs84();
  void set_allocated_posewgs84(::pb::PDK::PoseWithVelocity_PoseWGS84* posewgs84);

  // optional .pb.PDK.PoseWithVelocity.PoseCartesian poseCartesian = 4;
  bool has_posecartesian() const;
  void clear_posecartesian();
  static const int kPoseCartesianFieldNumber = 4;
  private:
  const ::pb::PDK::PoseWithVelocity_PoseCartesian& _internal_posecartesian() const;
  public:
  const ::pb::PDK::PoseWithVelocity_PoseCartesian& posecartesian() const;
  ::pb::PDK::PoseWithVelocity_PoseCartesian* release_posecartesian();
  ::pb::PDK::PoseWithVelocity_PoseCartesian* mutable_posecartesian();
  void set_allocated_posecartesian(::pb::PDK::PoseWithVelocity_PoseCartesian* posecartesian);

  // optional .pb.PDK.PoseWithVelocity.Velocity velocity = 5;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 5;
  private:
  const ::pb::PDK::PoseWithVelocity_Velocity& _internal_velocity() const;
  public:
  const ::pb::PDK::PoseWithVelocity_Velocity& velocity() const;
  ::pb::PDK::PoseWithVelocity_Velocity* release_velocity();
  ::pb::PDK::PoseWithVelocity_Velocity* mutable_velocity();
  void set_allocated_velocity(::pb::PDK::PoseWithVelocity_Velocity* velocity);

  // optional float confidence = 6;
  bool has_confidence() const;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 6;
  float confidence() const;
  void set_confidence(float value);

  // optional .pb.PDK.PoseWithVelocity.SignalStatus signalStatus = 7;
  bool has_signalstatus() const;
  void clear_signalstatus();
  static const int kSignalStatusFieldNumber = 7;
  ::pb::PDK::PoseWithVelocity_SignalStatus signalstatus() const;
  void set_signalstatus(::pb::PDK::PoseWithVelocity_SignalStatus value);

  // @@protoc_insertion_point(class_scope:pb.PDK.PoseWithVelocity)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_referenceframe();
  void clear_has_referenceframe();
  void set_has_posewgs84();
  void clear_has_posewgs84();
  void set_has_posecartesian();
  void clear_has_posecartesian();
  void set_has_velocity();
  void clear_has_velocity();
  void set_has_confidence();
  void clear_has_confidence();
  void set_has_signalstatus();
  void clear_has_signalstatus();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr referenceframe_;
  ::pb::PDK::MsgHeader* header_;
  ::pb::PDK::PoseWithVelocity_PoseWGS84* posewgs84_;
  ::pb::PDK::PoseWithVelocity_PoseCartesian* posecartesian_;
  ::pb::PDK::PoseWithVelocity_Velocity* velocity_;
  float confidence_;
  int signalstatus_;
  friend struct ::protobuf_pdk_5fPoseWithVelocity_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PoseWithVelocity_PoseWGS84

// optional double latitude = 1;
inline bool PoseWithVelocity_PoseWGS84::has_latitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PoseWithVelocity_PoseWGS84::set_has_latitude() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PoseWithVelocity_PoseWGS84::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PoseWithVelocity_PoseWGS84::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double PoseWithVelocity_PoseWGS84::latitude() const {
  // @@protoc_insertion_point(field_get:pb.PDK.PoseWithVelocity.PoseWGS84.latitude)
  return latitude_;
}
inline void PoseWithVelocity_PoseWGS84::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.PoseWithVelocity.PoseWGS84.latitude)
}

// optional double longitude = 2;
inline bool PoseWithVelocity_PoseWGS84::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PoseWithVelocity_PoseWGS84::set_has_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PoseWithVelocity_PoseWGS84::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PoseWithVelocity_PoseWGS84::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double PoseWithVelocity_PoseWGS84::longitude() const {
  // @@protoc_insertion_point(field_get:pb.PDK.PoseWithVelocity.PoseWGS84.longitude)
  return longitude_;
}
inline void PoseWithVelocity_PoseWGS84::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.PoseWithVelocity.PoseWGS84.longitude)
}

// optional float altitude = 3;
inline bool PoseWithVelocity_PoseWGS84::has_altitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PoseWithVelocity_PoseWGS84::set_has_altitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PoseWithVelocity_PoseWGS84::clear_has_altitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PoseWithVelocity_PoseWGS84::clear_altitude() {
  altitude_ = 0;
  clear_has_altitude();
}
inline float PoseWithVelocity_PoseWGS84::altitude() const {
  // @@protoc_insertion_point(field_get:pb.PDK.PoseWithVelocity.PoseWGS84.altitude)
  return altitude_;
}
inline void PoseWithVelocity_PoseWGS84::set_altitude(float value) {
  set_has_altitude();
  altitude_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.PoseWithVelocity.PoseWGS84.altitude)
}

// optional float heading = 4;
inline bool PoseWithVelocity_PoseWGS84::has_heading() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PoseWithVelocity_PoseWGS84::set_has_heading() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PoseWithVelocity_PoseWGS84::clear_has_heading() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PoseWithVelocity_PoseWGS84::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
inline float PoseWithVelocity_PoseWGS84::heading() const {
  // @@protoc_insertion_point(field_get:pb.PDK.PoseWithVelocity.PoseWGS84.heading)
  return heading_;
}
inline void PoseWithVelocity_PoseWGS84::set_heading(float value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.PoseWithVelocity.PoseWGS84.heading)
}

// optional float varLat = 5;
inline bool PoseWithVelocity_PoseWGS84::has_varlat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PoseWithVelocity_PoseWGS84::set_has_varlat() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PoseWithVelocity_PoseWGS84::clear_has_varlat() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PoseWithVelocity_PoseWGS84::clear_varlat() {
  varlat_ = 0;
  clear_has_varlat();
}
inline float PoseWithVelocity_PoseWGS84::varlat() const {
  // @@protoc_insertion_point(field_get:pb.PDK.PoseWithVelocity.PoseWGS84.varLat)
  return varlat_;
}
inline void PoseWithVelocity_PoseWGS84::set_varlat(float value) {
  set_has_varlat();
  varlat_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.PoseWithVelocity.PoseWGS84.varLat)
}

// optional float varLong = 6;
inline bool PoseWithVelocity_PoseWGS84::has_varlong() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PoseWithVelocity_PoseWGS84::set_has_varlong() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PoseWithVelocity_PoseWGS84::clear_has_varlong() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PoseWithVelocity_PoseWGS84::clear_varlong() {
  varlong_ = 0;
  clear_has_varlong();
}
inline float PoseWithVelocity_PoseWGS84::varlong() const {
  // @@protoc_insertion_point(field_get:pb.PDK.PoseWithVelocity.PoseWGS84.varLong)
  return varlong_;
}
inline void PoseWithVelocity_PoseWGS84::set_varlong(float value) {
  set_has_varlong();
  varlong_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.PoseWithVelocity.PoseWGS84.varLong)
}

// optional float covLatLong = 7;
inline bool PoseWithVelocity_PoseWGS84::has_covlatlong() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PoseWithVelocity_PoseWGS84::set_has_covlatlong() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PoseWithVelocity_PoseWGS84::clear_has_covlatlong() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PoseWithVelocity_PoseWGS84::clear_covlatlong() {
  covlatlong_ = 0;
  clear_has_covlatlong();
}
inline float PoseWithVelocity_PoseWGS84::covlatlong() const {
  // @@protoc_insertion_point(field_get:pb.PDK.PoseWithVelocity.PoseWGS84.covLatLong)
  return covlatlong_;
}
inline void PoseWithVelocity_PoseWGS84::set_covlatlong(float value) {
  set_has_covlatlong();
  covlatlong_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.PoseWithVelocity.PoseWGS84.covLatLong)
}

// optional float varAltitude = 8;
inline bool PoseWithVelocity_PoseWGS84::has_varaltitude() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PoseWithVelocity_PoseWGS84::set_has_varaltitude() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PoseWithVelocity_PoseWGS84::clear_has_varaltitude() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PoseWithVelocity_PoseWGS84::clear_varaltitude() {
  varaltitude_ = 0;
  clear_has_varaltitude();
}
inline float PoseWithVelocity_PoseWGS84::varaltitude() const {
  // @@protoc_insertion_point(field_get:pb.PDK.PoseWithVelocity.PoseWGS84.varAltitude)
  return varaltitude_;
}
inline void PoseWithVelocity_PoseWGS84::set_varaltitude(float value) {
  set_has_varaltitude();
  varaltitude_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.PoseWithVelocity.PoseWGS84.varAltitude)
}

// optional float varHeading = 9;
inline bool PoseWithVelocity_PoseWGS84::has_varheading() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PoseWithVelocity_PoseWGS84::set_has_varheading() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PoseWithVelocity_PoseWGS84::clear_has_varheading() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PoseWithVelocity_PoseWGS84::clear_varheading() {
  varheading_ = 0;
  clear_has_varheading();
}
inline float PoseWithVelocity_PoseWGS84::varheading() const {
  // @@protoc_insertion_point(field_get:pb.PDK.PoseWithVelocity.PoseWGS84.varHeading)
  return varheading_;
}
inline void PoseWithVelocity_PoseWGS84::set_varheading(float value) {
  set_has_varheading();
  varheading_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.PoseWithVelocity.PoseWGS84.varHeading)
}

// optional bool valid = 10;
inline bool PoseWithVelocity_PoseWGS84::has_valid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PoseWithVelocity_PoseWGS84::set_has_valid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PoseWithVelocity_PoseWGS84::clear_has_valid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PoseWithVelocity_PoseWGS84::clear_valid() {
  valid_ = false;
  clear_has_valid();
}
inline bool PoseWithVelocity_PoseWGS84::valid() const {
  // @@protoc_insertion_point(field_get:pb.PDK.PoseWithVelocity.PoseWGS84.valid)
  return valid_;
}
inline void PoseWithVelocity_PoseWGS84::set_valid(bool value) {
  set_has_valid();
  valid_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.PoseWithVelocity.PoseWGS84.valid)
}

// -------------------------------------------------------------------

// PoseWithVelocity_PoseCartesian

// optional double x = 1;
inline bool PoseWithVelocity_PoseCartesian::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PoseWithVelocity_PoseCartesian::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PoseWithVelocity_PoseCartesian::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PoseWithVelocity_PoseCartesian::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double PoseWithVelocity_PoseCartesian::x() const {
  // @@protoc_insertion_point(field_get:pb.PDK.PoseWithVelocity.PoseCartesian.x)
  return x_;
}
inline void PoseWithVelocity_PoseCartesian::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.PoseWithVelocity.PoseCartesian.x)
}

// optional double y = 2;
inline bool PoseWithVelocity_PoseCartesian::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PoseWithVelocity_PoseCartesian::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PoseWithVelocity_PoseCartesian::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PoseWithVelocity_PoseCartesian::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double PoseWithVelocity_PoseCartesian::y() const {
  // @@protoc_insertion_point(field_get:pb.PDK.PoseWithVelocity.PoseCartesian.y)
  return y_;
}
inline void PoseWithVelocity_PoseCartesian::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.PoseWithVelocity.PoseCartesian.y)
}

// optional float yaw = 3;
inline bool PoseWithVelocity_PoseCartesian::has_yaw() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PoseWithVelocity_PoseCartesian::set_has_yaw() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PoseWithVelocity_PoseCartesian::clear_has_yaw() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PoseWithVelocity_PoseCartesian::clear_yaw() {
  yaw_ = 0;
  clear_has_yaw();
}
inline float PoseWithVelocity_PoseCartesian::yaw() const {
  // @@protoc_insertion_point(field_get:pb.PDK.PoseWithVelocity.PoseCartesian.yaw)
  return yaw_;
}
inline void PoseWithVelocity_PoseCartesian::set_yaw(float value) {
  set_has_yaw();
  yaw_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.PoseWithVelocity.PoseCartesian.yaw)
}

// optional float varX = 5;
inline bool PoseWithVelocity_PoseCartesian::has_varx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PoseWithVelocity_PoseCartesian::set_has_varx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PoseWithVelocity_PoseCartesian::clear_has_varx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PoseWithVelocity_PoseCartesian::clear_varx() {
  varx_ = 0;
  clear_has_varx();
}
inline float PoseWithVelocity_PoseCartesian::varx() const {
  // @@protoc_insertion_point(field_get:pb.PDK.PoseWithVelocity.PoseCartesian.varX)
  return varx_;
}
inline void PoseWithVelocity_PoseCartesian::set_varx(float value) {
  set_has_varx();
  varx_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.PoseWithVelocity.PoseCartesian.varX)
}

// optional float varY = 6;
inline bool PoseWithVelocity_PoseCartesian::has_vary() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PoseWithVelocity_PoseCartesian::set_has_vary() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PoseWithVelocity_PoseCartesian::clear_has_vary() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PoseWithVelocity_PoseCartesian::clear_vary() {
  vary_ = 0;
  clear_has_vary();
}
inline float PoseWithVelocity_PoseCartesian::vary() const {
  // @@protoc_insertion_point(field_get:pb.PDK.PoseWithVelocity.PoseCartesian.varY)
  return vary_;
}
inline void PoseWithVelocity_PoseCartesian::set_vary(float value) {
  set_has_vary();
  vary_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.PoseWithVelocity.PoseCartesian.varY)
}

// optional float covXY = 7;
inline bool PoseWithVelocity_PoseCartesian::has_covxy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PoseWithVelocity_PoseCartesian::set_has_covxy() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PoseWithVelocity_PoseCartesian::clear_has_covxy() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PoseWithVelocity_PoseCartesian::clear_covxy() {
  covxy_ = 0;
  clear_has_covxy();
}
inline float PoseWithVelocity_PoseCartesian::covxy() const {
  // @@protoc_insertion_point(field_get:pb.PDK.PoseWithVelocity.PoseCartesian.covXY)
  return covxy_;
}
inline void PoseWithVelocity_PoseCartesian::set_covxy(float value) {
  set_has_covxy();
  covxy_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.PoseWithVelocity.PoseCartesian.covXY)
}

// optional float varYaw = 9;
inline bool PoseWithVelocity_PoseCartesian::has_varyaw() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PoseWithVelocity_PoseCartesian::set_has_varyaw() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PoseWithVelocity_PoseCartesian::clear_has_varyaw() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PoseWithVelocity_PoseCartesian::clear_varyaw() {
  varyaw_ = 0;
  clear_has_varyaw();
}
inline float PoseWithVelocity_PoseCartesian::varyaw() const {
  // @@protoc_insertion_point(field_get:pb.PDK.PoseWithVelocity.PoseCartesian.varYaw)
  return varyaw_;
}
inline void PoseWithVelocity_PoseCartesian::set_varyaw(float value) {
  set_has_varyaw();
  varyaw_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.PoseWithVelocity.PoseCartesian.varYaw)
}

// optional bool valid = 10;
inline bool PoseWithVelocity_PoseCartesian::has_valid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PoseWithVelocity_PoseCartesian::set_has_valid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PoseWithVelocity_PoseCartesian::clear_has_valid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PoseWithVelocity_PoseCartesian::clear_valid() {
  valid_ = false;
  clear_has_valid();
}
inline bool PoseWithVelocity_PoseCartesian::valid() const {
  // @@protoc_insertion_point(field_get:pb.PDK.PoseWithVelocity.PoseCartesian.valid)
  return valid_;
}
inline void PoseWithVelocity_PoseCartesian::set_valid(bool value) {
  set_has_valid();
  valid_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.PoseWithVelocity.PoseCartesian.valid)
}

// -------------------------------------------------------------------

// PoseWithVelocity_Velocity

// optional float vx = 1;
inline bool PoseWithVelocity_Velocity::has_vx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PoseWithVelocity_Velocity::set_has_vx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PoseWithVelocity_Velocity::clear_has_vx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PoseWithVelocity_Velocity::clear_vx() {
  vx_ = 0;
  clear_has_vx();
}
inline float PoseWithVelocity_Velocity::vx() const {
  // @@protoc_insertion_point(field_get:pb.PDK.PoseWithVelocity.Velocity.vx)
  return vx_;
}
inline void PoseWithVelocity_Velocity::set_vx(float value) {
  set_has_vx();
  vx_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.PoseWithVelocity.Velocity.vx)
}

// optional float vy = 2;
inline bool PoseWithVelocity_Velocity::has_vy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PoseWithVelocity_Velocity::set_has_vy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PoseWithVelocity_Velocity::clear_has_vy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PoseWithVelocity_Velocity::clear_vy() {
  vy_ = 0;
  clear_has_vy();
}
inline float PoseWithVelocity_Velocity::vy() const {
  // @@protoc_insertion_point(field_get:pb.PDK.PoseWithVelocity.Velocity.vy)
  return vy_;
}
inline void PoseWithVelocity_Velocity::set_vy(float value) {
  set_has_vy();
  vy_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.PoseWithVelocity.Velocity.vy)
}

// optional float yawRate = 3;
inline bool PoseWithVelocity_Velocity::has_yawrate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PoseWithVelocity_Velocity::set_has_yawrate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PoseWithVelocity_Velocity::clear_has_yawrate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PoseWithVelocity_Velocity::clear_yawrate() {
  yawrate_ = 0;
  clear_has_yawrate();
}
inline float PoseWithVelocity_Velocity::yawrate() const {
  // @@protoc_insertion_point(field_get:pb.PDK.PoseWithVelocity.Velocity.yawRate)
  return yawrate_;
}
inline void PoseWithVelocity_Velocity::set_yawrate(float value) {
  set_has_yawrate();
  yawrate_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.PoseWithVelocity.Velocity.yawRate)
}

// optional float varVx = 4;
inline bool PoseWithVelocity_Velocity::has_varvx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PoseWithVelocity_Velocity::set_has_varvx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PoseWithVelocity_Velocity::clear_has_varvx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PoseWithVelocity_Velocity::clear_varvx() {
  varvx_ = 0;
  clear_has_varvx();
}
inline float PoseWithVelocity_Velocity::varvx() const {
  // @@protoc_insertion_point(field_get:pb.PDK.PoseWithVelocity.Velocity.varVx)
  return varvx_;
}
inline void PoseWithVelocity_Velocity::set_varvx(float value) {
  set_has_varvx();
  varvx_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.PoseWithVelocity.Velocity.varVx)
}

// optional float varVy = 5;
inline bool PoseWithVelocity_Velocity::has_varvy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PoseWithVelocity_Velocity::set_has_varvy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PoseWithVelocity_Velocity::clear_has_varvy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PoseWithVelocity_Velocity::clear_varvy() {
  varvy_ = 0;
  clear_has_varvy();
}
inline float PoseWithVelocity_Velocity::varvy() const {
  // @@protoc_insertion_point(field_get:pb.PDK.PoseWithVelocity.Velocity.varVy)
  return varvy_;
}
inline void PoseWithVelocity_Velocity::set_varvy(float value) {
  set_has_varvy();
  varvy_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.PoseWithVelocity.Velocity.varVy)
}

// optional float covVxVy = 6;
inline bool PoseWithVelocity_Velocity::has_covvxvy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PoseWithVelocity_Velocity::set_has_covvxvy() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PoseWithVelocity_Velocity::clear_has_covvxvy() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PoseWithVelocity_Velocity::clear_covvxvy() {
  covvxvy_ = 0;
  clear_has_covvxvy();
}
inline float PoseWithVelocity_Velocity::covvxvy() const {
  // @@protoc_insertion_point(field_get:pb.PDK.PoseWithVelocity.Velocity.covVxVy)
  return covvxvy_;
}
inline void PoseWithVelocity_Velocity::set_covvxvy(float value) {
  set_has_covvxvy();
  covvxvy_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.PoseWithVelocity.Velocity.covVxVy)
}

// optional float varYawRate = 7;
inline bool PoseWithVelocity_Velocity::has_varyawrate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PoseWithVelocity_Velocity::set_has_varyawrate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PoseWithVelocity_Velocity::clear_has_varyawrate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PoseWithVelocity_Velocity::clear_varyawrate() {
  varyawrate_ = 0;
  clear_has_varyawrate();
}
inline float PoseWithVelocity_Velocity::varyawrate() const {
  // @@protoc_insertion_point(field_get:pb.PDK.PoseWithVelocity.Velocity.varYawRate)
  return varyawrate_;
}
inline void PoseWithVelocity_Velocity::set_varyawrate(float value) {
  set_has_varyawrate();
  varyawrate_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.PoseWithVelocity.Velocity.varYawRate)
}

// optional bool valid = 8;
inline bool PoseWithVelocity_Velocity::has_valid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PoseWithVelocity_Velocity::set_has_valid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PoseWithVelocity_Velocity::clear_has_valid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PoseWithVelocity_Velocity::clear_valid() {
  valid_ = false;
  clear_has_valid();
}
inline bool PoseWithVelocity_Velocity::valid() const {
  // @@protoc_insertion_point(field_get:pb.PDK.PoseWithVelocity.Velocity.valid)
  return valid_;
}
inline void PoseWithVelocity_Velocity::set_valid(bool value) {
  set_has_valid();
  valid_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.PoseWithVelocity.Velocity.valid)
}

// -------------------------------------------------------------------

// PoseWithVelocity

// optional .pb.PDK.MsgHeader header = 1;
inline bool PoseWithVelocity::has_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PoseWithVelocity::set_has_header() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PoseWithVelocity::clear_has_header() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::pb::PDK::MsgHeader& PoseWithVelocity::_internal_header() const {
  return *header_;
}
inline const ::pb::PDK::MsgHeader& PoseWithVelocity::header() const {
  const ::pb::PDK::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:pb.PDK.PoseWithVelocity.header)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::PDK::MsgHeader*>(
      &::pb::PDK::_MsgHeader_default_instance_);
}
inline ::pb::PDK::MsgHeader* PoseWithVelocity::release_header() {
  // @@protoc_insertion_point(field_release:pb.PDK.PoseWithVelocity.header)
  clear_has_header();
  ::pb::PDK::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::pb::PDK::MsgHeader* PoseWithVelocity::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::pb::PDK::MsgHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.PDK.PoseWithVelocity.header)
  return header_;
}
inline void PoseWithVelocity::set_allocated_header(::pb::PDK::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:pb.PDK.PoseWithVelocity.header)
}

// optional string referenceFrame = 2;
inline bool PoseWithVelocity::has_referenceframe() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PoseWithVelocity::set_has_referenceframe() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PoseWithVelocity::clear_has_referenceframe() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PoseWithVelocity::clear_referenceframe() {
  referenceframe_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_referenceframe();
}
inline const ::std::string& PoseWithVelocity::referenceframe() const {
  // @@protoc_insertion_point(field_get:pb.PDK.PoseWithVelocity.referenceFrame)
  return referenceframe_.GetNoArena();
}
inline void PoseWithVelocity::set_referenceframe(const ::std::string& value) {
  set_has_referenceframe();
  referenceframe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.PDK.PoseWithVelocity.referenceFrame)
}
#if LANG_CXX11
inline void PoseWithVelocity::set_referenceframe(::std::string&& value) {
  set_has_referenceframe();
  referenceframe_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.PDK.PoseWithVelocity.referenceFrame)
}
#endif
inline void PoseWithVelocity::set_referenceframe(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_referenceframe();
  referenceframe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.PDK.PoseWithVelocity.referenceFrame)
}
inline void PoseWithVelocity::set_referenceframe(const char* value, size_t size) {
  set_has_referenceframe();
  referenceframe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.PDK.PoseWithVelocity.referenceFrame)
}
inline ::std::string* PoseWithVelocity::mutable_referenceframe() {
  set_has_referenceframe();
  // @@protoc_insertion_point(field_mutable:pb.PDK.PoseWithVelocity.referenceFrame)
  return referenceframe_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PoseWithVelocity::release_referenceframe() {
  // @@protoc_insertion_point(field_release:pb.PDK.PoseWithVelocity.referenceFrame)
  if (!has_referenceframe()) {
    return NULL;
  }
  clear_has_referenceframe();
  return referenceframe_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PoseWithVelocity::set_allocated_referenceframe(::std::string* referenceframe) {
  if (referenceframe != NULL) {
    set_has_referenceframe();
  } else {
    clear_has_referenceframe();
  }
  referenceframe_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), referenceframe);
  // @@protoc_insertion_point(field_set_allocated:pb.PDK.PoseWithVelocity.referenceFrame)
}

// optional .pb.PDK.PoseWithVelocity.PoseWGS84 poseWGS84 = 3;
inline bool PoseWithVelocity::has_posewgs84() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PoseWithVelocity::set_has_posewgs84() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PoseWithVelocity::clear_has_posewgs84() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PoseWithVelocity::clear_posewgs84() {
  if (posewgs84_ != NULL) posewgs84_->Clear();
  clear_has_posewgs84();
}
inline const ::pb::PDK::PoseWithVelocity_PoseWGS84& PoseWithVelocity::_internal_posewgs84() const {
  return *posewgs84_;
}
inline const ::pb::PDK::PoseWithVelocity_PoseWGS84& PoseWithVelocity::posewgs84() const {
  const ::pb::PDK::PoseWithVelocity_PoseWGS84* p = posewgs84_;
  // @@protoc_insertion_point(field_get:pb.PDK.PoseWithVelocity.poseWGS84)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::PDK::PoseWithVelocity_PoseWGS84*>(
      &::pb::PDK::_PoseWithVelocity_PoseWGS84_default_instance_);
}
inline ::pb::PDK::PoseWithVelocity_PoseWGS84* PoseWithVelocity::release_posewgs84() {
  // @@protoc_insertion_point(field_release:pb.PDK.PoseWithVelocity.poseWGS84)
  clear_has_posewgs84();
  ::pb::PDK::PoseWithVelocity_PoseWGS84* temp = posewgs84_;
  posewgs84_ = NULL;
  return temp;
}
inline ::pb::PDK::PoseWithVelocity_PoseWGS84* PoseWithVelocity::mutable_posewgs84() {
  set_has_posewgs84();
  if (posewgs84_ == NULL) {
    auto* p = CreateMaybeMessage<::pb::PDK::PoseWithVelocity_PoseWGS84>(GetArenaNoVirtual());
    posewgs84_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.PDK.PoseWithVelocity.poseWGS84)
  return posewgs84_;
}
inline void PoseWithVelocity::set_allocated_posewgs84(::pb::PDK::PoseWithVelocity_PoseWGS84* posewgs84) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete posewgs84_;
  }
  if (posewgs84) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      posewgs84 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, posewgs84, submessage_arena);
    }
    set_has_posewgs84();
  } else {
    clear_has_posewgs84();
  }
  posewgs84_ = posewgs84;
  // @@protoc_insertion_point(field_set_allocated:pb.PDK.PoseWithVelocity.poseWGS84)
}

// optional .pb.PDK.PoseWithVelocity.PoseCartesian poseCartesian = 4;
inline bool PoseWithVelocity::has_posecartesian() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PoseWithVelocity::set_has_posecartesian() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PoseWithVelocity::clear_has_posecartesian() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PoseWithVelocity::clear_posecartesian() {
  if (posecartesian_ != NULL) posecartesian_->Clear();
  clear_has_posecartesian();
}
inline const ::pb::PDK::PoseWithVelocity_PoseCartesian& PoseWithVelocity::_internal_posecartesian() const {
  return *posecartesian_;
}
inline const ::pb::PDK::PoseWithVelocity_PoseCartesian& PoseWithVelocity::posecartesian() const {
  const ::pb::PDK::PoseWithVelocity_PoseCartesian* p = posecartesian_;
  // @@protoc_insertion_point(field_get:pb.PDK.PoseWithVelocity.poseCartesian)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::PDK::PoseWithVelocity_PoseCartesian*>(
      &::pb::PDK::_PoseWithVelocity_PoseCartesian_default_instance_);
}
inline ::pb::PDK::PoseWithVelocity_PoseCartesian* PoseWithVelocity::release_posecartesian() {
  // @@protoc_insertion_point(field_release:pb.PDK.PoseWithVelocity.poseCartesian)
  clear_has_posecartesian();
  ::pb::PDK::PoseWithVelocity_PoseCartesian* temp = posecartesian_;
  posecartesian_ = NULL;
  return temp;
}
inline ::pb::PDK::PoseWithVelocity_PoseCartesian* PoseWithVelocity::mutable_posecartesian() {
  set_has_posecartesian();
  if (posecartesian_ == NULL) {
    auto* p = CreateMaybeMessage<::pb::PDK::PoseWithVelocity_PoseCartesian>(GetArenaNoVirtual());
    posecartesian_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.PDK.PoseWithVelocity.poseCartesian)
  return posecartesian_;
}
inline void PoseWithVelocity::set_allocated_posecartesian(::pb::PDK::PoseWithVelocity_PoseCartesian* posecartesian) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete posecartesian_;
  }
  if (posecartesian) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      posecartesian = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, posecartesian, submessage_arena);
    }
    set_has_posecartesian();
  } else {
    clear_has_posecartesian();
  }
  posecartesian_ = posecartesian;
  // @@protoc_insertion_point(field_set_allocated:pb.PDK.PoseWithVelocity.poseCartesian)
}

// optional .pb.PDK.PoseWithVelocity.Velocity velocity = 5;
inline bool PoseWithVelocity::has_velocity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PoseWithVelocity::set_has_velocity() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PoseWithVelocity::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PoseWithVelocity::clear_velocity() {
  if (velocity_ != NULL) velocity_->Clear();
  clear_has_velocity();
}
inline const ::pb::PDK::PoseWithVelocity_Velocity& PoseWithVelocity::_internal_velocity() const {
  return *velocity_;
}
inline const ::pb::PDK::PoseWithVelocity_Velocity& PoseWithVelocity::velocity() const {
  const ::pb::PDK::PoseWithVelocity_Velocity* p = velocity_;
  // @@protoc_insertion_point(field_get:pb.PDK.PoseWithVelocity.velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::PDK::PoseWithVelocity_Velocity*>(
      &::pb::PDK::_PoseWithVelocity_Velocity_default_instance_);
}
inline ::pb::PDK::PoseWithVelocity_Velocity* PoseWithVelocity::release_velocity() {
  // @@protoc_insertion_point(field_release:pb.PDK.PoseWithVelocity.velocity)
  clear_has_velocity();
  ::pb::PDK::PoseWithVelocity_Velocity* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline ::pb::PDK::PoseWithVelocity_Velocity* PoseWithVelocity::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    auto* p = CreateMaybeMessage<::pb::PDK::PoseWithVelocity_Velocity>(GetArenaNoVirtual());
    velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.PDK.PoseWithVelocity.velocity)
  return velocity_;
}
inline void PoseWithVelocity::set_allocated_velocity(::pb::PDK::PoseWithVelocity_Velocity* velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete velocity_;
  }
  if (velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:pb.PDK.PoseWithVelocity.velocity)
}

// optional float confidence = 6;
inline bool PoseWithVelocity::has_confidence() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PoseWithVelocity::set_has_confidence() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PoseWithVelocity::clear_has_confidence() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PoseWithVelocity::clear_confidence() {
  confidence_ = 0;
  clear_has_confidence();
}
inline float PoseWithVelocity::confidence() const {
  // @@protoc_insertion_point(field_get:pb.PDK.PoseWithVelocity.confidence)
  return confidence_;
}
inline void PoseWithVelocity::set_confidence(float value) {
  set_has_confidence();
  confidence_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.PoseWithVelocity.confidence)
}

// optional .pb.PDK.PoseWithVelocity.SignalStatus signalStatus = 7;
inline bool PoseWithVelocity::has_signalstatus() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PoseWithVelocity::set_has_signalstatus() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PoseWithVelocity::clear_has_signalstatus() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PoseWithVelocity::clear_signalstatus() {
  signalstatus_ = 0;
  clear_has_signalstatus();
}
inline ::pb::PDK::PoseWithVelocity_SignalStatus PoseWithVelocity::signalstatus() const {
  // @@protoc_insertion_point(field_get:pb.PDK.PoseWithVelocity.signalStatus)
  return static_cast< ::pb::PDK::PoseWithVelocity_SignalStatus >(signalstatus_);
}
inline void PoseWithVelocity::set_signalstatus(::pb::PDK::PoseWithVelocity_SignalStatus value) {
  assert(::pb::PDK::PoseWithVelocity_SignalStatus_IsValid(value));
  set_has_signalstatus();
  signalstatus_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.PoseWithVelocity.signalStatus)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PDK
}  // namespace pb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::PDK::PoseWithVelocity_SignalStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::PDK::PoseWithVelocity_SignalStatus>() {
  return ::pb::PDK::PoseWithVelocity_SignalStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_pdk_5fPoseWithVelocity_2eproto
