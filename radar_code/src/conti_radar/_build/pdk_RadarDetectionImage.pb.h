// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pdk_RadarDetectionImage.proto

#ifndef PROTOBUF_INCLUDED_pdk_5fRadarDetectionImage_2eproto
#define PROTOBUF_INCLUDED_pdk_5fRadarDetectionImage_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "pdk_SensorMsgHeader.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_pdk_5fRadarDetectionImage_2eproto 

namespace protobuf_pdk_5fRadarDetectionImage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_pdk_5fRadarDetectionImage_2eproto
namespace pb {
namespace PDK {
class RadarDetectionImage;
class RadarDetectionImageDefaultTypeInternal;
extern RadarDetectionImageDefaultTypeInternal _RadarDetectionImage_default_instance_;
class RadarDetectionImage_RadarDetection;
class RadarDetectionImage_RadarDetectionDefaultTypeInternal;
extern RadarDetectionImage_RadarDetectionDefaultTypeInternal _RadarDetectionImage_RadarDetection_default_instance_;
}  // namespace PDK
}  // namespace pb
namespace google {
namespace protobuf {
template<> ::pb::PDK::RadarDetectionImage* Arena::CreateMaybeMessage<::pb::PDK::RadarDetectionImage>(Arena*);
template<> ::pb::PDK::RadarDetectionImage_RadarDetection* Arena::CreateMaybeMessage<::pb::PDK::RadarDetectionImage_RadarDetection>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pb {
namespace PDK {

enum RadarDetectionImage_ElevationState {
  RadarDetectionImage_ElevationState_EM_ELSTATE_INVALID = 0,
  RadarDetectionImage_ElevationState_EM_ELSTATE_VALID = 1
};
bool RadarDetectionImage_ElevationState_IsValid(int value);
const RadarDetectionImage_ElevationState RadarDetectionImage_ElevationState_ElevationState_MIN = RadarDetectionImage_ElevationState_EM_ELSTATE_INVALID;
const RadarDetectionImage_ElevationState RadarDetectionImage_ElevationState_ElevationState_MAX = RadarDetectionImage_ElevationState_EM_ELSTATE_VALID;
const int RadarDetectionImage_ElevationState_ElevationState_ARRAYSIZE = RadarDetectionImage_ElevationState_ElevationState_MAX + 1;

const ::google::protobuf::EnumDescriptor* RadarDetectionImage_ElevationState_descriptor();
inline const ::std::string& RadarDetectionImage_ElevationState_Name(RadarDetectionImage_ElevationState value) {
  return ::google::protobuf::internal::NameOfEnum(
    RadarDetectionImage_ElevationState_descriptor(), value);
}
inline bool RadarDetectionImage_ElevationState_Parse(
    const ::std::string& name, RadarDetectionImage_ElevationState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RadarDetectionImage_ElevationState>(
    RadarDetectionImage_ElevationState_descriptor(), name, value);
}
enum RadarDetectionImage_ScanType {
  RadarDetectionImage_ScanType_ARS430_NEAR_SCAN = 0,
  RadarDetectionImage_ScanType_ARS430_FAR_SCAN = 1,
  RadarDetectionImage_ScanType_SRR520_NEAR_SCAN = 2,
  RadarDetectionImage_ScanType_SRR520_HRR_SCAN = 3,
  RadarDetectionImage_ScanType_ARS540_SCAN = 5
};
bool RadarDetectionImage_ScanType_IsValid(int value);
const RadarDetectionImage_ScanType RadarDetectionImage_ScanType_ScanType_MIN = RadarDetectionImage_ScanType_ARS430_NEAR_SCAN;
const RadarDetectionImage_ScanType RadarDetectionImage_ScanType_ScanType_MAX = RadarDetectionImage_ScanType_ARS540_SCAN;
const int RadarDetectionImage_ScanType_ScanType_ARRAYSIZE = RadarDetectionImage_ScanType_ScanType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RadarDetectionImage_ScanType_descriptor();
inline const ::std::string& RadarDetectionImage_ScanType_Name(RadarDetectionImage_ScanType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RadarDetectionImage_ScanType_descriptor(), value);
}
inline bool RadarDetectionImage_ScanType_Parse(
    const ::std::string& name, RadarDetectionImage_ScanType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RadarDetectionImage_ScanType>(
    RadarDetectionImage_ScanType_descriptor(), name, value);
}
// ===================================================================

class RadarDetectionImage_RadarDetection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.PDK.RadarDetectionImage.RadarDetection) */ {
 public:
  RadarDetectionImage_RadarDetection();
  virtual ~RadarDetectionImage_RadarDetection();

  RadarDetectionImage_RadarDetection(const RadarDetectionImage_RadarDetection& from);

  inline RadarDetectionImage_RadarDetection& operator=(const RadarDetectionImage_RadarDetection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RadarDetectionImage_RadarDetection(RadarDetectionImage_RadarDetection&& from) noexcept
    : RadarDetectionImage_RadarDetection() {
    *this = ::std::move(from);
  }

  inline RadarDetectionImage_RadarDetection& operator=(RadarDetectionImage_RadarDetection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarDetectionImage_RadarDetection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadarDetectionImage_RadarDetection* internal_default_instance() {
    return reinterpret_cast<const RadarDetectionImage_RadarDetection*>(
               &_RadarDetectionImage_RadarDetection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RadarDetectionImage_RadarDetection* other);
  friend void swap(RadarDetectionImage_RadarDetection& a, RadarDetectionImage_RadarDetection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RadarDetectionImage_RadarDetection* New() const final {
    return CreateMaybeMessage<RadarDetectionImage_RadarDetection>(NULL);
  }

  RadarDetectionImage_RadarDetection* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RadarDetectionImage_RadarDetection>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RadarDetectionImage_RadarDetection& from);
  void MergeFrom(const RadarDetectionImage_RadarDetection& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarDetectionImage_RadarDetection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float a_AzAng_hyp = 3;
  int a_azang_hyp_size() const;
  void clear_a_azang_hyp();
  static const int kAAzAngHypFieldNumber = 3;
  float a_azang_hyp(int index) const;
  void set_a_azang_hyp(int index, float value);
  void add_a_azang_hyp(float value);
  const ::google::protobuf::RepeatedField< float >&
      a_azang_hyp() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_a_azang_hyp();

  // repeated float a_ElAng_hyp = 4;
  int a_elang_hyp_size() const;
  void clear_a_elang_hyp();
  static const int kAElAngHypFieldNumber = 4;
  float a_elang_hyp(int index) const;
  void set_a_elang_hyp(int index, float value);
  void add_a_elang_hyp(float value);
  const ::google::protobuf::RepeatedField< float >&
      a_elang_hyp() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_a_elang_hyp();

  // repeated float a_RCS_hyp = 5;
  int a_rcs_hyp_size() const;
  void clear_a_rcs_hyp();
  static const int kARCSHypFieldNumber = 5;
  float a_rcs_hyp(int index) const;
  void set_a_rcs_hyp(int index, float value);
  void add_a_rcs_hyp(float value);
  const ::google::protobuf::RepeatedField< float >&
      a_rcs_hyp() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_a_rcs_hyp();

  // optional float f_Range = 1;
  bool has_f_range() const;
  void clear_f_range();
  static const int kFRangeFieldNumber = 1;
  float f_range() const;
  void set_f_range(float value);

  // optional float f_VrelRad = 2;
  bool has_f_vrelrad() const;
  void clear_f_vrelrad();
  static const int kFVrelRadFieldNumber = 2;
  float f_vrelrad() const;
  void set_f_vrelrad(float value);

  // optional float f_RangeVar = 7;
  bool has_f_rangevar() const;
  void clear_f_rangevar();
  static const int kFRangeVarFieldNumber = 7;
  float f_rangevar() const;
  void set_f_rangevar(float value);

  // optional float f_VrelRadVar = 8;
  bool has_f_vrelradvar() const;
  void clear_f_vrelradvar();
  static const int kFVrelRadVarFieldNumber = 8;
  float f_vrelradvar() const;
  void set_f_vrelradvar(float value);

  // optional float f_AzAngVar = 9;
  bool has_f_azangvar() const;
  void clear_f_azangvar();
  static const int kFAzAngVarFieldNumber = 9;
  float f_azangvar() const;
  void set_f_azangvar(float value);

  // optional float f_Pdh0 = 10;
  bool has_f_pdh0() const;
  void clear_f_pdh0();
  static const int kFPdh0FieldNumber = 10;
  float f_pdh0() const;
  void set_f_pdh0(float value);

  // optional float f_ElAngVar = 11;
  bool has_f_elangvar() const;
  void clear_f_elangvar();
  static const int kFElAngVarFieldNumber = 11;
  float f_elangvar() const;
  void set_f_elangvar(float value);

  // optional .pb.PDK.RadarDetectionImage.ElevationState e_ElevationState = 12;
  bool has_e_elevationstate() const;
  void clear_e_elevationstate();
  static const int kEElevationStateFieldNumber = 12;
  ::pb::PDK::RadarDetectionImage_ElevationState e_elevationstate() const;
  void set_e_elevationstate(::pb::PDK::RadarDetectionImage_ElevationState value);

  // optional uint32 u_Pdh0Flags = 13;
  bool has_u_pdh0flags() const;
  void clear_u_pdh0flags();
  static const int kUPdh0FlagsFieldNumber = 13;
  ::google::protobuf::uint32 u_pdh0flags() const;
  void set_u_pdh0flags(::google::protobuf::uint32 value);

  // optional float f_SNR = 15;
  bool has_f_snr() const;
  void clear_f_snr();
  static const int kFSNRFieldNumber = 15;
  float f_snr() const;
  void set_f_snr(float value);

  // optional float f_VrelRadResolved = 17;
  bool has_f_vrelradresolved() const;
  void clear_f_vrelradresolved();
  static const int kFVrelRadResolvedFieldNumber = 17;
  float f_vrelradresolved() const;
  void set_f_vrelradresolved(float value);

  // @@protoc_insertion_point(class_scope:pb.PDK.RadarDetectionImage.RadarDetection)
 private:
  void set_has_f_range();
  void clear_has_f_range();
  void set_has_f_vrelrad();
  void clear_has_f_vrelrad();
  void set_has_f_rangevar();
  void clear_has_f_rangevar();
  void set_has_f_vrelradvar();
  void clear_has_f_vrelradvar();
  void set_has_f_azangvar();
  void clear_has_f_azangvar();
  void set_has_f_pdh0();
  void clear_has_f_pdh0();
  void set_has_f_elangvar();
  void clear_has_f_elangvar();
  void set_has_e_elevationstate();
  void clear_has_e_elevationstate();
  void set_has_u_pdh0flags();
  void clear_has_u_pdh0flags();
  void set_has_f_snr();
  void clear_has_f_snr();
  void set_has_f_vrelradresolved();
  void clear_has_f_vrelradresolved();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< float > a_azang_hyp_;
  ::google::protobuf::RepeatedField< float > a_elang_hyp_;
  ::google::protobuf::RepeatedField< float > a_rcs_hyp_;
  float f_range_;
  float f_vrelrad_;
  float f_rangevar_;
  float f_vrelradvar_;
  float f_azangvar_;
  float f_pdh0_;
  float f_elangvar_;
  int e_elevationstate_;
  ::google::protobuf::uint32 u_pdh0flags_;
  float f_snr_;
  float f_vrelradresolved_;
  friend struct ::protobuf_pdk_5fRadarDetectionImage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RadarDetectionImage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.PDK.RadarDetectionImage) */ {
 public:
  RadarDetectionImage();
  virtual ~RadarDetectionImage();

  RadarDetectionImage(const RadarDetectionImage& from);

  inline RadarDetectionImage& operator=(const RadarDetectionImage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RadarDetectionImage(RadarDetectionImage&& from) noexcept
    : RadarDetectionImage() {
    *this = ::std::move(from);
  }

  inline RadarDetectionImage& operator=(RadarDetectionImage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarDetectionImage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadarDetectionImage* internal_default_instance() {
    return reinterpret_cast<const RadarDetectionImage*>(
               &_RadarDetectionImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RadarDetectionImage* other);
  friend void swap(RadarDetectionImage& a, RadarDetectionImage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RadarDetectionImage* New() const final {
    return CreateMaybeMessage<RadarDetectionImage>(NULL);
  }

  RadarDetectionImage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RadarDetectionImage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RadarDetectionImage& from);
  void MergeFrom(const RadarDetectionImage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarDetectionImage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RadarDetectionImage_RadarDetection RadarDetection;

  typedef RadarDetectionImage_ElevationState ElevationState;
  static const ElevationState EM_ELSTATE_INVALID =
    RadarDetectionImage_ElevationState_EM_ELSTATE_INVALID;
  static const ElevationState EM_ELSTATE_VALID =
    RadarDetectionImage_ElevationState_EM_ELSTATE_VALID;
  static inline bool ElevationState_IsValid(int value) {
    return RadarDetectionImage_ElevationState_IsValid(value);
  }
  static const ElevationState ElevationState_MIN =
    RadarDetectionImage_ElevationState_ElevationState_MIN;
  static const ElevationState ElevationState_MAX =
    RadarDetectionImage_ElevationState_ElevationState_MAX;
  static const int ElevationState_ARRAYSIZE =
    RadarDetectionImage_ElevationState_ElevationState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ElevationState_descriptor() {
    return RadarDetectionImage_ElevationState_descriptor();
  }
  static inline const ::std::string& ElevationState_Name(ElevationState value) {
    return RadarDetectionImage_ElevationState_Name(value);
  }
  static inline bool ElevationState_Parse(const ::std::string& name,
      ElevationState* value) {
    return RadarDetectionImage_ElevationState_Parse(name, value);
  }

  typedef RadarDetectionImage_ScanType ScanType;
  static const ScanType ARS430_NEAR_SCAN =
    RadarDetectionImage_ScanType_ARS430_NEAR_SCAN;
  static const ScanType ARS430_FAR_SCAN =
    RadarDetectionImage_ScanType_ARS430_FAR_SCAN;
  static const ScanType SRR520_NEAR_SCAN =
    RadarDetectionImage_ScanType_SRR520_NEAR_SCAN;
  static const ScanType SRR520_HRR_SCAN =
    RadarDetectionImage_ScanType_SRR520_HRR_SCAN;
  static const ScanType ARS540_SCAN =
    RadarDetectionImage_ScanType_ARS540_SCAN;
  static inline bool ScanType_IsValid(int value) {
    return RadarDetectionImage_ScanType_IsValid(value);
  }
  static const ScanType ScanType_MIN =
    RadarDetectionImage_ScanType_ScanType_MIN;
  static const ScanType ScanType_MAX =
    RadarDetectionImage_ScanType_ScanType_MAX;
  static const int ScanType_ARRAYSIZE =
    RadarDetectionImage_ScanType_ScanType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ScanType_descriptor() {
    return RadarDetectionImage_ScanType_descriptor();
  }
  static inline const ::std::string& ScanType_Name(ScanType value) {
    return RadarDetectionImage_ScanType_Name(value);
  }
  static inline bool ScanType_Parse(const ::std::string& name,
      ScanType* value) {
    return RadarDetectionImage_ScanType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .pb.PDK.RadarDetectionImage.RadarDetection a_RadarDetectionList = 8;
  int a_radardetectionlist_size() const;
  void clear_a_radardetectionlist();
  static const int kARadarDetectionListFieldNumber = 8;
  ::pb::PDK::RadarDetectionImage_RadarDetection* mutable_a_radardetectionlist(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::PDK::RadarDetectionImage_RadarDetection >*
      mutable_a_radardetectionlist();
  const ::pb::PDK::RadarDetectionImage_RadarDetection& a_radardetectionlist(int index) const;
  ::pb::PDK::RadarDetectionImage_RadarDetection* add_a_radardetectionlist();
  const ::google::protobuf::RepeatedPtrField< ::pb::PDK::RadarDetectionImage_RadarDetection >&
      a_radardetectionlist() const;

  // optional .pb.PDK.SensorMsgHeader t_Header = 1;
  bool has_t_header() const;
  void clear_t_header();
  static const int kTHeaderFieldNumber = 1;
  private:
  const ::pb::PDK::SensorMsgHeader& _internal_t_header() const;
  public:
  const ::pb::PDK::SensorMsgHeader& t_header() const;
  ::pb::PDK::SensorMsgHeader* release_t_header();
  ::pb::PDK::SensorMsgHeader* mutable_t_header();
  void set_allocated_t_header(::pb::PDK::SensorMsgHeader* t_header);

  // optional float f_Vambig = 2;
  bool has_f_vambig() const;
  void clear_f_vambig();
  static const int kFVambigFieldNumber = 2;
  float f_vambig() const;
  void set_f_vambig(float value);

  // optional uint32 u_NofDetections = 5;
  bool has_u_nofdetections() const;
  void clear_u_nofdetections();
  static const int kUNofDetectionsFieldNumber = 5;
  ::google::protobuf::uint32 u_nofdetections() const;
  void set_u_nofdetections(::google::protobuf::uint32 value);

  // optional uint32 u_NofAngleHypothesis = 6;
  bool has_u_nofanglehypothesis() const;
  void clear_u_nofanglehypothesis();
  static const int kUNofAngleHypothesisFieldNumber = 6;
  ::google::protobuf::uint32 u_nofanglehypothesis() const;
  void set_u_nofanglehypothesis(::google::protobuf::uint32 value);

  // optional .pb.PDK.RadarDetectionImage.ScanType e_ScanType = 7;
  bool has_e_scantype() const;
  void clear_e_scantype();
  static const int kEScanTypeFieldNumber = 7;
  ::pb::PDK::RadarDetectionImage_ScanType e_scantype() const;
  void set_e_scantype(::pb::PDK::RadarDetectionImage_ScanType value);

  // @@protoc_insertion_point(class_scope:pb.PDK.RadarDetectionImage)
 private:
  void set_has_t_header();
  void clear_has_t_header();
  void set_has_f_vambig();
  void clear_has_f_vambig();
  void set_has_u_nofdetections();
  void clear_has_u_nofdetections();
  void set_has_u_nofanglehypothesis();
  void clear_has_u_nofanglehypothesis();
  void set_has_e_scantype();
  void clear_has_e_scantype();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::PDK::RadarDetectionImage_RadarDetection > a_radardetectionlist_;
  ::pb::PDK::SensorMsgHeader* t_header_;
  float f_vambig_;
  ::google::protobuf::uint32 u_nofdetections_;
  ::google::protobuf::uint32 u_nofanglehypothesis_;
  int e_scantype_;
  friend struct ::protobuf_pdk_5fRadarDetectionImage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RadarDetectionImage_RadarDetection

// optional float f_Range = 1;
inline bool RadarDetectionImage_RadarDetection::has_f_range() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RadarDetectionImage_RadarDetection::set_has_f_range() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RadarDetectionImage_RadarDetection::clear_has_f_range() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RadarDetectionImage_RadarDetection::clear_f_range() {
  f_range_ = 0;
  clear_has_f_range();
}
inline float RadarDetectionImage_RadarDetection::f_range() const {
  // @@protoc_insertion_point(field_get:pb.PDK.RadarDetectionImage.RadarDetection.f_Range)
  return f_range_;
}
inline void RadarDetectionImage_RadarDetection::set_f_range(float value) {
  set_has_f_range();
  f_range_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.RadarDetectionImage.RadarDetection.f_Range)
}

// optional float f_VrelRad = 2;
inline bool RadarDetectionImage_RadarDetection::has_f_vrelrad() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RadarDetectionImage_RadarDetection::set_has_f_vrelrad() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RadarDetectionImage_RadarDetection::clear_has_f_vrelrad() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RadarDetectionImage_RadarDetection::clear_f_vrelrad() {
  f_vrelrad_ = 0;
  clear_has_f_vrelrad();
}
inline float RadarDetectionImage_RadarDetection::f_vrelrad() const {
  // @@protoc_insertion_point(field_get:pb.PDK.RadarDetectionImage.RadarDetection.f_VrelRad)
  return f_vrelrad_;
}
inline void RadarDetectionImage_RadarDetection::set_f_vrelrad(float value) {
  set_has_f_vrelrad();
  f_vrelrad_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.RadarDetectionImage.RadarDetection.f_VrelRad)
}

// repeated float a_AzAng_hyp = 3;
inline int RadarDetectionImage_RadarDetection::a_azang_hyp_size() const {
  return a_azang_hyp_.size();
}
inline void RadarDetectionImage_RadarDetection::clear_a_azang_hyp() {
  a_azang_hyp_.Clear();
}
inline float RadarDetectionImage_RadarDetection::a_azang_hyp(int index) const {
  // @@protoc_insertion_point(field_get:pb.PDK.RadarDetectionImage.RadarDetection.a_AzAng_hyp)
  return a_azang_hyp_.Get(index);
}
inline void RadarDetectionImage_RadarDetection::set_a_azang_hyp(int index, float value) {
  a_azang_hyp_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.PDK.RadarDetectionImage.RadarDetection.a_AzAng_hyp)
}
inline void RadarDetectionImage_RadarDetection::add_a_azang_hyp(float value) {
  a_azang_hyp_.Add(value);
  // @@protoc_insertion_point(field_add:pb.PDK.RadarDetectionImage.RadarDetection.a_AzAng_hyp)
}
inline const ::google::protobuf::RepeatedField< float >&
RadarDetectionImage_RadarDetection::a_azang_hyp() const {
  // @@protoc_insertion_point(field_list:pb.PDK.RadarDetectionImage.RadarDetection.a_AzAng_hyp)
  return a_azang_hyp_;
}
inline ::google::protobuf::RepeatedField< float >*
RadarDetectionImage_RadarDetection::mutable_a_azang_hyp() {
  // @@protoc_insertion_point(field_mutable_list:pb.PDK.RadarDetectionImage.RadarDetection.a_AzAng_hyp)
  return &a_azang_hyp_;
}

// repeated float a_ElAng_hyp = 4;
inline int RadarDetectionImage_RadarDetection::a_elang_hyp_size() const {
  return a_elang_hyp_.size();
}
inline void RadarDetectionImage_RadarDetection::clear_a_elang_hyp() {
  a_elang_hyp_.Clear();
}
inline float RadarDetectionImage_RadarDetection::a_elang_hyp(int index) const {
  // @@protoc_insertion_point(field_get:pb.PDK.RadarDetectionImage.RadarDetection.a_ElAng_hyp)
  return a_elang_hyp_.Get(index);
}
inline void RadarDetectionImage_RadarDetection::set_a_elang_hyp(int index, float value) {
  a_elang_hyp_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.PDK.RadarDetectionImage.RadarDetection.a_ElAng_hyp)
}
inline void RadarDetectionImage_RadarDetection::add_a_elang_hyp(float value) {
  a_elang_hyp_.Add(value);
  // @@protoc_insertion_point(field_add:pb.PDK.RadarDetectionImage.RadarDetection.a_ElAng_hyp)
}
inline const ::google::protobuf::RepeatedField< float >&
RadarDetectionImage_RadarDetection::a_elang_hyp() const {
  // @@protoc_insertion_point(field_list:pb.PDK.RadarDetectionImage.RadarDetection.a_ElAng_hyp)
  return a_elang_hyp_;
}
inline ::google::protobuf::RepeatedField< float >*
RadarDetectionImage_RadarDetection::mutable_a_elang_hyp() {
  // @@protoc_insertion_point(field_mutable_list:pb.PDK.RadarDetectionImage.RadarDetection.a_ElAng_hyp)
  return &a_elang_hyp_;
}

// repeated float a_RCS_hyp = 5;
inline int RadarDetectionImage_RadarDetection::a_rcs_hyp_size() const {
  return a_rcs_hyp_.size();
}
inline void RadarDetectionImage_RadarDetection::clear_a_rcs_hyp() {
  a_rcs_hyp_.Clear();
}
inline float RadarDetectionImage_RadarDetection::a_rcs_hyp(int index) const {
  // @@protoc_insertion_point(field_get:pb.PDK.RadarDetectionImage.RadarDetection.a_RCS_hyp)
  return a_rcs_hyp_.Get(index);
}
inline void RadarDetectionImage_RadarDetection::set_a_rcs_hyp(int index, float value) {
  a_rcs_hyp_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.PDK.RadarDetectionImage.RadarDetection.a_RCS_hyp)
}
inline void RadarDetectionImage_RadarDetection::add_a_rcs_hyp(float value) {
  a_rcs_hyp_.Add(value);
  // @@protoc_insertion_point(field_add:pb.PDK.RadarDetectionImage.RadarDetection.a_RCS_hyp)
}
inline const ::google::protobuf::RepeatedField< float >&
RadarDetectionImage_RadarDetection::a_rcs_hyp() const {
  // @@protoc_insertion_point(field_list:pb.PDK.RadarDetectionImage.RadarDetection.a_RCS_hyp)
  return a_rcs_hyp_;
}
inline ::google::protobuf::RepeatedField< float >*
RadarDetectionImage_RadarDetection::mutable_a_rcs_hyp() {
  // @@protoc_insertion_point(field_mutable_list:pb.PDK.RadarDetectionImage.RadarDetection.a_RCS_hyp)
  return &a_rcs_hyp_;
}

// optional float f_RangeVar = 7;
inline bool RadarDetectionImage_RadarDetection::has_f_rangevar() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RadarDetectionImage_RadarDetection::set_has_f_rangevar() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RadarDetectionImage_RadarDetection::clear_has_f_rangevar() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RadarDetectionImage_RadarDetection::clear_f_rangevar() {
  f_rangevar_ = 0;
  clear_has_f_rangevar();
}
inline float RadarDetectionImage_RadarDetection::f_rangevar() const {
  // @@protoc_insertion_point(field_get:pb.PDK.RadarDetectionImage.RadarDetection.f_RangeVar)
  return f_rangevar_;
}
inline void RadarDetectionImage_RadarDetection::set_f_rangevar(float value) {
  set_has_f_rangevar();
  f_rangevar_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.RadarDetectionImage.RadarDetection.f_RangeVar)
}

// optional float f_VrelRadVar = 8;
inline bool RadarDetectionImage_RadarDetection::has_f_vrelradvar() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RadarDetectionImage_RadarDetection::set_has_f_vrelradvar() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RadarDetectionImage_RadarDetection::clear_has_f_vrelradvar() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RadarDetectionImage_RadarDetection::clear_f_vrelradvar() {
  f_vrelradvar_ = 0;
  clear_has_f_vrelradvar();
}
inline float RadarDetectionImage_RadarDetection::f_vrelradvar() const {
  // @@protoc_insertion_point(field_get:pb.PDK.RadarDetectionImage.RadarDetection.f_VrelRadVar)
  return f_vrelradvar_;
}
inline void RadarDetectionImage_RadarDetection::set_f_vrelradvar(float value) {
  set_has_f_vrelradvar();
  f_vrelradvar_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.RadarDetectionImage.RadarDetection.f_VrelRadVar)
}

// optional float f_AzAngVar = 9;
inline bool RadarDetectionImage_RadarDetection::has_f_azangvar() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RadarDetectionImage_RadarDetection::set_has_f_azangvar() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RadarDetectionImage_RadarDetection::clear_has_f_azangvar() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RadarDetectionImage_RadarDetection::clear_f_azangvar() {
  f_azangvar_ = 0;
  clear_has_f_azangvar();
}
inline float RadarDetectionImage_RadarDetection::f_azangvar() const {
  // @@protoc_insertion_point(field_get:pb.PDK.RadarDetectionImage.RadarDetection.f_AzAngVar)
  return f_azangvar_;
}
inline void RadarDetectionImage_RadarDetection::set_f_azangvar(float value) {
  set_has_f_azangvar();
  f_azangvar_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.RadarDetectionImage.RadarDetection.f_AzAngVar)
}

// optional float f_Pdh0 = 10;
inline bool RadarDetectionImage_RadarDetection::has_f_pdh0() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RadarDetectionImage_RadarDetection::set_has_f_pdh0() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RadarDetectionImage_RadarDetection::clear_has_f_pdh0() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RadarDetectionImage_RadarDetection::clear_f_pdh0() {
  f_pdh0_ = 0;
  clear_has_f_pdh0();
}
inline float RadarDetectionImage_RadarDetection::f_pdh0() const {
  // @@protoc_insertion_point(field_get:pb.PDK.RadarDetectionImage.RadarDetection.f_Pdh0)
  return f_pdh0_;
}
inline void RadarDetectionImage_RadarDetection::set_f_pdh0(float value) {
  set_has_f_pdh0();
  f_pdh0_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.RadarDetectionImage.RadarDetection.f_Pdh0)
}

// optional float f_ElAngVar = 11;
inline bool RadarDetectionImage_RadarDetection::has_f_elangvar() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RadarDetectionImage_RadarDetection::set_has_f_elangvar() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RadarDetectionImage_RadarDetection::clear_has_f_elangvar() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RadarDetectionImage_RadarDetection::clear_f_elangvar() {
  f_elangvar_ = 0;
  clear_has_f_elangvar();
}
inline float RadarDetectionImage_RadarDetection::f_elangvar() const {
  // @@protoc_insertion_point(field_get:pb.PDK.RadarDetectionImage.RadarDetection.f_ElAngVar)
  return f_elangvar_;
}
inline void RadarDetectionImage_RadarDetection::set_f_elangvar(float value) {
  set_has_f_elangvar();
  f_elangvar_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.RadarDetectionImage.RadarDetection.f_ElAngVar)
}

// optional .pb.PDK.RadarDetectionImage.ElevationState e_ElevationState = 12;
inline bool RadarDetectionImage_RadarDetection::has_e_elevationstate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RadarDetectionImage_RadarDetection::set_has_e_elevationstate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RadarDetectionImage_RadarDetection::clear_has_e_elevationstate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RadarDetectionImage_RadarDetection::clear_e_elevationstate() {
  e_elevationstate_ = 0;
  clear_has_e_elevationstate();
}
inline ::pb::PDK::RadarDetectionImage_ElevationState RadarDetectionImage_RadarDetection::e_elevationstate() const {
  // @@protoc_insertion_point(field_get:pb.PDK.RadarDetectionImage.RadarDetection.e_ElevationState)
  return static_cast< ::pb::PDK::RadarDetectionImage_ElevationState >(e_elevationstate_);
}
inline void RadarDetectionImage_RadarDetection::set_e_elevationstate(::pb::PDK::RadarDetectionImage_ElevationState value) {
  assert(::pb::PDK::RadarDetectionImage_ElevationState_IsValid(value));
  set_has_e_elevationstate();
  e_elevationstate_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.RadarDetectionImage.RadarDetection.e_ElevationState)
}

// optional uint32 u_Pdh0Flags = 13;
inline bool RadarDetectionImage_RadarDetection::has_u_pdh0flags() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RadarDetectionImage_RadarDetection::set_has_u_pdh0flags() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RadarDetectionImage_RadarDetection::clear_has_u_pdh0flags() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RadarDetectionImage_RadarDetection::clear_u_pdh0flags() {
  u_pdh0flags_ = 0u;
  clear_has_u_pdh0flags();
}
inline ::google::protobuf::uint32 RadarDetectionImage_RadarDetection::u_pdh0flags() const {
  // @@protoc_insertion_point(field_get:pb.PDK.RadarDetectionImage.RadarDetection.u_Pdh0Flags)
  return u_pdh0flags_;
}
inline void RadarDetectionImage_RadarDetection::set_u_pdh0flags(::google::protobuf::uint32 value) {
  set_has_u_pdh0flags();
  u_pdh0flags_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.RadarDetectionImage.RadarDetection.u_Pdh0Flags)
}

// optional float f_SNR = 15;
inline bool RadarDetectionImage_RadarDetection::has_f_snr() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RadarDetectionImage_RadarDetection::set_has_f_snr() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RadarDetectionImage_RadarDetection::clear_has_f_snr() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RadarDetectionImage_RadarDetection::clear_f_snr() {
  f_snr_ = 0;
  clear_has_f_snr();
}
inline float RadarDetectionImage_RadarDetection::f_snr() const {
  // @@protoc_insertion_point(field_get:pb.PDK.RadarDetectionImage.RadarDetection.f_SNR)
  return f_snr_;
}
inline void RadarDetectionImage_RadarDetection::set_f_snr(float value) {
  set_has_f_snr();
  f_snr_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.RadarDetectionImage.RadarDetection.f_SNR)
}

// optional float f_VrelRadResolved = 17;
inline bool RadarDetectionImage_RadarDetection::has_f_vrelradresolved() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RadarDetectionImage_RadarDetection::set_has_f_vrelradresolved() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RadarDetectionImage_RadarDetection::clear_has_f_vrelradresolved() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RadarDetectionImage_RadarDetection::clear_f_vrelradresolved() {
  f_vrelradresolved_ = 0;
  clear_has_f_vrelradresolved();
}
inline float RadarDetectionImage_RadarDetection::f_vrelradresolved() const {
  // @@protoc_insertion_point(field_get:pb.PDK.RadarDetectionImage.RadarDetection.f_VrelRadResolved)
  return f_vrelradresolved_;
}
inline void RadarDetectionImage_RadarDetection::set_f_vrelradresolved(float value) {
  set_has_f_vrelradresolved();
  f_vrelradresolved_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.RadarDetectionImage.RadarDetection.f_VrelRadResolved)
}

// -------------------------------------------------------------------

// RadarDetectionImage

// optional .pb.PDK.SensorMsgHeader t_Header = 1;
inline bool RadarDetectionImage::has_t_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RadarDetectionImage::set_has_t_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RadarDetectionImage::clear_has_t_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::pb::PDK::SensorMsgHeader& RadarDetectionImage::_internal_t_header() const {
  return *t_header_;
}
inline const ::pb::PDK::SensorMsgHeader& RadarDetectionImage::t_header() const {
  const ::pb::PDK::SensorMsgHeader* p = t_header_;
  // @@protoc_insertion_point(field_get:pb.PDK.RadarDetectionImage.t_Header)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::PDK::SensorMsgHeader*>(
      &::pb::PDK::_SensorMsgHeader_default_instance_);
}
inline ::pb::PDK::SensorMsgHeader* RadarDetectionImage::release_t_header() {
  // @@protoc_insertion_point(field_release:pb.PDK.RadarDetectionImage.t_Header)
  clear_has_t_header();
  ::pb::PDK::SensorMsgHeader* temp = t_header_;
  t_header_ = NULL;
  return temp;
}
inline ::pb::PDK::SensorMsgHeader* RadarDetectionImage::mutable_t_header() {
  set_has_t_header();
  if (t_header_ == NULL) {
    auto* p = CreateMaybeMessage<::pb::PDK::SensorMsgHeader>(GetArenaNoVirtual());
    t_header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.PDK.RadarDetectionImage.t_Header)
  return t_header_;
}
inline void RadarDetectionImage::set_allocated_t_header(::pb::PDK::SensorMsgHeader* t_header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(t_header_);
  }
  if (t_header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      t_header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, t_header, submessage_arena);
    }
    set_has_t_header();
  } else {
    clear_has_t_header();
  }
  t_header_ = t_header;
  // @@protoc_insertion_point(field_set_allocated:pb.PDK.RadarDetectionImage.t_Header)
}

// optional float f_Vambig = 2;
inline bool RadarDetectionImage::has_f_vambig() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RadarDetectionImage::set_has_f_vambig() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RadarDetectionImage::clear_has_f_vambig() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RadarDetectionImage::clear_f_vambig() {
  f_vambig_ = 0;
  clear_has_f_vambig();
}
inline float RadarDetectionImage::f_vambig() const {
  // @@protoc_insertion_point(field_get:pb.PDK.RadarDetectionImage.f_Vambig)
  return f_vambig_;
}
inline void RadarDetectionImage::set_f_vambig(float value) {
  set_has_f_vambig();
  f_vambig_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.RadarDetectionImage.f_Vambig)
}

// optional uint32 u_NofDetections = 5;
inline bool RadarDetectionImage::has_u_nofdetections() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RadarDetectionImage::set_has_u_nofdetections() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RadarDetectionImage::clear_has_u_nofdetections() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RadarDetectionImage::clear_u_nofdetections() {
  u_nofdetections_ = 0u;
  clear_has_u_nofdetections();
}
inline ::google::protobuf::uint32 RadarDetectionImage::u_nofdetections() const {
  // @@protoc_insertion_point(field_get:pb.PDK.RadarDetectionImage.u_NofDetections)
  return u_nofdetections_;
}
inline void RadarDetectionImage::set_u_nofdetections(::google::protobuf::uint32 value) {
  set_has_u_nofdetections();
  u_nofdetections_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.RadarDetectionImage.u_NofDetections)
}

// optional uint32 u_NofAngleHypothesis = 6;
inline bool RadarDetectionImage::has_u_nofanglehypothesis() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RadarDetectionImage::set_has_u_nofanglehypothesis() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RadarDetectionImage::clear_has_u_nofanglehypothesis() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RadarDetectionImage::clear_u_nofanglehypothesis() {
  u_nofanglehypothesis_ = 0u;
  clear_has_u_nofanglehypothesis();
}
inline ::google::protobuf::uint32 RadarDetectionImage::u_nofanglehypothesis() const {
  // @@protoc_insertion_point(field_get:pb.PDK.RadarDetectionImage.u_NofAngleHypothesis)
  return u_nofanglehypothesis_;
}
inline void RadarDetectionImage::set_u_nofanglehypothesis(::google::protobuf::uint32 value) {
  set_has_u_nofanglehypothesis();
  u_nofanglehypothesis_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.RadarDetectionImage.u_NofAngleHypothesis)
}

// optional .pb.PDK.RadarDetectionImage.ScanType e_ScanType = 7;
inline bool RadarDetectionImage::has_e_scantype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RadarDetectionImage::set_has_e_scantype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RadarDetectionImage::clear_has_e_scantype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RadarDetectionImage::clear_e_scantype() {
  e_scantype_ = 0;
  clear_has_e_scantype();
}
inline ::pb::PDK::RadarDetectionImage_ScanType RadarDetectionImage::e_scantype() const {
  // @@protoc_insertion_point(field_get:pb.PDK.RadarDetectionImage.e_ScanType)
  return static_cast< ::pb::PDK::RadarDetectionImage_ScanType >(e_scantype_);
}
inline void RadarDetectionImage::set_e_scantype(::pb::PDK::RadarDetectionImage_ScanType value) {
  assert(::pb::PDK::RadarDetectionImage_ScanType_IsValid(value));
  set_has_e_scantype();
  e_scantype_ = value;
  // @@protoc_insertion_point(field_set:pb.PDK.RadarDetectionImage.e_ScanType)
}

// repeated .pb.PDK.RadarDetectionImage.RadarDetection a_RadarDetectionList = 8;
inline int RadarDetectionImage::a_radardetectionlist_size() const {
  return a_radardetectionlist_.size();
}
inline void RadarDetectionImage::clear_a_radardetectionlist() {
  a_radardetectionlist_.Clear();
}
inline ::pb::PDK::RadarDetectionImage_RadarDetection* RadarDetectionImage::mutable_a_radardetectionlist(int index) {
  // @@protoc_insertion_point(field_mutable:pb.PDK.RadarDetectionImage.a_RadarDetectionList)
  return a_radardetectionlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::PDK::RadarDetectionImage_RadarDetection >*
RadarDetectionImage::mutable_a_radardetectionlist() {
  // @@protoc_insertion_point(field_mutable_list:pb.PDK.RadarDetectionImage.a_RadarDetectionList)
  return &a_radardetectionlist_;
}
inline const ::pb::PDK::RadarDetectionImage_RadarDetection& RadarDetectionImage::a_radardetectionlist(int index) const {
  // @@protoc_insertion_point(field_get:pb.PDK.RadarDetectionImage.a_RadarDetectionList)
  return a_radardetectionlist_.Get(index);
}
inline ::pb::PDK::RadarDetectionImage_RadarDetection* RadarDetectionImage::add_a_radardetectionlist() {
  // @@protoc_insertion_point(field_add:pb.PDK.RadarDetectionImage.a_RadarDetectionList)
  return a_radardetectionlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::PDK::RadarDetectionImage_RadarDetection >&
RadarDetectionImage::a_radardetectionlist() const {
  // @@protoc_insertion_point(field_list:pb.PDK.RadarDetectionImage.a_RadarDetectionList)
  return a_radardetectionlist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PDK
}  // namespace pb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::PDK::RadarDetectionImage_ElevationState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::PDK::RadarDetectionImage_ElevationState>() {
  return ::pb::PDK::RadarDetectionImage_ElevationState_descriptor();
}
template <> struct is_proto_enum< ::pb::PDK::RadarDetectionImage_ScanType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::PDK::RadarDetectionImage_ScanType>() {
  return ::pb::PDK::RadarDetectionImage_ScanType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_pdk_5fRadarDetectionImage_2eproto
