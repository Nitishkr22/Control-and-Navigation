// Generated by gencpp from file conti_radar/radar_msgs.msg
// DO NOT EDIT!


#ifndef CONTI_RADAR_MESSAGE_RADAR_MSGS_H
#define CONTI_RADAR_MESSAGE_RADAR_MSGS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace conti_radar
{
template <class ContainerAllocator>
struct radar_msgs_
{
  typedef radar_msgs_<ContainerAllocator> Type;

  radar_msgs_()
    : object_ID()
    , x()
    , y()
    , velx()
    , vely()  {
    }
  radar_msgs_(const ContainerAllocator& _alloc)
    : object_ID(_alloc)
    , x(_alloc)
    , y(_alloc)
    , velx(_alloc)
    , vely(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _object_ID_type;
  _object_ID_type object_ID;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _x_type;
  _x_type x;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _y_type;
  _y_type y;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _velx_type;
  _velx_type velx;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _vely_type;
  _vely_type vely;





  typedef boost::shared_ptr< ::conti_radar::radar_msgs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::conti_radar::radar_msgs_<ContainerAllocator> const> ConstPtr;

}; // struct radar_msgs_

typedef ::conti_radar::radar_msgs_<std::allocator<void> > radar_msgs;

typedef boost::shared_ptr< ::conti_radar::radar_msgs > radar_msgsPtr;
typedef boost::shared_ptr< ::conti_radar::radar_msgs const> radar_msgsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::conti_radar::radar_msgs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::conti_radar::radar_msgs_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::conti_radar::radar_msgs_<ContainerAllocator1> & lhs, const ::conti_radar::radar_msgs_<ContainerAllocator2> & rhs)
{
  return lhs.object_ID == rhs.object_ID &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.velx == rhs.velx &&
    lhs.vely == rhs.vely;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::conti_radar::radar_msgs_<ContainerAllocator1> & lhs, const ::conti_radar::radar_msgs_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace conti_radar

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::conti_radar::radar_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::conti_radar::radar_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::conti_radar::radar_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::conti_radar::radar_msgs_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::conti_radar::radar_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::conti_radar::radar_msgs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::conti_radar::radar_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b031195c2ce10d5f86075f318ebd08cc";
  }

  static const char* value(const ::conti_radar::radar_msgs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb031195c2ce10d5fULL;
  static const uint64_t static_value2 = 0x86075f318ebd08ccULL;
};

template<class ContainerAllocator>
struct DataType< ::conti_radar::radar_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "conti_radar/radar_msgs";
  }

  static const char* value(const ::conti_radar::radar_msgs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::conti_radar::radar_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[] object_ID\n"
"float32[] x\n"
"float32[] y\n"
"float32[] velx\n"
"float32[] vely\n"
;
  }

  static const char* value(const ::conti_radar::radar_msgs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::conti_radar::radar_msgs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object_ID);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.velx);
      stream.next(m.vely);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct radar_msgs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::conti_radar::radar_msgs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::conti_radar::radar_msgs_<ContainerAllocator>& v)
  {
    s << indent << "object_ID[]" << std::endl;
    for (size_t i = 0; i < v.object_ID.size(); ++i)
    {
      s << indent << "  object_ID[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.object_ID[i]);
    }
    s << indent << "x[]" << std::endl;
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      s << indent << "  x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.x[i]);
    }
    s << indent << "y[]" << std::endl;
    for (size_t i = 0; i < v.y.size(); ++i)
    {
      s << indent << "  y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.y[i]);
    }
    s << indent << "velx[]" << std::endl;
    for (size_t i = 0; i < v.velx.size(); ++i)
    {
      s << indent << "  velx[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.velx[i]);
    }
    s << indent << "vely[]" << std::endl;
    for (size_t i = 0; i < v.vely.size(); ++i)
    {
      s << indent << "  vely[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.vely[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTI_RADAR_MESSAGE_RADAR_MSGS_H
